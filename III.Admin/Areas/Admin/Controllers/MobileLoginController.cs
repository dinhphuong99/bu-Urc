using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using ESEIM.Models;
using ESEIM.Utils;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Hosting;
using System.Globalization;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using System.Text;
using System.Collections.Generic;
using ESEIM.Controllers;
using III.Domain.Enums;
using ESEIM;
using Microsoft.Extensions.Options;
using static III.Admin.Controllers.ContractController;
using static III.Admin.Controllers.InventoryController;
using static III.Admin.Controllers.CardJobController;
using static III.Admin.Controllers.UserBusyOrFreeController;
using FTU.Utils.HelperNet;
using System.Net;
using Syncfusion.XlsIO;
using Syncfusion.DocIO;
using Aspose.Pdf;
using Aspose.Pdf.Text;
using Aspose.Pdf.Annotations;
using Syncfusion.Presentation;
using Syncfusion.Pdf;
using Syncfusion.PresentationToPdfConverter;
using Syncfusion.EJ2.PdfViewer;
using Syncfusion.Pdf.Parsing;
using Microsoft.Extensions.Caching.Memory;
using DocumentFormat.OpenXml.Wordprocessing;
using Syncfusion.DocIO.DLS;
using System.Drawing;
using Image = System.Drawing.Image;
using Microsoft.AspNetCore.Cors;
using System.Data;

namespace III.Admin.Controllers
{
    //[EnableCors("AllowSpecificOrigin")]
    public class MobileLoginController : Controller
    {
        private static AsyncLocker<string> userLock = new AsyncLocker<string>();
        public class LoginInputModel
        {
            public string Username { get; set; }
            public string Password { get; set; }
        }
        public class DispatchesMobileModel
        {
            public int Id { get; set; }
            public string DispatchesNumber { get; set; }
            public string DispatchCode { get; set; }
            public string FromDate { get; set; }
            public string Origanization { get; set; }
            public string Assigner { get; set; }
            public string AssignerImagePath { get; set; }
            public string Comment { get; set; }
            public string CreatedTime { get; set; }
            public string Role { get; set; }
            public string DeadLine { get; set; }
            public int Type { get; set; }
            public string Note { get; set; }
            public int ActionStatus { get; set; }
        }
        public class LoginOutModel
        {
            public string Id { get; set; }
            public string GiveName { get; set; }
            public string ImagePath { get; set; }
            public string Phone { get; set; }
            public string Email { get; set; }
        }
        public class SMSModel
        {
            public List<FundLoaddingSMSBank> FundLoaddingSMSBank { get; set; }
        }
        private readonly EIMDBContext _context;
        private readonly UserManager<AspNetUser> _userManager;
        private readonly IHostingEnvironment _hostingEnvironment;
        private readonly IUploadService _upload;
        private TimeSpan _timeWorkingMorning;
        private TimeSpan _timeWorkingAfternoon;
        private TimeSpan _timeWorkingEvening;
        private readonly AppSettings _appSettings;
        private readonly IGoogleAPIService _googleAPI;
        private readonly IFCMPushNotification _notification;
        private readonly ICardJobService _cardService;
        private TimeSpan _timeWorking;
        private readonly IRepositoryService _repositoryService;

        private IMemoryCache _cache;
        public string[] mediaType = new string[] { "video/3gpp", "video/mp4", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-ms-wmv", "video/x-msvideo" };
        string[] word = { ".DOC", ".DOCX" };
        string[] pdf = { ".PDF" };
        string[] excel = { ".XLSX", ".XLS" };


        public MobileLoginController(EIMDBContext context, UserManager<AspNetUser> userManager, IRepositoryService repositoryService, IHostingEnvironment hostingEnvironment, IUploadService upload, IOptions<AppSettings> appSettings, IGoogleAPIService googleAPI, IFCMPushNotification notification, ICardJobService cardService, IMemoryCache memoryCache)
        {
            _userManager = userManager;
            _context = context;
            _hostingEnvironment = hostingEnvironment;
            _upload = upload;
            _appSettings = appSettings.Value;
            _googleAPI = googleAPI;
            _notification = notification;
            _cardService = cardService;
            _timeWorkingMorning = new TimeSpan(8, 30, 0);
            _timeWorkingAfternoon = new TimeSpan(13, 30, 0);
            _timeWorkingEvening = new TimeSpan(21, 0, 0);
            _cache = memoryCache;
            _repositoryService = repositoryService;
        }

        public IActionResult Index()
        {
            return View();
        }

        #region Infomation user
        [HttpPost]
        public async Task<JsonResult> Login(string userName, string password)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var user = await _userManager.FindByNameAsync(userName);
                var checkPassWord = await _userManager.CheckPasswordAsync(user, password);
                if (user != null && checkPassWord == true)
                {
                    if (user.IsOnline == 0)
                    {
                        var output = new
                        {
                            Id = user.Id,
                            GiveName = user.GivenName,
                            ImagePath = user.Picture,
                            Phone = user.PhoneNumber,
                            Email = user.Email,
                            UserName = user.UserName
                        };
                        user.IsOnline = 1;
                        await _userManager.UpdateAsync(user);
                        msg.Object = output;
                        msg.Title = "Đăng nhập thành công !";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Tài khoản đã đăng nhập";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Tài khoản và mật khẩu không đúng !";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Tài khoản và mật khẩu không đúng !";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> LoginNoCheckOnline(string userName, string password, string token, string device)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var user = await _userManager.FindByNameAsync(userName);
                var checkPassWord = await _userManager.CheckPasswordAsync(user, password);
                if (user != null && checkPassWord == true)
                {
                    msg.Title = "Đăng nhập thành công !";
                    msg.Object = user;
                    InsertToken(user.Id, token, device);
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Tài khoản và mật khẩu không đúng !";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Tài khoản và mật khẩu không đúng !";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> LogOut(string userName)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var user = await _userManager.FindByNameAsync(userName);
                if (user != null)
                {
                    user.IsOnline = 0;
                    await _userManager.UpdateAsync(user);
                    msg.Title = "Đăng xuất thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tồn tại tài khoản này";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Tài khoản và mật khẩu không đúng !";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> ChangePassword(string id, string passwordOld, string passwordNew, string inputPasswordNew)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var us = await _context.Users.FirstOrDefaultAsync(x => x.Id == id);
            if (us != null)
            {
                var checkPassword = await _userManager.CheckPasswordAsync(us, passwordOld);
                if (checkPassword)
                {
                    string code = await _userManager.GeneratePasswordResetTokenAsync(us);
                    var result = await _userManager.ResetPasswordAsync(us, code, passwordNew);
                    if (result.Succeeded)
                    {
                        var a = await _context.SaveChangesAsync();
                        msg.Title = "Cập nhập mật khẩu thành công";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Có lỗi khi cập nhập mật khẩu";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Mật khẩu cũ nhập không đúng";
                }
            }
            else
            {
                msg.Error = true;
                msg.Title = "Tài khoản không tồn tại";
            }
            return Json(msg);
        }


        [HttpPost]
        public async Task<JsonResult> UpdateImage(string id, IFormFile image)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var us = await _context.Users.SingleOrDefaultAsync(x => x.Id == id);
                if (us != null)
                {
                    if (image != null && image.Length > 0)
                    {
                        var mimeType = image.ContentType;
                        string extension = Path.GetExtension(image.FileName);
                        string[] imageMimetypes = { "image/gif", "image/jpeg", "image/pjpeg", "image/x-png", "image/png", "image/svg+xml" };
                        string[] imageExt = { ".gif", ".jpeg", ".jpg", ".png", ".svg", ".blob" };
                        if (Array.IndexOf(imageMimetypes, mimeType) >= 0 && (Array.IndexOf(imageExt, extension) >= 0))
                        {
                            var url = string.Empty;
                            var pathUpload = Path.Combine(_hostingEnvironment.WebRootPath, "uploads\\images");
                            if (!Directory.Exists(pathUpload)) Directory.CreateDirectory(pathUpload);
                            var fileName = Path.GetFileName(image.FileName);
                            fileName = Path.GetFileNameWithoutExtension(fileName)
                             + "_"
                             + Guid.NewGuid().ToString().Substring(0, 8)
                             + Path.GetExtension(fileName);
                            var filePath = Path.Combine(pathUpload, fileName);
                            using (var stream = new FileStream(filePath, FileMode.Create))
                            {
                                await image.CopyToAsync(stream);
                            }
                            url = "/uploads/images/" + fileName;
                            us.Picture = url;
                            await _context.SaveChangesAsync();
                            msg.Title = "Cập nhập ảnh thành công.";
                            msg.Object = us.Picture;
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Định dạng ảnh không đúng." + extension + mimeType;
                        }
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Ảnh không tồn tại.";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Người dùng không tồn tại.";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi cập nhập thông tin.";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> UpdateProfile(string id, string giveName, string phone, string mail)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var errorRegex = false;
            try
            {
                var us = await _context.Users.SingleOrDefaultAsync(x => x.Id == id);
                if (us != null)
                {
                    var regexPhone = @"^(?:(?:\+|00)33[\s.-]{0,3}(?:\(0\)[\s.-]{0,3})?|0)[1-9](?:(?:[\s.-]?\d{2}){4}|\d{2}(?:[\s.-]?\d{3}){2})$";
                    var regexEmail = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$";
                    if (!string.IsNullOrEmpty(phone))
                    {
                        var matchPhone = Regex.Match(phone, regexPhone, RegexOptions.IgnoreCase);
                        if (!matchPhone.Success)
                        {
                            msg.Error = true;
                            msg.Title = "Số điện thoại nhập không đúng.";
                            errorRegex = true;
                        }
                    }
                    if (!string.IsNullOrEmpty(mail))
                    {
                        var matchEmail = Regex.Match(mail, regexEmail, RegexOptions.IgnoreCase);
                        if (!matchEmail.Success)
                        {
                            msg.Error = true;
                            msg.Title = "Email nhập không đúng.";
                            errorRegex = true;
                        }
                    }
                    if (!errorRegex)
                    {
                        us.GivenName = giveName;
                        us.Email = mail;
                        us.PhoneNumber = phone;
                        await _context.SaveChangesAsync();
                        msg.Title = "Cập nhập thông tin thành công.";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Người dùng không tồn tại.";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi cập nhập thông tin.";
            }
            return Json(msg);
        }

        [NonAction]
        public void InsertToken(string userId, string token, string device)
        {
            var fcm = _context.FcmTokens.FirstOrDefault(x => x.UserId == userId);
            if (fcm == null)
            {
                var cus = new FcmToken
                {
                    UserId = userId,
                    Token = token,
                    Device = device
                };
                _context.FcmTokens.Add(cus);
            }
            else
            {
                fcm.Token = token;
                _context.FcmTokens.Update(fcm);
            }
            _context.SaveChanges();
        }

        [HttpPost]
        public JsonResult GetCountCheckInAndOnline()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var toDay = DateTime.Now;
                var countCheckIn = _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == toDay.Date && !x.ChkoutTime.HasValue).DistinctBy(x => x.CreatedBy).Count();
                var countOnline = _context.Users.Where(x => x.IsOnline == 1 && x.Active).Count();
                var countUser = _context.Users.Where(x => x.Active).Count();
                msg.Object = new
                {
                    CountCheckIn = countCheckIn,
                    CountOnline = countOnline,
                    CountUser = countUser
                };
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi lấy dữ liêuk!";
                msg.Error = true;
                msg.Object = ex.Message;
            }
            return Json(msg);

        }
        #endregion

        #region Calendar interview
        [HttpPost]
        public JsonResult GetCalendarInterView(string date)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var dateTime = !string.IsNullOrEmpty(date) ? DateTime.ParseExact(date, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var data = from a in _context.CandidateInterviews
                       join b in _context.CandiateBasic on a.CandidateCode equals b.CandidateCode
                       where (a.InterviewDate.Date == dateTime)
                       select new
                       {
                           a.Id,
                           a.InterviewDate,
                           b.WorkType,
                           b.LanguageUse,
                           b.Fullname,
                       };
            msg.Object = data;
            return Json(msg);
        }
        public class Schedule
        {
            public string User { get; set; }
            public string TimeStart { get; set; }
            public string TimeEnd { get; set; }
            public string Content { get; set; }
            public string Room { get; set; }
            public string Composition { get; set; }
            public bool Haschild { get; set; }
            public int? Child { get; set; }

        }
        [HttpPost]
        public JsonResult GetAllEvent(string memberId, string monthYear, bool morning, bool afternoon, bool evening, bool saturday, bool sunday)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (memberId == null)
                {
                    var query = from a in _context.StaffScheduleWorks
                                join b in _context.Users.Where(x => x.Active) on a.MemberId equals b.Id
                                where a.DatetimeEvent.ToString("MM/yyyy").Equals(monthYear) &&
                                (morning == false || (a.FrameTime.Split(";", StringSplitOptions.None)[0] == "True")) &&
                                (afternoon == false || (a.FrameTime.Split(";", StringSplitOptions.None)[1] == "True")) &&
                                (evening == false || (a.FrameTime.Split(";", StringSplitOptions.None)[2] == "True")) &&
                                ((saturday == false && sunday == false)
                                || (saturday == true && sunday == true && (a.DatetimeEvent.DayOfWeek == DayOfWeek.Saturday || a.DatetimeEvent.DayOfWeek == DayOfWeek.Sunday))
                                || (saturday == true && sunday == false && a.DatetimeEvent.DayOfWeek == DayOfWeek.Saturday)
                                || (saturday == false && sunday == true && a.DatetimeEvent.DayOfWeek == DayOfWeek.Sunday))
                                select new
                                {
                                    a.MemberId,
                                    a.DatetimeEvent,
                                    a.FrameTime,
                                    b.GivenName,
                                    a.DatetimeEvent.DayOfWeek,
                                };
                    var total = query.GroupBy(x => x.DatetimeEvent).Select(y => new
                    {
                        y.First().DatetimeEvent,
                        Morning = y.Where(z => z.FrameTime.Split(";", StringSplitOptions.None)[0] == "True").Count(),
                        Afternoon = y.Where(z => z.FrameTime.Split(";", StringSplitOptions.None)[1] == "True").Count(),
                        Evening = y.Where(z => z.FrameTime.Split(";", StringSplitOptions.None)[2] == "True").Count(),
                    });
                    msg.Object = new
                    {
                        All = true,
                        ListTotalSchedule = total,
                        ListMemberSchedule = query,
                    };
                }
                else
                {
                    var data = (from a in _context.StaffScheduleWorks
                                where a.MemberId == memberId
                                && a.DatetimeEvent.ToString("MM/yyyy").Equals(monthYear) &&
                                (morning == false || (a.FrameTime.Split(";", StringSplitOptions.None)[0] == "True")) &&
                                (afternoon == false || (a.FrameTime.Split(";", StringSplitOptions.None)[1] == "True")) &&
                                (evening == false || (a.FrameTime.Split(";", StringSplitOptions.None)[2] == "True")) &&
                                ((saturday == false && sunday == false)
                                || (saturday == true && sunday == true && (a.DatetimeEvent.DayOfWeek == DayOfWeek.Saturday || a.DatetimeEvent.DayOfWeek == DayOfWeek.Sunday))
                                || (saturday == true && sunday == false && a.DatetimeEvent.DayOfWeek == DayOfWeek.Saturday)
                                || (saturday == false && sunday == true && a.DatetimeEvent.DayOfWeek == DayOfWeek.Sunday))
                                select new
                                {
                                    a.MemberId,
                                    a.DatetimeEvent,
                                    a.FrameTime
                                }).AsNoTracking();
                    msg.Object = new
                    {
                        All = false,
                        ListScheduleForMember = data,
                    };
                }
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi lấy dữ liêuk!";
                msg.Error = true;
                msg.Object = ex.Message;
            }
            return Json(msg);

        }
        [HttpPost]
        public JsonResult GetAllTotal(string memberId, int month, int year, string from, string to)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var user = _context.Users.FirstOrDefault(x => x.Active && x.Id == memberId);
            try
            {
                var listTotal = new List<StatisticalTotal>();
                var fromDate = !string.IsNullOrEmpty(from) ? DateTime.ParseExact(from, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(to) ? DateTime.ParseExact(to, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var listDateInMonth = DateTimeExtensions.GetDates(year, month).Where(x => x.Date <= DateTime.Today);
                //Select all
                if (string.IsNullOrEmpty(memberId))
                {
                    if (fromDate == null && toDate == null)
                    {
                        foreach (var item in listDateInMonth)
                        {
                            var totalRegistration = _context.StaffScheduleWorks.Where(x => x.DatetimeEvent.Month == month && x.DatetimeEvent.Year == year && x.DatetimeEvent.Date == item.Date).DistinctBy(x => x.MemberId).Count();
                            var totalLate = GetCountUserLate(item, "");
                            var totalReal = _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == item.Date).DistinctBy(x => x.CreatedBy).Count();
                            var statistical = new StatisticalTotal
                            {
                                Date = item,
                                CountRegistration = totalRegistration,
                                CountLate = totalLate,
                                CountReal = totalReal
                            };
                            listTotal.Add(statistical);
                        }
                        msg.Object = new
                        {
                            All = true,
                            ListTotal = listTotal,
                        };
                    }
                    else
                    {
                        for (DateTime date = fromDate.Value; date <= toDate; date = date.AddDays(1))
                        {
                            var totalRegistration = _context.StaffScheduleWorks.Where(x => x.DatetimeEvent.Month == month && x.DatetimeEvent.Year == year && x.DatetimeEvent.Date == date.Date).DistinctBy(x => x.MemberId).Count();
                            var totalLate = GetCountUserLate(date, "");
                            var totalReal = _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == date.Date).DistinctBy(x => x.CreatedBy).Count();
                            var statistical = new StatisticalTotal
                            {
                                Date = date,
                                CountRegistration = totalRegistration,
                                CountLate = totalLate,
                                CountReal = totalReal
                            };
                            listTotal.Add(statistical);
                        }
                        msg.Object = new
                        {
                            All = true,
                            ListTotal = listTotal,
                        };
                    }
                }
                //select memeberId
                else
                {
                    if (fromDate == null && toDate == null)
                    {
                        foreach (var item in listDateInMonth)
                        {
                            var totalLate = GetCountUserLate(item, memberId);
                            var totalReal = _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == item.Date && x.CreatedBy == user.UserName).DistinctBy(x => x.CreatedBy).Count();
                            var statistical = new StatisticalTotal
                            {
                                Date = item,
                                CountRegistration = 0,
                                CountLate = totalLate,
                                CountReal = totalReal
                            };
                            listTotal.Add(statistical);
                        }
                        msg.Object = new
                        {
                            All = false,
                            ListTotal = listTotal,
                        };
                    }
                    else
                    {
                        for (DateTime date = fromDate.Value; date <= toDate; date = date.AddDays(1))
                        {
                            var totalLate = GetCountUserLate(date, memberId);
                            var totalReal = _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == date.Date && x.CreatedBy == user.UserName).DistinctBy(x => x.CreatedBy).Count();
                            var statistical = new StatisticalTotal
                            {
                                Date = date,
                                CountRegistration = 0,
                                CountLate = totalLate,
                                CountReal = totalReal
                            };
                            listTotal.Add(statistical);
                        }
                        msg.Object = new
                        {
                            All = false,
                            ListTotal = listTotal,
                        };
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex;
                //msg.Title = String.Format(CommonUtil.ResourceValue("COM_MSG_DATA_FAIL"));
                msg.Error = true;
            }
            return Json(msg);
        }
        [NonAction]
        public int GetCountUserLate(DateTime date, string memberId)
        {
            var query = (from a in _context.WorkShiftCheckInOuts
                         join b in _context.Users on a.UserId equals b.Id
                         where (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate)
                         || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork)
                         || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork))
                         && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTo >= date.Date))
                                                    || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date >= date.Date))
                                                    ))
                           && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (date.Date >= a.ActionTime.Date))
                                                    || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date <= date.Date))))
                                                    && (string.IsNullOrEmpty(memberId) || a.UserId == memberId)
                         select new
                         {
                             a.Id,
                             a.UserId,
                             FullName = b.GivenName,
                             b.Picture,
                             a.Action,
                             a.ActionTime,
                             a.ActionTo,
                             a.Note,
                             a.LocationText
                         });
            return query.Count();
        }
        [HttpPost]
        public JsonResult GetEventForDate(string date)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var dateSearch = string.IsNullOrEmpty(date) ? (DateTime?)null : DateTime.ParseExact(date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var query = from a in _context.Users.Where(x => x.Active)
                            join b in _context.StaffScheduleWorks on a.Id equals b.MemberId
                            join c in _context.AdGroupUsers on a.AdUserInGroups.FirstOrDefault().GroupUserCode equals c.GroupUserCode into c1
                            from c in c1.DefaultIfEmpty()
                            where b.DatetimeEvent == dateSearch
                            select new
                            {
                                b.Id,
                                a.GivenName,
                                Role = (from x in _context.UserRoles
                                        join y in _context.Roles on x.RoleId equals y.Id
                                        where x.UserId == a.Id
                                        select new
                                        {
                                            y.Title
                                        }).FirstOrDefault(),
                                Phone = a.PhoneNumber,
                                a.Email,
                                Department = c != null ? c.Title : "",
                                TypeWork = a.TypeWork == EnumHelper<TypeWork>.GetDisplayValue(TypeWork.P) ? TypeWork.P.DescriptionAttr() :
                                a.TypeWork == EnumHelper<TypeWork>.GetDisplayValue(TypeWork.F) ? TypeWork.F.DescriptionAttr() : "",
                                Morning = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[0],
                                Afternoon = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[1],
                                Evening = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[2]
                            };
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu! ";
                //msg.Title = String.Format(CommonUtil.ResourceValue("STRE_MSG_ERROR_FIND_DATA"));
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListTimekeepingCalender(int year, int month)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listTotal = new List<StatisticalTotal>();
                var listDateInMonth = DateTimeExtensions.GetDates(year, month).Where(x => x.Date <= DateTime.Today);
                //Select all

                foreach (var item in listDateInMonth)
                {
                    var totalLate = GetCountUserLate(item, "");
                    var statistical = new StatisticalTotal
                    {
                        Date = item,
                        CountLate = totalLate,
                    };
                    listTotal.Add(statistical);
                }
                msg.Object = new
                {
                    All = true,
                    ListTotal = listTotal,
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        public class RoleModel
        {
            public string Title { get; set; }
        }
        public class ViewTotal
        {
            public string FullName { get; set; }
            public string Department { get; set; }
            public string Status { get; set; }
            public string ActionTime { get; set; }
            public string LocationText { get; set; }
            public string ChkInTime { get; set; }
            public string ChkinLocationTxt { get; set; }
            public string ChkOutTime { get; set; }
            public string ChkoutLocationTxt { get; set; }
            public string Morning { get; set; }
            public string Afternoon { get; set; }
            public string Evening { get; set; }
            public string UserId { get; set; }
            public string Phone { get; set; }
            public string Email { get; set; }
            public RoleModel Role { get; set; }
        }

        [HttpPost]
        public JsonResult GetAllInCalendar(string dateSearch, string memberId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            //List check in/ check out
            try
            {
                var userName = "";
                var date = DateTime.ParseExact(dateSearch, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                if (!string.IsNullOrEmpty(memberId))
                {
                    var user = _context.Users.FirstOrDefault(x => x.Id == memberId);
                    userName = user.UserName;
                }
                var query = (from a in _context.ShiftLogs.Where(x => x.ChkinTime.Value.Date == date.Date &&
                            (string.IsNullOrEmpty(userName) || (x.CreatedBy == userName)))
                             select new
                             {
                                 a.Id,
                                 ChkInTime = a.ChkinTime.Value.ToString("dd/MM/yyyy HH:mm:ss"),
                                 a.ChkinLocationTxt,
                                 ChkOutTime = a.ChkoutTime.HasValue ? a.ChkoutTime.Value.ToString("dd/MM/yyyy HH:mm:ss") : "",
                                 ChkoutLocationTxt = !string.IsNullOrEmpty(a.ChkoutLocationTxt) ? a.ChkoutLocationTxt : "",
                                 a.ShiftCode,
                                 a.CreatedBy,
                                 UserId = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).Id,
                                 GivenName = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).GivenName,
                                 Phone = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).PhoneNumber,
                                 Email = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).Email
                             }).GroupBy(x => x.CreatedBy);
                var shifts = new List<ViewTotal>();
                foreach (var item in query)
                {
                    var list = item.ToList();
                    if (item.Count() > 0)
                    {
                        var total = new ViewTotal
                        {
                            ChkInTime = list[list.Count - 1].ChkInTime,
                            ChkinLocationTxt = list[list.Count - 1].ChkinLocationTxt,
                            ChkOutTime = list[list.Count - 1].ChkOutTime,
                            ChkoutLocationTxt = list[list.Count - 1].ChkoutLocationTxt,
                            UserId = list[list.Count - 1].UserId,
                            ActionTime = "",
                            Morning = "",
                            Afternoon = "",
                            Department = "",
                            Evening = "",
                            FullName = list[list.Count - 1].GivenName,
                            LocationText = "",
                            Status = "",
                            Phone = list[list.Count - 1].Phone,
                            Email = list[list.Count - 1].Email
                        };
                        shifts.Add(total);
                    }
                }
                //List user go late, no work
                var userLate = (from a in _context.WorkShiftCheckInOuts
                                join b in _context.Users on a.UserId equals b.Id
                                where (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate)
                                || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork)
                                || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork))
                                && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTo >= date.Date))
                                                           || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date >= date.Date))
                                                           ))
                                  && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (date.Date >= a.ActionTime.Date))
                                                           || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date <= date.Date))))
                                                           && (string.IsNullOrEmpty(memberId) || a.UserId.Equals(memberId))
                                select new
                                {
                                    a.Id,
                                    a.UserId,
                                    b.GivenName,
                                    b.Picture,
                                    a.Action,
                                    a.ActionTime,
                                    a.ActionTo,
                                    a.Note,
                                    a.LocationText,
                                    Role = (from x in _context.UserRoles
                                            join y in _context.Roles on x.RoleId equals y.Id
                                            where x.UserId == b.Id
                                            select new RoleModel
                                            {
                                                Title = y.Title
                                            }).FirstOrDefault(),
                                });
                var dataUserLate = userLate.Select(x => new ViewTotal
                {
                    FullName = x.GivenName,
                    Status = (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? StaffStauts.GoLate.DescriptionAttr() :
                             x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? StaffStauts.NoWork.DescriptionAttr() :
                             x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? StaffStauts.QuitWork.DescriptionAttr() : ""),
                    ActionTime = (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? x.ActionTime.ToString("dd/MM/yyyy HH:mm") :/* x.ActionTime.ToString("dd/MM/yyyy hh:mm:ss") :*/
                                  x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? string.Concat(x.ActionTime.ToString("dd/MM/yyyy"), "-", x.ActionTo.Value.ToString("dd/MM/yyyy")) :
                                  x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? x.ActionTime.ToString("dd/MM/yyyy") : ""),
                    LocationText = x.LocationText,
                    UserId = x.UserId,
                    Department = "",
                    ChkOutTime = "",
                    ChkoutLocationTxt = "",
                    ChkInTime = "",
                    ChkinLocationTxt = "",
                    Evening = "",
                    Morning = "",
                    Afternoon = "",
                    Phone = _context.Users.FirstOrDefault(k => k.Id == x.UserId).PhoneNumber,
                    Email = _context.Users.FirstOrDefault(k => k.Id == x.UserId).Email,
                    Role = x.Role
                });

                // List user registration
                var dateRegistration = string.IsNullOrEmpty(dateSearch) ? (DateTime?)null : DateTime.ParseExact(dateSearch, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var listRegistration = from a in _context.Users.Where(x => x.Active)
                                       join b in _context.StaffScheduleWorks on a.Id equals b.MemberId
                                       join c in _context.AdGroupUsers on a.AdUserInGroups.FirstOrDefault().GroupUserCode equals c.GroupUserCode into c1
                                       from c in c1.DefaultIfEmpty()
                                       where b.DatetimeEvent == dateRegistration
                                       && (string.IsNullOrEmpty(memberId) || b.MemberId.Equals(memberId))
                                       select new ViewTotal
                                       {
                                           FullName = a.GivenName,
                                           Department = c != null ? c.Title : "",
                                           Morning = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[0],
                                           Afternoon = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[1],
                                           Evening = b.FrameTime.Split(';', StringSplitOptions.RemoveEmptyEntries)[2],
                                           UserId = b.MemberId,
                                           ChkinLocationTxt = "",
                                           ChkInTime = "",
                                           ChkoutLocationTxt = "",
                                           ChkOutTime = "",
                                           Status = "",
                                           ActionTime = "",
                                           LocationText = "",
                                           Phone = _context.Users.FirstOrDefault(k => k.Id == b.MemberId).PhoneNumber,
                                           Email = _context.Users.FirstOrDefault(k => k.Id == b.MemberId).Email,
                                           Role = (from x in _context.UserRoles
                                                   join y in _context.Roles on x.RoleId equals y.Id
                                                   where x.UserId == a.Id
                                                   select new RoleModel
                                                   {
                                                       Title = y.Title
                                                   }).FirstOrDefault(),
                                       };

                //Add data to list
                if (listRegistration.Any())
                {
                    var data = from a in listRegistration
                               join b in shifts on a.UserId equals b.UserId into b1
                               from b2 in b1.DefaultIfEmpty()
                               join c in dataUserLate on a.UserId equals c.UserId into c1
                               from c2 in c1.DefaultIfEmpty()
                               select new ViewTotal
                               {
                                   FullName = a != null ? a.FullName : b2 != null ? b2.FullName : c2.FullName,
                                   ActionTime = c2.ActionTime,
                                   Afternoon = a.Afternoon,
                                   Morning = a.Morning,
                                   Evening = a.Evening,
                                   LocationText = c2.LocationText,
                                   ChkinLocationTxt = b2.ChkinLocationTxt,
                                   ChkInTime = b2.ChkInTime,
                                   ChkoutLocationTxt = b2.ChkoutLocationTxt,
                                   ChkOutTime = b2.ChkOutTime,
                                   Department = a.Department,
                                   Status = c2.Status,
                                   Phone = a.Phone,
                                   Email = a.Email,
                                   Role = a.Role,
                               };
                    msg.Object = data;
                }
                else
                {
                    if (shifts.Any())
                    {
                        var data = from b in shifts
                                   join c in dataUserLate on b.UserId equals c.UserId into c1
                                   from c2 in c1.DefaultIfEmpty()
                                   select new ViewTotal
                                   {
                                       FullName = b != null ? b.FullName : c2.FullName,
                                       ActionTime = c2 != null ? c2.ActionTime : "",
                                       Afternoon = "",
                                       Morning = "",
                                       Evening = "",
                                       LocationText = c2 != null ? c2.LocationText : "",
                                       ChkinLocationTxt = b.ChkinLocationTxt,
                                       ChkInTime = b.ChkInTime,
                                       ChkoutLocationTxt = b.ChkoutLocationTxt,
                                       ChkOutTime = b.ChkOutTime,
                                       Department = "",
                                       Status = c2 != null ? c2.Status : "",
                                       Phone = b.Phone,
                                       Email = b.Email,
                                       Role = c2.Role,
                                   };
                        msg.Object = data;
                    }
                    else
                    {
                        var data = from c in dataUserLate
                                   select new ViewTotal
                                   {
                                       FullName = c.FullName,
                                       ActionTime = c.ActionTime,
                                       Afternoon = "",
                                       Morning = "",
                                       Evening = "",
                                       LocationText = c.LocationText,
                                       ChkinLocationTxt = "",
                                       ChkInTime = "",
                                       ChkoutLocationTxt = "",
                                       ChkOutTime = "",
                                       Department = "",
                                       Status = c.Status,
                                       Phone = c.Phone,
                                       Email = c.Email,
                                       Role = c.Role,
                                   };
                        msg.Object = data;
                    }
                }

            }
            catch (Exception ex)
            {
                msg.Object = ex;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetTimeKeepDetail(string date, string memberId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            //List check in/ check out
            try
            {
                var datdateSearche = DateTime.ParseExact(date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var userLate = (from a in _context.WorkShiftCheckInOuts
                                join b in _context.Users on a.UserId equals b.Id
                                where (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate)
                                || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork)
                                || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork))
                                && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTo >= datdateSearche.Date))
                                                           || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date >= datdateSearche.Date))
                                                           ))
                                  && ((date == null) || ((a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (datdateSearche.Date >= a.ActionTime.Date))
                                                           || (a.Action != EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (a.ActionTime.Date <= datdateSearche.Date))))

                                select new
                                {
                                    a.Id,
                                    a.UserId,
                                    b.GivenName,
                                    b.Picture,
                                    a.Action,
                                    a.ActionTime,
                                    a.ActionTo,
                                    a.Note,
                                    a.LocationText
                                });
                msg.Object = userLate.Select(x => new
                {
                    FullName = x.GivenName,
                    Status = (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? StaffStauts.GoLate.DescriptionAttr() :
                              x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? StaffStauts.NoWork.DescriptionAttr() :
                              x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? StaffStauts.QuitWork.DescriptionAttr() : ""),
                    ActionTime = (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? x.ActionTime.ToString("dd/MM/yyyy HH:mm") :/* x.ActionTime.ToString("dd/MM/yyyy hh:mm:ss") :*/
                                   x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? string.Concat(x.ActionTime.ToString("dd/MM/yyyy"), "-", x.ActionTo.Value.ToString("dd/MM/yyyy")) :
                                   x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? x.ActionTime.ToString("dd/MM/yyyy") : ""),
                    LocationText = x.LocationText,
                    x.Action,
                    UserId = x.UserId,
                    Phone = _context.Users.FirstOrDefault(k => k.Id == x.UserId).PhoneNumber
                });
            }
            catch (Exception ex)
            {
                msg.Object = ex;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Error = true;
            }
            return Json(msg);
        }
        #endregion

        #region Staff timeKeeping
        public class JMesssageStaff : JMessage
        {
            public bool AllowCheckIn { get; set; }
            public string shipCode { get; set; }
        }
        [HttpGet]
        public JsonResult CheckIsCheckIn(string id)
        {
            var msg = new JMesssageStaff { Error = false, Title = "" };
            try
            {
                var check = CheckCheckIn(id);
                msg.Title = check.message;
                msg.AllowCheckIn = check.allowCheckIn;
                msg.shipCode = check.shipCode;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Error";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListTimekeeping()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = (from a in _context.WorkShiftCheckInOuts
                            join b in _context.Users on a.UserId equals b.Id
                            where a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork)
                            select new
                            {
                                a.Id,
                                DisplayName = b.GivenName,
                                ActionCode = a.Action,
                                ActionName = (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? StaffStauts.GoLate.DescriptionAttr() :
                                              a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? StaffStauts.NoWork.DescriptionAttr() :
                                              a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? StaffStauts.QuitWork.DescriptionAttr() : ""),
                                a.ActionTime,
                                a.ActionTo,
                                a.Note,
                                b.PhoneNumber,
                                b.Email,
                                b.UserName
                            }).OrderByDescending(x => x.Id).ToList();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy danh sách chấm công";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCheckInCheckOut()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = from a in _context.WorkShiftCheckInOuts
                           join b in _context.Users on a.UserId equals b.Id
                           where a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckIn) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckOut)
                           && a.CreatedTime.Date == DateTime.Today
                           orderby a.Id descending
                           select new
                           {
                               a.Id,
                               DisplayName = b.GivenName,
                               ActionName = a.Action,
                               a.ActionTime,
                               a.ActionTo,
                               a.Note,
                           };
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy danh sách chấm công";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListCheckInCheckOutOfUser()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = (from a in _context.WorkShiftCheckInOuts
                            join b in _context.Users on a.UserId equals b.Id
                            where a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckIn) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckOut)
                            && a.CreatedTime.Date == DateTime.Today && a.IsDeleted == false
                            orderby a.Id descending
                            select new
                            {
                                a.Id,
                                DisplayName = b.GivenName,
                                ActionName = a.Action,
                                a.ActionTime,
                                a.ActionTo,
                                a.Note,
                                a.LocationGPS,
                                a.LocationText,
                                a.ShiftCode,
                                a.UserId,
                                a.Session
                            });
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy danh sách chấm công";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetCountProjectBoardMarket(string userName)
        {
            var projectCount = GetCountProject();
            var boardCount = GetCountBoardRepeat();
            var projectBuilding = GetCountProjectByBuilding();
            var countNodeOfWorkPlan = GetCountNodeOfWorkPlan(userName);
            return new
            {
                projectCount,
                boardCount,
                projectBuilding,
                countNodeOfWorkPlan
            };
        }

        [HttpPost]
        public async Task<JsonResult> AddStaffLate([FromBody]SStaffTimeKeepingModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (ModelState.IsValid)
                {
                    var date = DateTime.Now;
                    if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork))
                    {
                        var actionTime = DateTime.ParseExact(obj.ActionTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        var actionTo = DateTime.ParseExact(obj.ActionTo, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        var checkExist = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.UserId == obj.UserId && x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && (x.ActionTo >= actionTime && x.ActionTime <= actionTo));
                        if (checkExist == null)
                        {
                            var model = new WorkShiftCheckInOut
                            {
                                UserId = obj.UserId,
                                Action = obj.Action,
                                ActionTime = actionTime,
                                ActionTo = actionTo,
                                Note = obj.Note,
                                Device = "Phone",
                                LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon),
                                LocationText = obj.LocationText,
                            };
                            _context.WorkShiftCheckInOuts.Add(model);
                            //msg.Title = String.Format(CommonUtil.ResourceValue("STL_MSG_ADD_SUCCES"));
                            msg.Title = "Thêm thành công";
                            _context.SaveChanges();
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Bạn đã xin nghỉ vào khoảng thời gian này!";
                        }
                    }
                    else if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate))
                    {
                        var actionTime = DateTime.ParseExact(obj.ActionTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture);
                        var checkExist = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.UserId == obj.UserId && x.ActionTime == actionTime && x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate));
                        if (checkExist == null)
                        {
                            var model = new WorkShiftCheckInOut
                            {
                                UserId = obj.UserId,
                                Action = obj.Action,
                                Device = "Phone",
                                ActionTime = actionTime,
                                Note = obj.Note,
                                LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon),
                                LocationText = obj.LocationText,
                            };
                            _context.WorkShiftCheckInOuts.Add(model);
                            //msg.Title = String.Format(CommonUtil.ResourceValue("STL_MSG_ADD_SUCCES"));
                            msg.Title = "Thêm thành công";
                            _context.SaveChanges();
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Bạn đã báo muộn vào thời gian này!";
                        }
                    }
                    else if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork))
                    {
                        var actionTime = DateTime.ParseExact(obj.ActionTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        var checkExist = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.UserId == obj.UserId && x.ActionTime.Date == actionTime.Date && x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork));
                        if (checkExist == null)
                        {
                            var model = new WorkShiftCheckInOut
                            {
                                UserId = obj.UserId,
                                Action = obj.Action,
                                ActionTime = actionTime,
                                Note = obj.Note,
                                Device = "Phone",
                                LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon),
                                LocationText = obj.LocationText,
                            };
                            _context.WorkShiftCheckInOuts.Add(model);
                            //msg.Title = String.Format(CommonUtil.ResourceValue("STL_MSG_ADD_SUCCES"));
                            msg.Title = "Thêm thành công";
                            _context.SaveChanges();
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Bạn đã xin nghỉ vào ngày này!";
                        }
                    }
                    _context.SaveChanges();
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng nhập đầy đủ thông tin!";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi báo muộn/xin nghỉ!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetItem(int id)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            var data = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == id);
            if (data != null)
            {
                var model = new SStaffTimeKeepingModel
                {
                    Id = id,
                    Action = data.Action,
                    ActionTime = data.ActionTime.ToString("dd/MM/yyyy"),
                    ActionTo = data.ActionTo.HasValue ? data.ActionTo.Value.ToString("dd/MM/yyyy") : null,
                    Note = data.Note,
                };
                msg.Object = model;
            }
            else
            {
                msg.Error = true;
                msg.Title = "Không tồn tại dữ liệu";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> UpdateStaffLate([FromBody]SStaffTimeKeepingModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (ModelState.IsValid)
                {
                    if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork))
                    {
                        var data = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == obj.Id);
                        if (data != null)
                        {
                            data.UserId = obj.UserId;
                            data.Action = obj.Action;
                            data.ActionTime = !string.IsNullOrEmpty(obj.ActionTime) ? DateTime.ParseExact(obj.ActionTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now;
                            data.ActionTo = !string.IsNullOrEmpty(obj.ActionTo) ? DateTime.ParseExact(obj.ActionTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                            data.Note = obj.Note;
                            data.LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon);
                            data.LocationText = await _googleAPI.GetAddressForCoordinates(obj.Lat, obj.Lon);
                            _context.WorkShiftCheckInOuts.Update(data);
                            _context.SaveChanges();
                            msg.Title = "Xin nghỉ thành công!";
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Dữ liệu không tồn tại!";
                        }
                    }
                    else if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate))
                    {
                        var data = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == obj.Id);
                        if (data != null)
                        {
                            data.UserId = obj.UserId;
                            data.Action = obj.Action;
                            data.ActionTime = !string.IsNullOrEmpty(obj.ActionTime) ? DateTime.ParseExact(obj.ActionTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now;
                            data.Note = obj.Note;
                            data.LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon);
                            data.LocationText = await _googleAPI.GetAddressForCoordinates(obj.Lat, obj.Lon);
                            _context.WorkShiftCheckInOuts.Update(data);
                            _context.SaveChanges();
                            msg.Title = "Báo muộn thành công!";
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Dữ liệu không tồn tại!";
                        }
                    }
                    else if (obj.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork))
                    {
                        var data = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == obj.Id);
                        if (data != null)
                        {
                            data.UserId = obj.UserId;
                            data.Action = obj.Action;
                            data.ActionTime = !string.IsNullOrEmpty(obj.ActionTime) ? DateTime.ParseExact(obj.ActionTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now;
                            data.Note = obj.Note;
                            data.LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon);
                            data.LocationText = await _googleAPI.GetAddressForCoordinates(obj.Lat, obj.Lon);
                            _context.WorkShiftCheckInOuts.Update(data);
                            _context.SaveChanges();
                            msg.Title = "Xin nghỉ thành công!";
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Dữ liệu không tồn tại!";
                        }
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng nhập đầy đủ thông tin!";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Chấm công lỗi!";
            }
            return Json(msg);
        }

        [HttpPost]
        public async Task<JsonResult> CheckIn(UserModelCheckIn obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (ModelState.IsValid)
                {
                    var check = CheckCheckIn(obj.UserId);
                    if (check.allowCheckIn)
                    {
                        var ShiftCode = GenerateShiftCode(obj.UserId);

                        var model = new WorkShiftCheckInOut
                        {
                            UserId = obj.UserId,
                            Action = EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckIn),
                            ActionTime = DateTime.Now,
                            Note = obj.Note,
                            LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon),
                            LocationText = await _googleAPI.GetAddressForCoordinates(obj.Lat, obj.Lon),
                            CreatedBy = obj.UserId,
                            Device = "Phone",
                            CreatedTime = DateTime.Now,
                            Session = check.session + 1,
                            ShiftCode = ShiftCode
                        };
                        _context.WorkShiftCheckInOuts.Add(model);
                        _context.SaveChanges();
                        msg.Object = ShiftCode;
                        msg.Title = "Check in thành công!";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = check.message;
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng nhập đầy đủ thông tin!";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Check in lỗi!";
            }
            return Json(msg);
        }

        [NonAction]
        public string GenerateShiftCode(string uId)
        {
            var monthNow = DateTime.Now.Month;
            var yearNow = DateTime.Now.Year;
            var reqCode = string.Empty;
            var no = 1;
            var noText = "01";
            var data1 = _context.WorkShiftCheckInOuts.Where(x => x.CreatedTime.Year == yearNow && x.CreatedTime.Month == monthNow).ToList();
            var data = _context.Users.FirstOrDefault(x => x.Id.Equals(uId));
            if (data1.Count > 0)
            {
                no = data1.Count + 1;
                if (no < 10)
                {
                    noText = "0" + no;
                }
                else
                {
                    noText = no.ToString();
                }
            }

            reqCode = string.Format("{0}{1}{2}", "SHIFT_", data.UserName + "_", noText);

            return reqCode;
        }
        [HttpPost]
        public async Task<JsonResult> CheckOut(UserModelCheckIn obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (ModelState.IsValid)
                {
                    var check = CheckCheckOut(obj.UserId);
                    if (check.allowCheckOut)
                    {
                        var model = new WorkShiftCheckInOut
                        {
                            UserId = obj.UserId,
                            Action = EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckOut),
                            ActionTime = DateTime.Now,
                            Note = obj.Note,
                            LocationGPS = string.Format("[{0},{1}]", obj.Lat, obj.Lon),
                            LocationText = await _googleAPI.GetAddressForCoordinates(obj.Lat, obj.Lon),
                            CreatedBy = obj.UserId,
                            Device = "Phone",
                            CreatedTime = DateTime.Now,
                            ShiftCode = obj.ShiftCode,
                            Session = check.session
                        };
                        _context.WorkShiftCheckInOuts.Add(model);
                        _context.SaveChanges();
                        msg.Title = "Check out thành công!";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = check.message;
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng nhập đầy đủ thông tin!";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Check out lỗi!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteStaffTimeKeeping(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == id);
                if (data != null)
                {
                    _context.WorkShiftCheckInOuts.Remove(data);
                }
                _context.SaveChanges();
                msg.Title = "Xóa chấm công thành công!";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa báo muộn/xin nghỉ!";
            }
            return Json(msg);
        }

        [NonAction]
        public (bool allowCheckIn, int session, string message, string shipCode) CheckCheckIn(string id)
        {
            bool allowCheckIn = false;
            string message = "";
            var today = DateTime.Today;
            int maxSession = 0;
            var shipCode = "";
            var getListCheckInCheckOut = _context.WorkShiftCheckInOuts.Where(x => x.ActionTime.Date == today && x.UserId == id).AsNoTracking();
            if (getListCheckInCheckOut.Any())
            {
                maxSession = getListCheckInCheckOut.Max(x => x.Session);
                var checkSession = getListCheckInCheckOut.Where(x => x.UserId == id && x.Session == maxSession && x.ActionTime.Date == today);
                if (checkSession.Any())
                {
                    var checkCheckIn = checkSession.FirstOrDefault(x => x.Action == "CHECKIN");
                    if (checkCheckIn != null)
                    {
                        var checkCheckOut = checkSession.FirstOrDefault(x => x.Action == "CHECKOUT");
                        if (checkCheckOut != null)
                        {
                            allowCheckIn = true;
                        }
                        else
                        {
                            allowCheckIn = false;
                            shipCode = checkCheckIn.ShiftCode;
                            message = "Bạn đã checkIn!";
                        }
                    }
                    else
                    {
                        allowCheckIn = true;
                    }
                }
                else
                {
                    allowCheckIn = true;
                }
            }
            else
            {
                allowCheckIn = true;
            }
            return (allowCheckIn, maxSession, message, shipCode);
        }

        [NonAction]
        public (bool allowCheckOut, int session, string message) CheckCheckOut(string id)
        {
            bool allowCheckOut = false;
            string message = "";
            var today = DateTime.Today;
            int maxSession = 0;
            var getListCheckInCheckOut = _context.WorkShiftCheckInOuts.Where(x => x.ActionTime.Date == today && x.UserId == id).AsNoTracking();
            if (getListCheckInCheckOut.Any())
            {
                maxSession = getListCheckInCheckOut.Max(x => x.Session);
                var checkSession = getListCheckInCheckOut.Where(x => x.UserId == id && x.Session == maxSession && x.ActionTime.Date == today);
                if (checkSession.Any())
                {
                    var checkCheckIn = checkSession.FirstOrDefault(x => x.Action == "CHECKIN");
                    if (checkCheckIn != null)
                    {
                        var checkCheckOut = checkSession.FirstOrDefault(x => x.Action == "CHECKOUT");
                        if (checkCheckOut != null)
                        {
                            allowCheckOut = false;
                            message = "Bạn đã checkOut!";
                        }
                        else
                        {
                            allowCheckOut = true;
                        }
                    }
                    else
                    {
                        allowCheckOut = false;
                        message = "Bạn không thể checkout khi chưa checkIn!";
                    }
                }
                else
                {
                    allowCheckOut = false;
                    message = "Bạn không thể checkout khi chưa checkIn!";
                }
            }
            else
            {
                allowCheckOut = false;
                message = "Bạn không thể checkout khi chưa checkIn!";
            }
            return (allowCheckOut, maxSession, message);
        }

        [HttpPost]
        public JsonResult GetTimeKeepingToDay()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var toDay = DateTime.Today;
                msg.Object = (from a in _context.WorkShiftCheckInOuts
                              join b in _context.Users on a.UserId equals b.Id
                              where (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckIn) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckOut))
                              && (a.ActionTime.Date >= toDay)
                              && (a.ActionTime.Date <= toDay)
                              && !a.IsDeleted
                              orderby a.Id descending
                              select new
                              {
                                  a.Id,
                                  a.UserId,
                                  FullName = b.GivenName,
                                  a.Action,
                                  a.ActionTime,
                                  a.ShiftCode,
                                  a.LocationText
                              }).GroupBy(x => new { x.UserId, x.ShiftCode });
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa báo muộn/xin nghỉ!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListTimekeepingSearch(string DateFrom, string DateTo, string status)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromDate = !string.IsNullOrEmpty(DateFrom) ? DateTime.ParseExact(DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(DateTo) ? DateTime.ParseExact(DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                //var fromTime = Convert.ToDateTime("19/12/2019");
                // var toTime = Convert.ToDateTime("21/12/2019");
                var list = from a in _context.WorkShiftCheckInOuts
                           join b in _context.Users on a.UserId equals b.Id
                           where
                           (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) || a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork))
                            && (string.IsNullOrEmpty(DateFrom) || (a.ActionTime.Date >= fromDate.Value.Date))
                            && (string.IsNullOrEmpty(DateTo) || (a.ActionTime.Date <= toDate.Value.Date))
                            && (string.IsNullOrEmpty(status) || a.Action == status)
                           orderby a.Id descending
                           select new
                           {
                               a.Id,
                               DisplayName = b.GivenName,
                               ActionCode = a.Action,
                               ActionName = (a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) ? StaffStauts.GoLate.DescriptionAttr() :
                                             a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) ? StaffStauts.NoWork.DescriptionAttr() :
                                             a.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) ? StaffStauts.QuitWork.DescriptionAttr() : ""),
                               a.ActionTime,
                               a.ActionTo,
                               a.Note,
                               b.PhoneNumber,
                               b.Email,
                               b.UserName
                           };
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy danh sách chấm công";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetStaffKeeping()
        {
            var toDay = DateTime.Today;
            //var list = new List<WorkShiftCheckInOut>();
            //var listOut = new List<WorkShiftCheckInOut>();
            //var uId = _context.WorkShiftCheckInOuts.Where(x => !x.IsDeleted).DistinctBy(x => x.UserId).Select(x => x.UserId).ToList();
            //foreach (var id in uId)
            //{
            //    var idUser = _context.WorkShiftCheckInOuts.Where(x => x.UserId.Equals(id) && !x.IsDeleted).Max(x => x.Id);
            //    var max = _context.WorkShiftCheckInOuts.FirstOrDefault(x => x.Id == idUser);
            //    if (max.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.CheckIn))
            //    {
            //        list.Add(max);
            //    }
            //}
            var data = (from a in _context.ShiftLogs
                        join b in _context.Users on a.CreatedBy equals b.UserName
                        where (a.ChkinTime.Value >= toDay)
                        select new
                        {
                            a.Id,
                            EmployCode = b.EmployeeCode != null ? b.EmployeeCode : "Chưa có mã",
                            b.GivenName,
                            LocationGPS = a.ChkinLocationGps,
                            b.Gender,
                            b.PhoneNumber,
                            b.Email,
                            ActionTime = a.ChkinTime.Value,
                            a.ShiftCode,
                            ListRoleGroup = (from d in _context.Roles
                                             join e in _context.AdUserInGroups on d.Id equals e.RoleId into e1
                                             from e2 in e1.DefaultIfEmpty()
                                             where e2.IsDeleted == false && e2.UserId.Equals(b.Id)
                                             select new
                                             {
                                                 RoleCode = d.Code,
                                                 RoleName = d.Title
                                             }).DistinctBy(k => k.RoleCode)
                        });

            return Json(data);
        }
        [HttpPost]
        public async Task<JsonResult> CheckInShiftLog(string userName, double Lat, double Lon, string imei, string note)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var timeDay = DateTime.Now;
                var shiftCode = timeDay.ToString("HHmmssddMMyyyy");
                var shiftLog = new ShiftLog
                {
                    ShiftCode = shiftCode,
                    ChkinTime = timeDay,
                    ChkinLocationGps = string.Format("[{0},{1}]", Lat, Lon),
                    ChkinLocationTxt = await _googleAPI.GetAddressForCoordinates(Lat, Lon),
                    IsChkinRealtime = true,
                    CreatedBy = userName,
                    CreatedTime = timeDay,
                    Note = note,
                    FromDevice = "PHONE",
                    Imei = imei
                };
                _context.ShiftLogs.Add(shiftLog);
                _context.SaveChanges();
                msg.Object = shiftCode;
                msg.Title = "Checkin Thành công";

            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi checkin";
            }
            return Json(msg);
        }
        [HttpPost]
        public async Task<JsonResult> CheckOutShiftLog(string shiftCode, string userName, double Lat, double Lon, string imei, string note)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ShiftLogs.LastOrDefault(x => x.ShiftCode == shiftCode);
                if (data != null)
                {
                    var timeDay = DateTime.Now;
                    var shiftCodeChkOut = timeDay.ToString("HHmmssddMMyyyy");
                    data.ShiftCode = shiftCode + "-" + shiftCodeChkOut;
                    data.ChkoutTime = timeDay;
                    data.ChkoutLocationGps = string.Format("[{0},{1}]", Lat, Lon);
                    data.ChkoutLocationTxt = await _googleAPI.GetAddressForCoordinates(Lat, Lon);
                    data.IsChkoutReadtime = true;
                    data.FromDevice = "PHONE";
                    data.Imei = imei;
                    data.Note = note;
                    var listWORKItemSessions = _context.WORKItemSessions.Where(x => x.ShiftCode == shiftCode).ToList();
                    if (listWORKItemSessions.Count() != 0)
                    {
                        foreach (var item in listWORKItemSessions)
                        {
                            item.ShiftCode = data.ShiftCode;
                            _context.WORKItemSessions.Update(item);
                        };
                    };
                    var listWORKItemSessionResults = _context.WORKItemSessionResults.Where(x => x.ShiftCode == shiftCode).ToList();
                    if (listWORKItemSessionResults.Count() != 0)
                    {
                        foreach (var item in listWORKItemSessionResults)
                        {
                            item.ShiftCode = data.ShiftCode;
                            _context.WORKItemSessionResults.Update(item);
                        };
                    };
                    _context.ShiftLogs.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Checkout Thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Có lỗi khi Checkout!";
                }

            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi checkout!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetLastChkIn(string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var isChkIn = false;
                var data = _context.ShiftLogs.LastOrDefault(x => x.CreatedBy == userName && x.Flag != "DELETED" && x.Flag != "CANCEL");
                if (data != null)
                {
                    if (data.ChkoutTime == null)
                    {
                        isChkIn = true;
                    }
                }

                msg.Object = new
                {
                    data = data != null ? data : null,
                    IsChkIn = isChkIn
                };
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListShiftLog(string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.ShiftLogs.Where(x => x.CreatedBy == userName && x.Flag != "DELETED" && x.Flag != "CANCEL").OrderByDescending(x => x.Id);
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class UpdateShiftLogModel
        {
            public string shiftCode { get; set; }
            public string chkinTime { get; set; }
            public string chkinLocationTxt { get; set; }
            public string chkinPicRealtime { get; set; }
            public string chkoutTime { get; set; }
            public string chkoutLocationTxt { get; set; }
            public string chkoutPicRealtime { get; set; }
            public string userName { get; set; }
            public string imei { get; set; }
            public string note { get; set; }
        }
        [HttpPost]
        public JsonResult UpdateShiftLog(UpdateShiftLogModel data)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var timeCheckIn = !string.IsNullOrEmpty(data.chkinTime) ? DateTime.ParseExact(data.chkinTime, "dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture) : (DateTime?)null;
                var timeCheckOut = !string.IsNullOrEmpty(data.chkoutTime) ? DateTime.ParseExact(data.chkoutTime, "dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture) : (DateTime?)null;
                var shiftLog = _context.ShiftLogs.FirstOrDefault(x => x.CreatedBy == data.userName && x.Flag != "DELETED" && x.Flag != "CANCEL" && x.ShiftCode == data.shiftCode);
                if (shiftLog != null)
                {
                    shiftLog.ChkinTime = timeCheckIn;
                    shiftLog.ChkinLocationTxt = data.chkinLocationTxt;
                    shiftLog.ChkinPicRealtime = data.chkinPicRealtime;

                    shiftLog.ChkoutTime = timeCheckOut;
                    shiftLog.ChkoutLocationTxt = data.chkoutLocationTxt;
                    shiftLog.ChkoutPicRealtime = data.chkoutPicRealtime;

                    shiftLog.UpdatedBy = data.userName;
                    shiftLog.UpdatedTime = DateTime.Now;
                    shiftLog.Imei = data.imei;
                    shiftLog.Note = data.note;
                    shiftLog.FromDevice = "PHONE";
                    _context.ShiftLogs.Update(shiftLog);
                    _context.SaveChanges();
                    msg.Title = "Điều chỉnh ca làm việc thành công!";
                    msg.Object = shiftLog;
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class ShiftLogManual
        {
            public string ChkinLocationTxt { get; set; }
            public string ChkoutLocationTxt { get; set; }
            public string ChkinTime { get; set; }
            public string ChkoutTime { get; set; }
            public string ChkinPicRealtime { get; set; }
            public string ChkoutPicRealtime { get; set; }
            public string UserName { get; set; }
            public string Imei { get; set; }
            public string Note { get; set; }
        }
        [HttpPost]
        public JsonResult InsertShiftLog(ShiftLogManual shift)
        {
            var msg = new JMessage { Title = "", Error = false };
            try
            {
                var checkInTime = !string.IsNullOrEmpty(shift.ChkinTime) ? DateTime.ParseExact(shift.ChkinTime, "dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture) : (DateTime?)null;
                var checkOutTime = !string.IsNullOrEmpty(shift.ChkoutTime) ? DateTime.ParseExact(shift.ChkoutTime, "dd/MM/yyyy HH:mm:ss", CultureInfo.InvariantCulture) : (DateTime?)null;
                var ip = Request.HttpContext.Connection.RemoteIpAddress.ToString();
                var shifLog = new ShiftLog
                {
                    ShiftCode = checkInTime.Value.ToString("HHmmssddMMyyyy") + "_" + checkOutTime.Value.ToString("HHmmssddMMyyyy"),
                    ChkinTime = checkInTime,
                    ChkinPicRealtime = shift.ChkinPicRealtime,
                    ChkinLocationTxt = shift.ChkinLocationTxt,
                    IsChkinRealtime = false,

                    ChkoutTime = checkOutTime,
                    ChkoutLocationTxt = shift.ChkoutLocationTxt,
                    ChkoutPicRealtime = shift.ChkoutPicRealtime,
                    IsChkoutReadtime = false,

                    Note = shift.Note,
                    CreatedBy = shift.UserName,
                    CreatedTime = DateTime.Now,
                    FromDevice = "PHONE",
                    Imei = shift.Imei,
                };
                _context.ShiftLogs.Add(shifLog);
                _context.SaveChanges();
                msg.Title = "Thêm ca làm việc thành công";
                msg.Object = shifLog;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm ca làm việc";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListChkInChkOutUser(string userName, string FromDate, string ToDate)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromDate = !string.IsNullOrEmpty(FromDate) ? DateTime.ParseExact(FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(ToDate) ? DateTime.ParseExact(ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = _context.ShiftLogs.Where(x => x.CreatedBy == userName && x.Flag != "DELETED" && x.Flag != "CANCEL"
                        && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate))
                        && ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate))).OrderByDescending(x => x.Id).ToList();

            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class SearchMap
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string UserName { get; set; }
        }
        public class WorkSession
        {
            public int Id { get; set; }
            public string CheckTitle { get; set; }
        }
        [HttpPost]
        public JsonResult GetRouteInOut(SearchMap search)
        {
            var today = DateTime.Now;
            var fromDate = !string.IsNullOrEmpty(search.FromDate) ? DateTime.ParseExact(search.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var toDate = !string.IsNullOrEmpty(search.ToDate) ? DateTime.ParseExact(search.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

            List<ResumRouteInOut> resum = new List<ResumRouteInOut>();
            var data = from a in _context.ShiftLogs
                       where ((fromDate == null) || (a.ChkinTime.Value.Date >= fromDate.Value.Date))
                       //&& ((toDate == null) || ((a.ChkoutTime.HasValue ? a.ChkoutTime.Value.Date : today.Date) <= toDate.Value.Date))
                       && (string.IsNullOrEmpty(search.UserName) || a.CreatedBy.Equals(search.UserName))
                       group a by a.CreatedBy into g
                       select g;
            foreach (var item in data)
            {
                var DataTracking = _context.UserTrackingGpss.FirstOrDefault(x => x.UserName == item.Key && x.TrackingDate == fromDate);
                var shifts = item.ToList();
                List<RouteInOut> routes = new List<RouteInOut>();
                foreach (var shif in shifts)
                {
                    if (shif.ChkinTime.HasValue)
                    {
                        var routeInOut = new RouteInOut
                        {
                            Action = "In",
                            Address = shif.ChkinLocationTxt,
                            Time = shif.ChkinTime.Value.ToString("HH:mm:ss dd/MM/yyyy"),
                            LatLng = shif.ChkinLocationGps
                        };
                        routes.Add(routeInOut);
                    }
                    if (shif.ChkoutTime.HasValue)
                    {
                        var routeInOut = new RouteInOut
                        {
                            Action = "Out",
                            Address = shif.ChkoutLocationTxt,
                            Time = shif.ChkoutTime.Value.ToString("HH:mm:ss dd/MM/yyyy"),
                            LatLng = shif.ChkoutLocationGps
                        };
                        routes.Add(routeInOut);
                    }
                }
                if (DataTracking != null)
                {
                    var resumRoute = new ResumRouteInOut
                    {
                        UserName = item.Key,
                        RouteInOuts = routes,
                        DataGps = DataTracking.DataGps

                    };
                    resum.Add(resumRoute);
                }
                else
                {
                    var resumRoute = new ResumRouteInOut
                    {
                        UserName = item.Key,
                        RouteInOuts = routes,
                        DataGps = null

                    };
                    resum.Add(resumRoute);
                }

            }
            return Json(resum);
        }
        public class RouteInOut
        {
            public string Action { get; set; }
            public string Address { get; set; }
            public string Time { get; set; }
            public string LatLng { get; set; }
            public List<WorkSession> listItemActivity { get; set; }

        }
        public class ResumRouteInOut
        {
            public string UserName { get; set; }
            public string DataGps { get; set; }
            public List<RouteInOut> RouteInOuts { get; set; }
        }
        #endregion

        #region Customer request
        [HttpGet]
        public JsonResult GetListKey()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var list = _context.GalaxyKeywords.AsNoTracking();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Lấy danh sách keyword thành công";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCustomerRequest()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var query = from a in _context.OrderRequestRaws
                            select new
                            {
                                a.ReqCode,
                                a.Title,
                                a.Priority,
                                a.Phone,
                                a.Email,
                                a.Content,
                                a.RequestTime,
                                a.Keyword,
                                ListFile = _context.OrderRequestRawFiless.Where(x => x.ReqCode == a.ReqCode).Select(y => new
                                {
                                    y.Id,
                                    y.FileName,
                                    y.FilePath,
                                    y.CreatedBy,
                                    y.CreatedTime
                                }),
                            };
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Lấy danh sách yêu cầu khách hàng lỗi";
            }
            return Json(msg);
        }

        [HttpPost]
        [RequestFormLimits(MultipartBodyLengthLimit = long.MaxValue)]
        [RequestSizeLimit(long.MaxValue)]
        public JsonResult AddCustomerRequest(CustomerRequestModel obj, IFormFile fileUpload)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                string requestCode = Guid.NewGuid().ToString();
                if (fileUpload != null)
                {
                    var upload = _upload.UploadFile(fileUpload, Path.Combine(_hostingEnvironment.WebRootPath, "uploads\\files"));
                    if (!upload.Error)
                    {
                        var customerRequest = new OrderRequestRaw
                        {
                            Title = obj.Title,
                            ReqCode = requestCode,
                            Content = obj.Content,
                            Phone = obj.Phone,
                            Email = obj.Email,
                            Keyword = obj.Keyword,
                            Priority = obj.Priority,
                            CreatedTime = DateTime.Now,
                            RequestTime = !string.IsNullOrEmpty(obj.RequestTime) ? DateTime.ParseExact(obj.RequestTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null,
                        };
                        _context.OrderRequestRaws.Add(customerRequest);
                        var file = new OrderRequestRawFiles
                        {
                            ReqCode = customerRequest.ReqCode,
                            CreatedBy = ESEIM.AppContext.UserName,
                            CreatedTime = DateTime.Now,
                            FileName = fileUpload.FileName,
                            FilePath = "/uploads/files/" + upload.Object.ToString(),
                        };
                        _context.OrderRequestRawFiless.Add(file);
                        _context.SaveChanges();
                        msg.Title = "Đã thêm yêu cầu thành công";
                    }
                }
                else
                {
                    var customerRequest = new OrderRequestRaw
                    {
                        ReqCode = requestCode,
                        Title = obj.Title,
                        Content = obj.Content,
                        Phone = obj.Phone,
                        Email = obj.Email,
                        Keyword = obj.Keyword,
                        Priority = obj.Priority,
                        CreatedTime = DateTime.Now,
                        RequestTime = !string.IsNullOrEmpty(obj.RequestTime) ? DateTime.ParseExact(obj.RequestTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null,
                    };
                    _context.OrderRequestRaws.Add(customerRequest);
                    _context.SaveChanges();
                    msg.Title = "Đã thêm yêu cầu thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Thêm yêu cầu lỗi";
            }
            return Json(msg);
        }

        //insert bao ban ranh
        [HttpPost]
        public JsonResult InsertUserDeclareBusyOrFrees(string StartTime, string EndTime, string UserId, string Status, string Note, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var startTime = DateTime.ParseExact(StartTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var endTime = DateTime.ParseExact(EndTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var checkExist = _context.UserDeclareBusyOrFrees.FirstOrDefault(x => x.UserId == UserId && (x.StartTime <= endTime && x.EndTime >= startTime) && !x.IsDeleted);
                if (checkExist == null)
                {
                    var model = new UserDeclareBusyOrFree
                    {
                        UserId = UserId,
                        Note = Note,
                        StartTime = startTime,
                        EndTime = endTime,
                        IsFree = Status,
                        CreatedBy = UserName,
                        CreatedTime = DateTime.Now
                    };
                    _context.UserDeclareBusyOrFrees.Add(model);
                    msg.Title = "Thêm thành công";
                    _context.SaveChanges();
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Bạn đã báo bận/rảnh vào khoảng thời gian này!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }

        // xoa bao ban ranh
        [HttpPost]
        public JsonResult DeleteUserDeclareBusyOrFrees(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.UserDeclareBusyOrFrees.FirstOrDefault(x => x.ID == id);
                if (data != null)
                {
                    data.IsDeleted = true;
                    data.DeletedBy = ESEIM.AppContext.UserName;
                    data.DeletedTime = DateTime.Now;
                    _context.UserDeclareBusyOrFrees.Update(data);
                }
                _context.SaveChanges();
                msg.Title = "Xóa thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        //lay danh sach bao ban ranh
        [HttpPost]
        public object GetListUserDeclareBusyOrFrees()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.UserDeclareBusyOrFrees
                             join b in _context.Users on a.UserId equals b.Id
                             where !a.IsDeleted
                             select new
                             {
                                 a.ID,
                                 a.UserId,
                                 FullName = b.GivenName,
                                 a.Note,
                                 a.IsFree,
                                 Status = a.IsFree == EnumHelper<UserBusyOrFreeEnum>.GetDisplayValue(UserBusyOrFreeEnum.Free) ? "Rảnh" : "Bận",
                                 a.StartTime,
                                 a.EndTime
                             });
                var count = query.Count();
                msg.Object = new
                {
                    Data = query.ToList(),
                    Count = query.Count()
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        //lay quyen user JobCard
        [HttpPost]
        public JsonResult GetRoleAssign(string CardCode, string UserId, string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //var data = _context.CardMappings.FirstOrDefault(x => x.CardCode == CardCode && x.UserId == UserId);
                //if (data != null)
                //{
                //    if (data.Responsibility == "ROLE_LEADER")
                //    {
                //        msg.Object = true;
                //    }
                //    else
                //    {
                //        msg.Object = false;
                //    }
                //}
                //else
                //{
                //    msg.Error = false;
                //    msg.Title = "Nhân viên chưa được phân quyền!";
                //}
                /////////////////////////
                //var data1 = _context.CardMappings.Where(x => x.CardCode.Equals(CardCode) && (!string.IsNullOrEmpty(x.TeamCode) || !string.IsNullOrEmpty(x.GroupUserCode))).Select(x => new
                //{
                //    x.Id,
                //    Code = !string.IsNullOrEmpty(x.TeamCode) ? x.TeamCode : x.GroupUserCode,
                //    Type = !string.IsNullOrEmpty(x.TeamCode) ? 1 : 2,
                //    x.Responsibility
                //});

                //var listUsers = ((from a in data1
                //                  join b in _context.AdUserInGroups on a.Code equals b.GroupUserCode
                //                  join c in _context.Users on b.UserId equals c.Id
                //                  where a.Type == 1
                //                  select new
                //                  {
                //                      a.Id,
                //                      b.UserId,
                //                      c.GivenName,
                //                      a.Responsibility,
                //                      DepartmentsId = c.DepartmentId,
                //                  }).Union(from a in data1
                //                           join b in _context.AdUserDepartments on a.Code equals b.DepartmentCode
                //                           join c in _context.Users on b.UserId equals c.Id
                //                           where a.Type == 2
                //                           select new
                //                           {
                //                               a.Id,
                //                               b.UserId,
                //                               c.GivenName,
                //                               a.Responsibility,
                //                               DepartmentsId = c.DepartmentId,
                //                           }).Union(from a in _context.CardMappings
                //                                    join b in _context.Users on a.UserId equals b.Id
                //                                    where a.CardCode == CardCode
                //                                    select new
                //                                    {
                //                                        a.Id,
                //                                        a.UserId,
                //                                        b.GivenName,
                //                                        a.Responsibility,
                //                                        DepartmentsId = b.DepartmentId,
                //                                    })).DistinctBy(x => x.UserId);
                //foreach (var item in listUsers)
                //{
                //    //if (item.UserId == userId && item.Responsibility == "ROLE_LEADER_ACCEPTED")
                //    if (item.UserId == UserId)//Hiệp sửa
                //    {
                //        msg.Object = item;
                //    }
                //}
                ////////////////////////
                ///
                var data = _context.CardMappings.Where(x => x.CardCode.Equals(CardCode) && (!string.IsNullOrEmpty(x.TeamCode) || !string.IsNullOrEmpty(x.GroupUserCode))).Select(x => new
                {
                    x.Id,
                    Code = !string.IsNullOrEmpty(x.TeamCode) ? x.TeamCode : x.GroupUserCode,
                    Name = string.IsNullOrEmpty(x.TeamCode) ? (_context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == x.GroupUserCode).Title ?? "") : _context.AdGroupUsers.FirstOrDefault(y => y.GroupUserCode == x.TeamCode).Title,
                    Type = !string.IsNullOrEmpty(x.TeamCode) ? 1 : 2,
                    x.Responsibility
                });
                var listUsers = ((from a in data
                                  join b in _context.AdUserInGroups on a.Code equals b.GroupUserCode
                                  join c in _context.Users on b.UserId equals c.Id
                                  where a.Type == 1
                                  select new RoleInCard
                                  {
                                      Id = a.Id,
                                      UserId = b.UserId,
                                      Responsibility = "ROLE_STAFF",
                                      DepartmentId = c.DepartmentId
                                  }).Union(from a in data
                                           join c in _context.Users on a.Code equals c.DepartmentId
                                           where a.Type == 2
                                           select new RoleInCard
                                           {
                                               Id = a.Id,
                                               UserId = c.Id,
                                               Responsibility = "ROLE_STAFF",
                                               DepartmentId = c.DepartmentId
                                           }).Union(from a in _context.CardMappings
                                                    join b in _context.Users on a.UserId equals b.Id
                                                    where a.CardCode == CardCode
                                                    select new RoleInCard
                                                    {
                                                        Id = a.Id,
                                                        UserId = a.UserId,
                                                        Responsibility = a.Responsibility,
                                                        DepartmentId = b.DepartmentId
                                                    }));
                if (listUsers.Any())
                {

                    var list = new List<RoleInCard>();
                    foreach (var item in listUsers)
                    {
                        if (item.UserId == UserId)
                        {
                            list.Add(item);
                        }
                    }
                    if (list.Count() > 0)
                    {
                        var getResponsibility = (from a in list
                                                 join b in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "CARD_ROLE") on a.Responsibility equals b.CodeSet
                                                 select new RoleInCard
                                                 {
                                                     Id = a.Id,
                                                     DepartmentId = a.DepartmentId,
                                                     Responsibility = a.Responsibility,
                                                     UserId = a.UserId,
                                                     Priority = b.Priority
                                                 }).OrderBy(x => x.Priority);
                        msg.Object = getResponsibility.FirstOrDefault();
                    }
                    else
                    {
                        var card = _context.WORKOSCards.FirstOrDefault(x => !x.IsDeleted && x.CardCode == CardCode);
                        if (card.CreatedBy == userName)
                        {
                            msg.Object = new RoleInCard
                            {
                                Id = 0,
                                DepartmentId = "",
                                Responsibility = "ROLE_LEADER",
                                UserId = UserId,
                                Priority = 0
                            };
                        }
                        else
                        {
                            msg.Object = new RoleInCard
                            {
                                Id = 0,
                                DepartmentId = "",
                                Responsibility = "ROLE_STAFF",
                                UserId = UserId,
                                Priority = 0
                            };
                        }
                    }
                }
                else
                {
                    msg.Object = new RoleInCard
                    {
                        Id = 0,
                        DepartmentId = "",
                        Responsibility = "ROLE_LEADER",
                        UserId = UserId,
                        Priority = 0
                    };
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListStatusUserDeclareBusyOrFrees()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = new List<UserBusyOrFreeStatus>();
                var Busy = new UserBusyOrFreeStatus
                {
                    Code = EnumHelper<UserBusyOrFreeEnum>.GetDisplayValue(UserBusyOrFreeEnum.Busy),
                    Name = UserBusyOrFreeEnum.Busy.DescriptionAttr()
                };
                list.Add(Busy);

                var Free = new UserBusyOrFreeStatus
                {
                    Code = EnumHelper<UserBusyOrFreeEnum>.GetDisplayValue(UserBusyOrFreeEnum.Free),
                    Name = UserBusyOrFreeEnum.Free.DescriptionAttr()
                };
                list.Add(Free);
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        #endregion

        #region News
        [HttpPost]
        public JsonResult GetNews(SeachNewsModel obj)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var fromDate = !string.IsNullOrEmpty(obj.FromDate) ? DateTime.ParseExact(obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(obj.ToDate) ? DateTime.ParseExact(obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = from a in _context.RmJnanaNewsArticles
                            join b in _context.RmJnanaNewsCats
                            on a.CatCode equals b.CatCode
                            where a.ArticleStatus == 1 && b.CatStatus == 1
                            && (string.IsNullOrEmpty(obj.CatCode) || a.CatCode.ToLower().Contains(obj.CatCode.ToLower()))
                            && (string.IsNullOrEmpty(obj.Title) || a.ArticleTitle.ToLower().Contains(obj.Title.ToLower()))
                            && (fromDate == null || (a.CreatedTime.Value.Date >= fromDate.Value.Date))
                            && (toDate == null || (a.CreatedTime.Value.Date <= toDate.Value.Date))
                            select new
                            {
                                id = a.Id,
                                article_code = a.ArticleCode,
                                article_title = a.ArticleTitle,
                                article_content = a.ArticleContent,
                                cat_code = a.CatCode,
                                artile_order = a.ArtileOrder,
                                created_time = a.CreatedTime
                            };

                if (obj.Page < 0)
                {
                    var data = query.OrderUsingSortExpression("created_time desc").AsNoTracking().ToList();
                    msg.Object = data;
                }
                else
                {
                    var data1 = query
                    .OrderUsingSortExpression("created_time desc").Skip(obj.Page).Take(obj.Length).AsNoTracking().ToList();
                    msg.Object = data1;
                }


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = ex.Message;
            }
            return Json(msg);

        }
        #endregion

        #region Product
        [HttpPost]
        public JsonResult GetListProduct()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listCommon = _context.CommonSettings.Select(x => new { x.CodeSet, x.ValueSet });
                var list = from a in _context.MaterialProducts
                           join b in listCommon on a.Unit equals b.CodeSet into b1
                           from b in b1.DefaultIfEmpty()
                           join c in listCommon on a.GroupCode equals c.CodeSet into c1
                           from c in c1.DefaultIfEmpty()
                           select new
                           {
                               Id = a.Id,
                               Productcode = a.ProductCode,
                               Productname = a.ProductName,
                               Unit = b != null ? b.ValueSet : "Không xác định",
                               Productgroup = c != null ? c.ValueSet : "Không xác định",
                               PathNmg = a.Image,
                               a.Note,
                           };
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        #endregion

        #region App Toàn nhận diện gương mặt
        [HttpPost]
        public JsonResult InsertFaceId(string name, string faceId, string position, string folderCode, IFormFile img)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var repository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == folderCode);
                if (repository != null)
                {
                    var upload = _upload.UploadImage(img, Path.Combine(_hostingEnvironment.WebRootPath, repository.PathPhysic));
                    if (upload.Error)
                    {
                        msg.Error = true;
                        msg.Title = "Có lỗi khi tải ảnh";
                        return Json(msg);
                    }
                    var file = new EDMSFile
                    {
                        FileCode = string.Concat("FACE", Guid.NewGuid().ToString()),
                        FileName = img.FileName,
                        FileTypePhysic = Path.GetExtension(img.FileName),
                        Url = Path.Combine(repository.PathPhysic, upload.Object.ToString()),
                        ReposCode = repository.ReposCode,
                        CreatedTime = DateTime.Now,
                        MimeType = img.ContentType
                    };
                    _context.EDMSFiles.Add(file);
                    var face = new FaceFaceId
                    {
                        FaceId = faceId,
                        Name = name,
                        ImgPath = file.Url,
                        CreatedTime = DateTime.Now,
                    };
                    _context.FaceFaceIds.Add(face);
                    _context.SaveChanges();
                    msg.Title = "Tải ảnh thành công";
                    msg.Object = face;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng chọn kho";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Tải ảnh thất bại";
            }
            return Json(msg);
        }

        [HttpPost]
        private async Task SendPushNotificationAsync(string token, string position)
        {
            var obj2 = _context.VcFcms.ToList();
            var applicationID = "AAAAQTp7NQ0:APA91bHsBv08eWtw-TsvFRteTcrd9KF8cH5rHKlWuQnvd7_a7UKMbGso4oxctp-Jes28fFmBvkIhUT8ehHw-gkDXH6PxhVbv-m4fvUdZRvpPur57psho9-37FTlrzqZQnf0vESUrj6bT";
            var senderId = "280154027277";
            using (var client = new HttpClient())
            {
                //do something with http client
                client.BaseAddress = new Uri("https://fcm.googleapis.com");
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                client.DefaultRequestHeaders.TryAddWithoutValidation("Authorization", $"key={applicationID}");
                client.DefaultRequestHeaders.TryAddWithoutValidation("Sender", $"id={senderId}");
                foreach (var item in obj2)
                {
                    var data = new
                    {
                        to = item.Token,
                        notification = new
                        {

                            body = "Có người vừa checkin ở vị trí " + position,
                            title = "Detected checkin",
                            icon = "myicon",
                            sound = "beep.aiff"
                        },
                        priority = "high"
                    };
                    var json = JsonConvert.SerializeObject(data);
                    var httpContent = new StringContent(json, Encoding.UTF8, "application/json");
                    var result = await client.PostAsync("/fcm/send", httpContent);
                }

            }
        }
        [HttpPost]
        public JsonResult InsertAccount(string userName, string password)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var ObeAccount = new ObeAccount()
                {
                    UserName = userName,
                    Password = password
                };
                _context.ObeAccounts.Add(ObeAccount);
                _context.SaveChanges();
                msg.Title = "Thêm thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Thêm thất bại";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetAccountInfo(string userName)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.ObeAccounts.FirstOrDefault(x => x.UserName.ToLower() == userName.ToLower());
                if (data != null)
                {
                    msg.Object = data;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tồn tại tài khoản này";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Lấy thông tin thất bại";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertDevice(ObeListDevice obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                _context.ObelistDevices.Add(obj);
                _context.SaveChanges();
                msg.Title = "Thêm thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Thêm thất bại";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetDevice(string deviceId)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.ObelistDevices.FirstOrDefault(x => x.DeviceId == deviceId);
                msg.Object = data;
                msg.Title = "Lấy dữ liệu thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        public JsonResult InsertAiRecognitionTracking(ObeAiRecognitionTracking obj, IFormFile image)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var mes = _upload.UploadImage(image);
                var filePath = "/uploads/Images/" + mes.Object.ToString();
                obj.ImgPath = filePath;
                _context.ObeAiRecognitionTrackings.Add(obj);
                _context.SaveChanges();
                msg.Title = "Thêm thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Thêm thất bại";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetAiRecognitionTracking(int Id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.ObeAiRecognitionTrackings.FirstOrDefault(x => x.Id == Id);
                msg.Object = data;
                msg.Title = "Lấy dữ liệu thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        #endregion

        #region Building
        [HttpPost]
        public int GetCountProjectByBuilding()
        {
            return _context.Projects.Where(x => x.FlagDeleted == false && x.PrjType == "PROJECT_BIDDING").AsNoTracking().Count();
        }

        [HttpPost]
        public JsonResult GetListProjectByBuilding()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.Projects
                             where a.FlagDeleted == false && a.PrjType == "PROJECT_BIDDING"
                             select new
                             {
                                 a.ProjectCode,
                                 a.ProjectTitle,
                                 ListCount = (from d in _context.CardMappings
                                              join e in _context.WORKOSBoards on d.BoardCode equals e.BoardCode
                                              join k in _context.WORKOSLists on e.BoardCode equals k.BoardCode
                                              where d.ProjectCode == a.ProjectCode
                                              select k).AsNoTracking().Count()
                             }).AsNoTracking();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListProductByProject()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.MaterialProducts.Where(x => x.IsDeleted == false).Select(x => new { x.ProductCode, x.ProductName }).AsNoTracking().ToList();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListTaskByProjectCode(string projectCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.CardMappings
                             join b in _context.WORKOSLists on a.ListCode equals b.ListCode
                             where a.ProjectCode == projectCode
                             select new
                             {
                                 b.ListCode,
                                 b.ListName
                             }).AsNoTracking();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCardByProjectCode(string listCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.WORKOSCards
                             where a.ListCode == listCode && a.IsDeleted == false && a.Status != "TRASH"
                             select new
                             {
                                 a.CardCode,
                                 a.CardName
                             }).AsNoTracking();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListTeamByProjectCode(string projectCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.ProjectTeams
                             join b in _context.Teams on a.TeamCode equals b.TeamCode
                             where a.ProjectCode == projectCode && b.IsDeleted == false
                             select new
                             {
                                 b.TeamCode,
                                 b.TeamName
                             }).AsNoTracking();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetItemTrackingBuil(string jobCardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = from buiding in _context.JCTrackingBuildings.Where(x => x.JobCardCode == jobCardCode).Select(x => new JCTrackingBuilding
                {
                    JctCode = x.JctCode,
                    JobCardCode = x.JobCardCode,
                    Progress = x.Progress,
                    LocationGps = x.LocationGps,
                    LocationText = x.LocationText,
                    TeamCode = x.TeamCode,
                    TeamName = x.Team != null ? x.Team.TeamName : null,
                    Device = x.Device,
                    Note = x.Note
                })
                            select new
                            {
                                TrkBuilding = buiding,
                                ListTrackingImage = _context.JCTrackingMedias.Where(y => y.JctCode == buiding.JctCode),
                                ListMaterialsBuilding = _context.JCKMaterialsComsumes.Where(y => y.JctCode == buiding.JctCode).Select(y => new JCKMaterialsComsume
                                {
                                    ProductCode = y.ProductCode,
                                    MaterName = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == y.ProductCode && !x.IsDeleted).ProductName ?? null,
                                    Quantity = y.Quantity,
                                    Unit = y.Unit
                                }),
                            };
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetAddressAndProduct(string jobCardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.WORKOSCards.Where(x => x.CardCode == jobCardCode && x.Status != "TRASH").Select(x => new
                {
                    x.LocationText,
                    ListProduct = _context.CardProducts.Where(y => y.CardCode == x.CardCode).Select(y => new
                    {
                        ProductName = _context.MaterialProducts.FirstOrDefault(z => z.ProductCode == y.ProductCode).ProductName ?? "",
                        y.Quantity
                    }),
                }).First();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertTrackingBuild([FromBody]JCTrackingBuildModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //Insert Tracking
                var trackingBuilding = new JCTrackingBuilding
                {
                    JctCode = Guid.NewGuid().ToString(),
                    JobCardCode = obj.TrkBuilding.JobCardCode,
                    TeamCode = obj.TrkBuilding.TeamCode,
                    Progress = obj.TrkBuilding.Progress,
                    Note = obj.TrkBuilding.Note,
                    LocationGps = obj.TrkBuilding.LocationGps,
                    LocationText = obj.TrkBuilding.LocationText,
                    CreatedBy = obj.TrkBuilding.CreatedBy,
                    CreatedTime = DateTime.Now,
                    Device = obj.TrkBuilding.Device,
                };
                _context.JCTrackingBuildings.Add(trackingBuilding);
                //Insert File
                foreach (var item in obj.ListTrackingImage)
                {
                    var trackingMedia = new JCTrackingMedia
                    {
                        JctCode = trackingBuilding.JctCode,
                        FilePath = item.FilePath,
                        FileType = item.FileType,
                        FileName = item.FileName,
                        CreatedTime = DateTime.Now,
                        CreatedBy = trackingBuilding.CreatedBy
                    };
                    _context.JCTrackingMedias.Add(trackingMedia);
                }
                //Insert Material
                foreach (var item in obj.ListMaterialsBuilding)
                {
                    var trackingMaterial = new JCKMaterialsComsume
                    {
                        JctCode = trackingBuilding.JctCode,
                        ProductCode = item.ProductCode,
                        Quantity = item.Quantity,
                        Unit = item.Unit,
                        CreatedTime = DateTime.Now,
                        CreatedBy = trackingBuilding.CreatedBy
                    };
                    _context.JCKMaterialsComsumes.Add(trackingMaterial);
                }
                _context.SaveChanges();
                msg.Title = "Cập nhập tiến độ công trình thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi khi cập nhập tiến độ công trình!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateTrackingBuild([FromBody]JCTrackingBuildModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var trackingBuilding = _context.JCTrackingBuildings.FirstOrDefault(x => x.JctCode == obj.TrkBuilding.JctCode);
                if (trackingBuilding != null)
                {
                    //update tracking
                    trackingBuilding.JobCardCode = obj.TrkBuilding.JobCardCode;
                    trackingBuilding.TeamCode = obj.TrkBuilding.TeamCode;
                    trackingBuilding.Progress = obj.TrkBuilding.Progress;
                    trackingBuilding.UpdatedBy = obj.TrkBuilding.UpdatedBy;
                    trackingBuilding.UpdatedTime = DateTime.Now;
                    //update file
                    if (obj.ListTrackingImageDelete.Any())
                    {
                        var listImage = _context.JCTrackingMedias.Where(x => x.JctCode == trackingBuilding.JctCode && obj.ListTrackingImageDelete.Any(y => x.Id == y));
                        if (listImage.Any())
                        {
                            _context.JCTrackingMedias.RemoveRange(listImage);
                        }
                    }
                    var listTrackingImageNew = obj.ListTrackingImage.Where(x => x.Id < 0);
                    if (listTrackingImageNew.Any())
                    {
                        foreach (var item in listTrackingImageNew)
                        {
                            var img = new JCTrackingMedia
                            {
                                JctCode = trackingBuilding.JctCode,
                                FilePath = item.FilePath,
                                FileType = item.FileType,
                                FileName = item.FileName,
                                CreatedTime = DateTime.Now,
                                CreatedBy = trackingBuilding.CreatedBy
                            };
                            _context.JCTrackingMedias.Add(img);
                        }
                    }
                    //update material
                    var listMaterialOld = _context.JCKMaterialsComsumes.Where(x => x.JctCode == trackingBuilding.JctCode);
                    if (listMaterialOld.Any())
                    {
                        _context.JCKMaterialsComsumes.RemoveRange(listMaterialOld);
                    }
                    foreach (var item in obj.ListMaterialsBuilding)
                    {
                        var trackingMaterial = new JCKMaterialsComsume
                        {
                            JctCode = trackingBuilding.JctCode,
                            ProductCode = item.ProductCode,
                            Quantity = item.Quantity,
                            Unit = item.Unit,
                            CreatedTime = DateTime.Now,
                            CreatedBy = trackingBuilding.CreatedBy
                        };
                        _context.JCKMaterialsComsumes.Add(trackingMaterial);
                    }
                    _context.SaveChanges();
                    msg.Title = "Cập nhập tiến độ công trình thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tồn tại tiến độ công trình!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi cập nhập tiến độ công trình!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteTrackingBuild(string fctCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //delete tracking
                var tracking = _context.JCTrackingBuildings.FirstOrDefault(x => x.JctCode == fctCode);
                _context.JCTrackingBuildings.Remove(tracking);

                //delete media
                var trackingMedia = _context.JCTrackingMedias.Where(x => x.JctCode == fctCode);
                _context.JCTrackingMedias.RemoveRange(trackingMedia);

                //delete material
                var trackingMaterial = _context.JCKMaterialsComsumes.Where(x => x.JctCode == fctCode);
                _context.JCKMaterialsComsumes.RemoveRange(trackingMaterial);
                _context.SaveChanges();
                msg.Title = "Xóa tiến độ công việc thành công!";
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi xóa tiến độ công việc!";
                msg.Error = true;
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        #endregion

        #region Tracking
        [HttpPost]
        public JsonResult InsertTrackingUser(string UserName, string TrackingDate, string DataGps)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var trackingDate = string.IsNullOrEmpty(TrackingDate) ? (DateTime?)null : DateTime.ParseExact(TrackingDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                var DataTracking = _context.UserTrackingGpss.FirstOrDefault(x => x.UserName == UserName && x.TrackingDate == trackingDate);
                if (DataTracking == null)
                {
                    var Data = new UserTrackingGps
                    {
                        UserName = UserName,
                        TrackingDate = trackingDate,
                        DataGps = DataGps
                    };
                    _context.UserTrackingGpss.Add(Data);
                }
                else
                {
                    DataTracking.DataGps = DataTracking.DataGps + "," + DataGps;
                    _context.UserTrackingGpss.Update(DataTracking);

                }
                _context.SaveChanges();

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        #endregion

        #region Board,Card
        public class ListBoard
        {
            public string BoardCode { get; set; }
            public string BoardName { get; set; }
            public decimal Completed { get; set; }
            public int CountJobCard { get; set; }
        }
        [HttpPost]
        public JsonResult GetListBoards(string userId, string ObjId, int UserType)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (UserType != 10)
                {
                    var ListBoar = new List<ListBoard>();
                    var query = (from y in _context.WORKOSBoards
                                 where y.IsDeleted == false
                                 select new ListBoard
                                 {
                                     BoardCode = y.BoardCode,
                                     BoardName = y.BoardName,
                                     Completed = y.Completed,
                                     CountJobCard = (from a in _context.WORKOSCards
                                                     join b in _context.CardMappings.Where(x => x.BoardCode == y.BoardCode) on a.CardCode equals b.CardCode into b1
                                                     from b2 in b1.DefaultIfEmpty()
                                                     join e in _context.JcObjectIdRelatives on a.CardCode equals e.CardCode into e1
                                                     from e2 in e1.DefaultIfEmpty()
                                                     let lt = !string.IsNullOrEmpty(a.LstUser) ? a.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                                                     where (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && (lt.Any(x => x == userId)) & a.IsDeleted == false && a.Status != "TRASH"
                                                     select a).AsNoTracking().Distinct().Count(),
                                 }).ToList();
                    if (query.Any())
                    {
                        foreach (var item in query)
                        {
                            if (item.CountJobCard != 0)
                            {
                                ListBoar.Add(item);
                            }
                        }
                    }
                    msg.Object = ListBoar;
                }
                else
                {
                    var ListBoar = new List<ListBoard>();
                    var query = (from y in _context.WORKOSBoards
                                 where y.IsDeleted == false
                                 select new ListBoard
                                 {
                                     BoardCode = y.BoardCode,
                                     BoardName = y.BoardName,
                                     Completed = y.Completed,
                                     CountJobCard = (from a in _context.WORKOSCards
                                                     join b in _context.CardMappings.Where(x => x.BoardCode == y.BoardCode) on a.CardCode equals b.CardCode into b1
                                                     from b2 in b1.DefaultIfEmpty()
                                                     join e in _context.JcObjectIdRelatives on a.CardCode equals e.CardCode into e1
                                                     from e2 in e1.DefaultIfEmpty()
                                                     where (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.IsDeleted == false && a.Status != "TRASH"
                                                     select a).AsNoTracking().Distinct().Count(),
                                 }).ToList();
                    if (query.Any())
                    {
                        foreach (var item in query)
                        {
                            if (item.CountJobCard != 0)
                            {
                                ListBoar.Add(item);
                            }
                        }
                    }
                    msg.Object = ListBoar;
                }


            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateListCodeCardJob(string cardCode, string listCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var cardJob = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == cardCode);
                if (cardJob != null)
                {
                    cardJob.ListCode = listCode;
                    var listCardMapping = _context.CardMappings.Where(x => x.CardCode == cardCode);
                    var boardCode = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == listCode).BoardCode;
                    foreach (var item in listCardMapping)
                    {
                        item.BoardCode = boardCode;
                        item.ListCode = listCode;
                        _context.CardMappings.Update(item);
                    }
                    _context.SaveChanges();
                    msg.Title = "Cập nhập thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Có lỗi khi cập nhập!";
                }
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetBoardsWithWorkFlow()
        {
            var query = (from a in _context.WORKOSBoards
                         join b in _context.WfObjects on a.BoardCode equals b.WfObjCode
                         where a.IsDeleted == false && b.WfObjType == "BOARD"
                         //group a by a.BoardType into grp
                         group a by new { a.BoardType } into grp
                         orderby grp.Key.BoardType descending
                         select new
                         {
                             BoardType = grp.FirstOrDefault(),
                             BoardTypeText = _context.CommonSettings.FirstOrDefault(x => x.CodeSet == grp.First().BoardType).ValueSet ?? "",
                             ListBoard = grp.Select(x => new
                             {
                                 x.BoardCode,
                                 x.BoardName,
                                 x.Completed,
                             })
                         });
            return Json(query);
        }
        public class viewGirdCardBoard
        {
            public int CardID { get; set; }
            public string CardCode { get; set; }
            public string CardName { get; set; }
            public string CardLevel { get; set; }
            public string ListCode { get; set; }
            public string ListName { get; set; }
            public string BoardCode { get; set; }
            public string BoardName { get; set; }
            public string Deadline { get; set; }
            public string Currency { get; set; }
            public decimal Completed { get; set; }
            public DateTime BeginTime { get; set; }
            public DateTime? EndTime { get; set; }
            public decimal Cost { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public DateTime CreatedDate { get; set; }
            public string Status { get; set; }
            public string StatusCode { get; set; }
            public List<WORKOSAddressCard> ListAddress { get; set; }
        }
        [HttpPost]
        public JsonResult GetGirdCardBoard(string userId, string BoardCode, string ObjId, int UserType)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (UserType != 10)
                {
                    var query = (from a in _context.WORKOSCards.Where(x => !x.IsDeleted)
                                 join b in _context.WORKOSLists.Where(x => !x.IsDeleted) on a.ListCode equals b.ListCode
                                 join c in _context.CardCommentLists on a.CardCode equals c.CardCode into c1
                                 from c2 in c1.DefaultIfEmpty()
                                 join d in _context.CardItemChecks on a.CardCode equals d.CardCode into d1
                                 from d2 in d1.DefaultIfEmpty()
                                 join e in _context.JcObjectIdRelatives on a.CardCode equals e.CardCode into e1
                                 from e2 in e1.DefaultIfEmpty()
                                 let lt = !string.IsNullOrEmpty(a.LstUser) ? a.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                                 where (lt.Any(x => x == userId)) && !e2.IsDeleted && b.BoardCode.Equals(BoardCode) &&
                                 //(string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.Status != "TRASH" && a.Status != "CANCLED"
                                 (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.Status != "TRASH"
                                 select new viewGirdCardBoard
                                 {
                                     CardID = a.CardID,
                                     CardCode = a.CardCode,
                                     CardName = a.CardName,
                                     CardLevel = a.CardLevel,
                                     ListCode = b.ListCode,
                                     ListName = b.ListName,
                                     BoardCode = BoardCode,
                                     BoardName = _context.WORKOSBoards.FirstOrDefault(y => !y.IsDeleted && y.BoardCode == BoardCode).BoardName,
                                     Deadline = a.Deadline.ToString("dd/MM/yyyy"),
                                     Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Currency).ValueSet ?? "",
                                     Completed = b.Completed,
                                     BeginTime = a.BeginTime,
                                     EndTime = a.EndTime,
                                     Cost = a.Cost,
                                     UpdatedTime = a.UpdatedTime,
                                     Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Status).ValueSet ?? "",
                                     StatusCode = a.Status,
                                     CreatedDate = a.CreatedDate,
                                     ListAddress = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(a.CardCode) && x.IsDeleted == false).ToList(),
                                 }).DistinctBy(x => x.CardCode).OrderByDescending(x => x.UpdatedTime.HasValue ? x.UpdatedTime.Value : x.CreatedDate).ThenByDescending(x => x.CardID);


                    msg.Object = new
                    {
                        data = query.ToList(),
                        Count = query.Count(),
                    };
                }
                else
                {
                    var query = (from a in _context.WORKOSCards.Where(x => !x.IsDeleted)
                                 join b in _context.WORKOSLists.Where(x => !x.IsDeleted) on a.ListCode equals b.ListCode
                                 join c in _context.CardCommentLists on a.CardCode equals c.CardCode into c1
                                 from c2 in c1.DefaultIfEmpty()
                                 join d in _context.CardItemChecks on a.CardCode equals d.CardCode into d1
                                 from d2 in d1.DefaultIfEmpty()
                                 join e in _context.JcObjectIdRelatives on a.CardCode equals e.CardCode into e1
                                 from e2 in e1.DefaultIfEmpty()
                                 where !e2.IsDeleted && b.BoardCode.Equals(BoardCode) &&
                                 //(string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.Status != "TRASH" && a.Status != "CANCLED"
                                 (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.Status != "TRASH"
                                 select new viewGirdCardBoard
                                 {
                                     CardID = a.CardID,
                                     CardCode = a.CardCode,
                                     CardName = a.CardName,
                                     CardLevel = a.CardLevel,
                                     ListCode = b.ListCode,
                                     ListName = b.ListName,
                                     BoardCode = BoardCode,
                                     BoardName = _context.WORKOSBoards.FirstOrDefault(y => !y.IsDeleted && y.BoardCode == BoardCode).BoardName,
                                     Deadline = a.Deadline.ToString("dd/MM/yyyy"),
                                     Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Currency).ValueSet ?? "",
                                     Completed = b.Completed,
                                     BeginTime = a.BeginTime,
                                     EndTime = a.EndTime,
                                     Cost = a.Cost,
                                     UpdatedTime = a.UpdatedTime,
                                     Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Status).ValueSet ?? "",
                                     StatusCode = a.Status,
                                     CreatedDate = a.CreatedDate,
                                     ListAddress = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(a.CardCode) && x.IsDeleted == false).ToList(),
                                 }).DistinctBy(x => x.CardCode).OrderByDescending(x => x.UpdatedTime.HasValue ? x.UpdatedTime.Value : x.CreatedDate).ThenByDescending(x => x.CardID);


                    msg.Object = new
                    {
                        data = query.ToList(),
                        Count = query.Count(),
                    };
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            };
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetGirdCardAll(string userId, string BoardCode, string ObjId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.WORKOSCards.Where(x => !x.IsDeleted)
                             join b in _context.WORKOSLists.Where(x => !x.IsDeleted) on a.ListCode equals b.ListCode
                             join c in _context.CardCommentLists on a.CardCode equals c.CardCode into c1
                             from c2 in c1.DefaultIfEmpty()
                             join d in _context.CardItemChecks on a.CardCode equals d.CardCode into d1
                             from d2 in d1.DefaultIfEmpty()
                             join e in _context.JcObjectIdRelatives on a.CardCode equals e.CardCode into e1
                             from e2 in e1.DefaultIfEmpty()
                             let lt = !string.IsNullOrEmpty(a.LstUser) ? a.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                             where (lt.Any(x => x == userId)) && !e2.IsDeleted && b.BoardCode.Equals(BoardCode) &&
                             (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) && a.Status != "TRASH"
                             select new
                             {
                                 CardID = a.CardID,
                                 CardCode = a.CardCode,
                                 CardName = a.CardName,
                                 CardLevel = a.CardLevel,
                                 ListCode = b.ListCode,
                                 ListName = b.ListName,
                                 BoardCode = BoardCode,
                                 BoardName = _context.WORKOSBoards.FirstOrDefault(y => !y.IsDeleted && y.BoardCode == BoardCode).BoardName,
                                 Deadline = a.Deadline.ToString("dd/MM/yyyy"),
                                 Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Currency).ValueSet ?? "",
                                 b.Completed,
                                 BeginTime = a.BeginTime,
                                 EndTime = a.EndTime,
                                 a.Cost,
                                 Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.Status).ValueSet ?? "",
                                 StatusCode = a.Status,
                                 ListAddress = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(a.CardCode) && x.IsDeleted == false),
                             }).DistinctBy(x => x.CardCode).OrderByDescending(x => x.CardID);


                msg.Object = new
                {
                    data = query.ToList(),
                    Count = query.Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            };
            return Json(msg);
        }
        [HttpGet]
        public JsonResult GetListFunctionJobCard(string userId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var listColor = new[]
            {
                new
                {
                    Color = "#f44336",
                    Id = 1
                },
                new
                {
                    Color = "#E91E63",
                    Id = 2
                },
                new
                {
                    Color = "#9C27B0",
                    Id = 3
                },
                new
                {
                    Color = "#673AB7",
                    Id = 4
                },
                 new
                {
                    Color = "#9E9E9E",
                    Id = 5
                },
                  new
                {
                    Color = "#5758BB",
                    Id = 6
                },
                 new
                {
                    Color = "#79378B",
                    Id = 6
                },
                 new
                {
                    Color = "#3366FF",
                    Id = 7
                },
                   new
                {
                    Color = "#ff9700",
                    Id = 8
                },
                      new
                {
                    Color = "#61b5ff",
                    Id = 9
                },
            };
            var random = new Random();
            try
            {
                var list = (from f in _context.MobiFunctionJobCardLists.Where(x => !x.IsDeleted)
                            select new
                            {
                                f.Id,
                                f.Code,
                                f.Value,
                                listColor[random.Next(0, 8)].Color,
                                f.Desc,
                                CountJobCard = (from a in _context.CardMappings.Where(x => x.BoardCode == f.Code)
                                                join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                                                let lt = !string.IsNullOrEmpty(b.LstUser) ? b.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                                                where (lt.Any(x => x == userId)) && b.IsDeleted == false && b.Status != "TRASH"
                                                select b).AsNoTracking().Distinct().Count()
                            }).AsNoTracking();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpGet]
        public JsonResult GetListJobCardWithFunction(string boardCode, string userId, JTableModel jTablePara, int CurrentPagePara)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (CurrentPagePara - 1) * jTablePara.Length;
                var query = (from a in _context.CardMappings.Where(x => x.BoardCode == boardCode)
                             join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                             join c in _context.WORKOSLists on a.ListCode equals c.ListCode
                             join d in _context.CommonSettings on b.Status equals d.CodeSet into d1
                             from d in d1.DefaultIfEmpty()
                             let lt = !string.IsNullOrEmpty(b.LstUser) ? b.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                             where (lt.Any(x => x == userId)) && b.IsDeleted == false && b.Status != "TRASH"
                             select new
                             {
                                 b.CardID,
                                 b.CardCode,
                                 //new
                                 b.CardLevel,
                                 c.ListCode,
                                 BoardCode = a.BoardCode,
                                 BoardName = _context.WORKOSBoards.FirstOrDefault(y => !y.IsDeleted && y.BoardCode == a.BoardCode).BoardName,
                                 //end new
                                 b.CardName,
                                 Deadline = b.Deadline.ToString("dd/MM/yyyy"),
                                 Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == b.Currency).ValueSet ?? "",
                                 b.Completed,
                                 BeginTime = b.BeginTime,
                                 EndTime = b.EndTime,
                                 b.Cost,
                                 Status = d != null ? d.ValueSet : "",
                                 StatusCode = d != null ? d.CodeSet : "",
                                 ListAddress = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(b.CardCode) && x.IsDeleted == false),
                             }).DistinctBy(x => x.CardID);

                msg.Object = new
                {
                    data = query.Skip(intBeginFor).Take(jTablePara.Length).ToList(),
                    Count = query.Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            };
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListJobCard(string userId, string cardName, string dateFrom, string dateTo, string status, string ObjId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromDate = !string.IsNullOrEmpty(dateFrom) ? DateTime.ParseExact(dateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(dateTo) ? DateTime.ParseExact(dateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = (from a in _context.CardMappings
                             join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                             join c in _context.WORKOSLists on a.ListCode equals c.ListCode
                             join d in _context.CommonSettings on b.Status equals d.CodeSet into d1
                             from d in d1.DefaultIfEmpty()
                             join e in _context.JcObjectIdRelatives on b.CardCode equals e.CardCode into e1
                             from e2 in e1.DefaultIfEmpty()
                             let lt = !string.IsNullOrEmpty(b.LstUser) ? b.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                             where
                             (lt.Any(x => x == userId)) &&
                             b.IsDeleted == false && b.Status != "TRASH" &&
                             (string.IsNullOrEmpty(cardName) || b.CardName.ToUpper().Contains(cardName.ToUpper())) &&
                             (string.IsNullOrEmpty(status) || b.Status.ToUpper().Contains(status.ToUpper())) &&
                             (string.IsNullOrEmpty(ObjId) || e2.ObjID.Equals(ObjId)) &&
                             (fromDate == null || b.BeginTime >= fromDate) &&
                             (toDate == null || (b.EndTime.HasValue ? b.EndTime.Value.Date : DateTime.Now.Date) <= toDate)
                             select new
                             {
                                 b.CardID,
                                 b.CardCode,
                                 //new
                                 b.CardLevel,
                                 c.ListCode,
                                 BoardCode = a.BoardCode,
                                 BoardName = _context.WORKOSBoards.FirstOrDefault(y => !y.IsDeleted && y.BoardCode == a.BoardCode).BoardName,
                                 //end new
                                 b.CardName,
                                 Deadline = b.Deadline.ToString("dd/MM/yyyy"),
                                 Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == b.Currency).ValueSet ?? "",
                                 b.Completed,
                                 BeginTime = b.BeginTime,
                                 EndTime = b.EndTime,
                                 b.Cost,
                                 Status = d != null ? d.ValueSet : "",
                                 StatusCode = d != null ? d.CodeSet : "",
                                 UpdatedTime = b.UpdatedTime,
                                 CreatedDate = b.CreatedDate,
                                 b.CreatedBy,
                                 ListAddress = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(b.CardCode) && x.IsDeleted == false),
                             }).DistinctBy(x => x.CardCode).OrderByDescending(x => x.UpdatedTime.HasValue ? x.UpdatedTime.Value : x.CreatedDate).ThenByDescending(x => x.CardID);
                var count = query.Count();

                msg.Object = new
                {
                    data = query.ToList(),
                    countList = query.Count(),
                    countJob = query.Where(x => x.StatusCode != "DONE").Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            };
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetBoardRepeat()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.WORKOSBoards.Where(x => x.BoardType == "BOARD_REPEAT" && x.IsDeleted == false).Select(x => new
                {
                    x.BoardID,
                    x.BoardCode,
                    x.BoardName,
                    x.TeamCode,
                    x.Avatar,
                    x.BackgroundColor,
                    x.BackgroundImage,
                    x.Completed,
                    x.CompletedTime,
                    x.Deadline,
                    ListCount = _context.WORKOSLists.Where(y => y.BoardCode == x.BoardCode && y.IsDeleted == false).AsNoTracking().Count(),
                }).AsNoTracking();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy bảng";
            }
            return Json(msg);
        }

        [HttpPost]
        public int GetCountBoardRepeat()
        {
            return _context.WORKOSBoards.Where(x => x.BoardType == "BOARD_REPEAT" && x.IsDeleted == false).AsNoTracking().Count();
        }

        [HttpPost]
        public JsonResult GetListTaskByBoard(string boardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.WORKOSLists.Where(x => x.BoardCode == boardCode && x.IsDeleted == false).AsNoTracking().Select(x => new
                {
                    x.Completed,
                    x.ListCode,
                    x.ListName
                });
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy hạng mục công việc!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCardByList(string listCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.WORKOSCards.Where(x => x.ListCode == listCode && x.IsDeleted == false && x.Status != "TRASH").AsNoTracking().Select(x => new
                {
                    x.CardCode,
                    x.CardName,
                    x.Completed,
                });
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy công việc!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCheckItemByCard(string cardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.CardItemChecks.Where(x => x.CardCode == cardCode && x.Flag == false).AsNoTracking().Select(x => new
                {
                    x.ChkListCode,
                    x.CheckTitle,
                    x.Completed
                });
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy công việc!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetSubitemByChkItem(string checkListCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.CardSubitemChecks.Where(x => x.ChkListCode == checkListCode && x.Flag == false).AsNoTracking().Select(x => new
                {
                    x.Id,
                    x.Approver,
                    x.Title,
                    x.Approve,
                });
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy công việc!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetItemByCard(string cardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.WORKOSCards
                             where a.CardCode == cardCode && a.IsDeleted == false && a.Status != "TRASH"
                             select new
                             {
                                 ListFile = _context.CardAttachments.Where(x => x.CardCode == a.CardCode && x.Flag == false).Select(y => new
                                 {
                                     y.Id,
                                     y.MemberId,
                                     y.FileUrl,
                                     y.FileName,
                                     CreatedTime = y.CreatedTime.Value.ToString("HH:mm dd/MM/yyyy"),
                                     ListPermissionViewFile = !string.IsNullOrEmpty(y.ListPermissionViewFile) ? y.ListPermissionViewFile.Split(",", StringSplitOptions.None) : new string[0]
                                 }),
                                 ListComment = _context.CardCommentLists.Where(x => x.CardCode == a.CardCode && x.Flag == false).Select(y => new
                                 {
                                     y.Id,
                                     y.MemberId,
                                     y.CmtContent,
                                     CreatedTime = y.CreatedTime.Value.ToString("HH:mm dd/MM/yyyy"),
                                 }),
                             }).First();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListUserFile(int Id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.CardAttachments.FirstOrDefault(x => x.Id == Id && !x.Flag);
                if (query != null)
                {
                    var listPermission = !string.IsNullOrEmpty(query.ListPermissionViewFile) ? query.ListPermissionViewFile.Split(",", StringSplitOptions.None) : new string[0];
                    msg.Object = from a in _context.Users
                                 join b in listPermission on a.Id equals b
                                 select new
                                 {
                                     a.Id,
                                     a.UserName,
                                     a.GivenName
                                 };
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListUserCard(string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == CardCode && !x.IsDeleted);
                if (query != null)
                {
                    var listuser = !string.IsNullOrEmpty(query.LstUser) ? query.LstUser.Split(",", StringSplitOptions.None) : new string[0];

                    msg.Object = from a in _context.Users
                                 join b in listuser on a.Id equals b
                                 select new
                                 {
                                     a.Id,
                                     a.UserName,
                                     a.GivenName
                                 };
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateListPermissionViewFile(int Id, string ListPermissionViewFile)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CardAttachments.FirstOrDefault(x => x.Id == Id && !x.Flag);
                if (data != null)
                {
                    data.ListPermissionViewFile = ListPermissionViewFile;
                    _context.CardAttachments.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Cập nhập thành công!";
                }
                else
                {
                    msg.Title = "Có lỗi khi lấy dữ liệu!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateCard([FromBody]WorkOsCardCustomMobile obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //update card
                //var card = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == obj.CardCode);
                //if (card != null)
                //{
                //    card.Progress = obj.Progress;
                //}


                var checkList = _context.CardItemChecks.FirstOrDefault(x => x.ChkListCode == obj.ChkListCode);
                if (checkList != null)
                {
                    checkList.Percent = int.Parse(obj.Progress.ToString());
                }
                //add card sub item
                var listSubitemNew = obj.ListSubitem.Where(x => x.Id < 0);
                if (listSubitemNew.Any())
                {
                    foreach (var item in listSubitemNew)
                    {
                        var subitem = new CardSubitemCheck
                        {
                            ChkListCode = obj.ChkListCode,
                            Title = item.Title,
                            Approve = item.Approve,
                            Approver = item.Approver,
                            ApprovedTime = item.ApprovedTime,
                            Completed = item.Completed,
                            CompletedTime = item.CompletedTime,
                        };
                        _context.CardSubitemChecks.Add(subitem);
                    }
                }
                var listSubItem = obj.ListSubitem.Where(x => x.Id > 0);
                if (listSubItem.Any())
                {
                    foreach (var item in listSubItem)
                    {
                        var subItem = _context.CardSubitemChecks.FirstOrDefault(x => x.Id == item.Id);
                        subItem.Approve = item.Approve;
                        _context.CardSubitemChecks.Update(subItem);
                    }
                }
                if (obj.ListDeleteSubitem.Any())
                {
                    var listDelete = _context.CardSubitemChecks.Where(x => obj.ListDeleteSubitem.Any(y => x.Id == y));
                    if (listDelete.Any())
                    {
                        _context.CardSubitemChecks.RemoveRange(listDelete);
                    }
                }
                _context.CardSubitemChecks.Load();
                _cardService.UpdatePercentParentSubItem(obj.ChkListCode);
                //update card note
                var listNoteNew = obj.ListComment.Where(x => x.Id < 0);
                if (listNoteNew.Any())
                {
                    foreach (var item in listNoteNew)
                    {
                        var comment = new CardCommentList
                        {
                            CardCode = obj.CardCode,
                            CmtId = "COMMENT_" + obj.CardCode + "_" + (_context.CardCommentLists.Count() > 0 ? _context.CardCommentLists.Last().Id + 1 : 0),
                            CmtContent = item.CmtContent,
                            MemberId = item.MemberId,
                            CreatedTime = DateTime.Now,
                        };
                        _context.CardCommentLists.Add(comment);
                    }
                }
                if (obj.ListDeleteComment.Any())
                {
                    var listDeleteComent = _context.CardCommentLists.Where(x => obj.ListDeleteComment.Any(y => x.Id == y));
                    if (listDeleteComent.Any())
                    {
                        _context.CardCommentLists.RemoveRange(listDeleteComent);
                    }
                }
                //update file
                var listFileNew = obj.ListAttachment.Where(x => x.Id < 0);
                if (listFileNew.Any())
                {
                    foreach (var item in listFileNew)
                    {
                        var file = new CardAttachment
                        {
                            CardCode = obj.CardCode,
                            FileCode = "ATTACHMENT_" + obj.CardCode + "_" + (_context.CardAttachments.Count() > 0 ? _context.CardAttachments.Last().Id + 1 : 0),
                            MemberId = item.MemberId,
                            CreatedTime = DateTime.Now,
                            FileName = item.FileName,
                            FileUrl = item.FileUrl,
                        };
                        _context.CardAttachments.Add(file);
                    }
                }
                if (obj.ListDeleteAttachment.Any())
                {
                    var listDeleteAttachment = _context.CardAttachments.Where(x => obj.ListDeleteAttachment.Any(y => x.Id == y));
                    if (listDeleteAttachment.Any())
                    {
                        _context.CardAttachments.RemoveRange(listDeleteAttachment);
                    }
                }

                _context.SaveChanges();
                msg.Title = "Lưu lại thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi cập nhập!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetCardActivityByUser(string cardCode, string userId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var actionView = _context.CardUserActivitys.FirstOrDefault(x => x.UserId == userId && x.CardCode == cardCode && x.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review));
                if (actionView == null)
                {
                    var activity = new CardUserActivity
                    {
                        UserId = userId,
                        CardCode = cardCode,
                        Action = EnumHelper<CardAction>.GetDisplayValue(CardAction.Review),
                        IsCheck = true,
                        FromDevice = "Mobile",
                        CreatedTime = DateTime.Now
                    };
                    _context.CardUserActivitys.Add(activity);
                    _context.SaveChanges();
                }
                var actionReject = _context.CardUserActivitys.Where(x => x.UserId == userId && x.CardCode == cardCode && x.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Reject)).MaxBy(x => x.CreatedTime);
                var actionAcceipt = _context.CardUserActivitys.Where(x => x.UserId == userId && x.CardCode == cardCode && x.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Accept)).MaxBy(x => x.CreatedTime);
                msg.Object = new[]
                {
                new
                {
                    Name= CardAction.Review.DescriptionAttr(),
                    Value= CardAction.Review.GetHashCode(),
                    Date = actionView !=null ? actionView.CreatedTime.ToString("dd/MM/yyyy"): DateTime.Now.ToString("dd/MM/yyyy"),
                    Time = actionView != null ? actionView.CreatedTime.ToString("hh:mm:ss") : DateTime.Now.ToString("hh:mm:ss"),
                    IsCheck = true,
                },
                 new
                {
                    Name= CardAction.Reject.DescriptionAttr(),
                    Value = CardAction.Reject.GetHashCode(),
                    Date = actionReject != null ? actionReject.CreatedTime.ToString("dd/MM/yyyy") : DateTime.Now.ToString("dd/MM/yyyy"),
                    Time = actionReject != null ? actionReject.CreatedTime.ToString("hh:mm:ss") : DateTime.Now.ToString("hh:mm:ss"),
                    IsCheck = actionReject != null ? actionReject.IsCheck : false,
                },
                new
                {
                    Name= CardAction.Accept.DescriptionAttr(),
                    Value = CardAction.Accept.GetHashCode(),
                    Date = actionAcceipt != null ? actionAcceipt.CreatedTime.ToString("dd/MM/yyyy") : DateTime.Now.ToString("dd/MM/yyyy"),
                    Time = actionAcceipt != null ? actionAcceipt.CreatedTime.ToString("hh:mm:ss") : DateTime.Now.ToString("hh:mm:ss"),
                    IsCheck = actionAcceipt != null ? actionAcceipt.IsCheck : false,
                }};
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertCardActivity(string cardCode, int value, bool isCheck, string device, string userId)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var actionText = "";
                if (value == CardAction.Review.GetHashCode())
                {
                    actionText = EnumHelper<CardAction>.GetDisplayValue(CardAction.Review);
                }
                else if (value == CardAction.Reject.GetHashCode())
                {
                    actionText = EnumHelper<CardAction>.GetDisplayValue(CardAction.Reject);
                }
                else if (value == CardAction.Accept.GetHashCode())
                {
                    actionText = EnumHelper<CardAction>.GetDisplayValue(CardAction.Accept);
                }
                if (actionText == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review))
                {
                    var existActivity = _context.CardUserActivitys.FirstOrDefault(x => x.CardCode == cardCode && x.UserId == userId && x.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review));
                    if (existActivity != null)
                    {
                        msg.Error = true;
                        msg.Title = "Bạn đã xem!";
                        return Json(msg);
                    }
                }
                if (isCheck)
                {
                    var maxActionOther = _context.CardUserActivitys.Where(x => x.UserId == userId && x.CardCode == cardCode && x.Action != EnumHelper<CardAction>.GetDisplayValue(CardAction.Review) && x.Action != actionText).MaxBy(x => x.CreatedTime);
                    if (maxActionOther != null)
                    {
                        maxActionOther.IsCheck = false;
                    }
                }

                var activity = new CardUserActivity
                {
                    UserId = userId,
                    CardCode = cardCode,
                    Action = actionText,
                    IsCheck = isCheck,
                    FromDevice = device,
                    CreatedTime = DateTime.Now
                };
                if (value == 1)
                {
                    RemoveUserReject(cardCode, userId);
                };
                _context.CardUserActivitys.Add(activity);
                _context.SaveChanges();
                msg.Object = new
                {
                    Date = activity.CreatedTime.ToString("dd/MM/yyyy"),
                    Time = activity.CreatedTime.ToString("HH:mm:ss"),
                };
                msg.Title = "Cập nhập thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        [NonAction]
        public void RemoveUserReject(string cardCode, string userId)
        {
            var query = (from a in _context.CardMappings
                         join b in _context.Users on a.UserId equals b.Id
                         where a.CardCode == cardCode
                         select new
                         {
                             a.Id,
                             a.UserId,
                             b.GivenName,
                             a.CreatedTime,
                             a.Responsibility
                         });
            foreach (var item in query)
            {
                if (item.UserId == userId)
                {
                    var mapping = _context.CardMappings.FirstOrDefault(x => x.Id == item.Id && x.CardCode == cardCode);
                    _context.CardMappings.Remove(mapping);
                    break;
                }
            }
            var card = _context.WORKOSCards.FirstOrDefault(x => !x.IsDeleted && x.Status != "TRASH" && x.CardCode == cardCode);
            var listUser = !string.IsNullOrEmpty(card.LstUser) ? card.LstUser.Split(",", StringSplitOptions.None) : new string[0];
            var lstUser = new List<string>(listUser);
            foreach (var item in lstUser)
            {
                if (item == userId)
                {
                    lstUser.Remove(item);
                    break;
                }
            }
            card.LstUser = lstUser != null && lstUser.Any() ? string.Join(",", lstUser) : null;
        }
        [HttpPost]
        public JsonResult GetLevelsJobCard()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.AssetCode.Equals("CARDJOB") && x.Group.Equals("LEVEL") && x.IsDeleted == false)
                        .Select(x => new { Code = x.CodeSet, Value = x.ValueSet }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetCardDetail(string CardCode, string userId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.WORKOSCards.FirstOrDefault(x => x.CardCode.Equals(CardCode));
                var data = _context.WORKOSCards.FirstOrDefault(x => x.CardCode.Equals(CardCode));
                data.ListUserView += ";" + userId;
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetObjTypeJC()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.JcObjectTypes.Where(x => !x.IsDeleted).Select(x => new { Code = x.ObjTypeCode, Name = x.ObjTypeName });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetRelative()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == "OBJ_RELATIVE" && x.IsDeleted == false);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetObjFromObjType(string code)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                List<ObjTemp> listTemp = new List<ObjTemp>();
                msg.Object = GetListObjTemp(code);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetObjectRelative(string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = (from a in _context.JcObjectTypes
                            join b in _context.JcObjectIdRelatives on a.ObjTypeCode equals b.ObjTypeCode
                            where !a.IsDeleted && !b.IsDeleted && b.CardCode == CardCode
                            select new
                            {
                                Sql = a.ScriptSQL,
                                Code = a.ObjTypeCode
                            }).DistinctBy(x => x.Code).ToList();


                List<ObjTempRela> listTemp = new List<ObjTempRela>();

                using (var command = _context.Database.GetDbConnection().CreateCommand())
                {
                    _context.Database.OpenConnection();
                    foreach (var item in data)
                    {
                        command.CommandText = item.Sql;
                        using (var result = command.ExecuteReader())
                        {
                            while (result.Read())
                            {
                                if (result != null)
                                {
                                    if (item.Code == "CONTRACT_PO")
                                    {
                                        var objTemp = new ObjTempRela
                                        {
                                            ID = result.GetInt32(0),
                                            Code = result.GetString(4),
                                            Name = result.GetString(3)
                                        };
                                        if (objTemp != null)
                                        {
                                            listTemp.Add(objTemp);
                                        }
                                    }
                                    else
                                    {
                                        var objTemp = new ObjTempRela
                                        {
                                            ID = result.GetInt32(0),
                                            Code = result.GetString(1),
                                            Name = result.GetString(2)
                                        };
                                        if (objTemp != null)
                                        {
                                            listTemp.Add(objTemp);
                                        }
                                    }

                                }

                            }
                        }
                    }
                    _context.Database.CloseConnection();
                }
                msg.Object = (from a in _context.JcObjectIdRelatives
                              join b in listTemp on a.ObjID equals b.Code
                              join c in _context.JcObjectTypes on a.ObjTypeCode equals c.ObjTypeCode
                              where a.CardCode == CardCode && !a.IsDeleted
                              select new
                              {
                                  ID = a.ID,
                                  ObjName = b.Name,
                                  ObjTypeName = c.ObjTypeName,
                                  ObjTypeCode = c.ObjTypeCode,
                                  ObjID = b.Code,
                                  RelativeCode = a.Relative,
                                  RelativeName = _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(a.Relative)).ValueSet,
                                  Weight = a.Weight.ToString() != null ? a.Weight.ToString() : "",
                                  IdObjTemp = b.ID
                              }).DistinctBy(x => new { x.ObjTypeCode, x.RelativeCode, x.ObjID });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [NonAction]
        public List<ObjTemp> GetListObjTemp(string code)
        {
            var query = _context.JcObjectTypes.FirstOrDefault(x => x.ObjTypeCode.Equals(code) && !x.IsDeleted);
            List<ObjTemp> listTemp = new List<ObjTemp>();
            using (var command = _context.Database.GetDbConnection().CreateCommand())
            {
                command.CommandText = query.ScriptSQL;
                _context.Database.OpenConnection();
                using (var result = command.ExecuteReader())
                {
                    while (result.Read())
                    {
                        if (result != null)
                        {
                            if (code == "CONTRACT_PO")
                            {
                                var objTemp = new ObjTemp
                                {
                                    Code = result.GetString(4),
                                    Name = result.GetString(3)
                                };
                                if (objTemp != null)
                                {
                                    listTemp.Add(objTemp);
                                }
                            }
                            else
                            {
                                var objTemp = new ObjTemp
                                {
                                    Code = result.GetString(1),
                                    Name = result.GetString(2)
                                };
                                if (objTemp != null)
                                {
                                    listTemp.Add(objTemp);
                                }
                            }
                        }

                    }
                }
                _context.Database.CloseConnection();
            }
            return listTemp;
        }
        [HttpPost]
        public JsonResult InsertJcObjectIdRelative(string ObjTypeCode, string ObjID, string Relative, string CardCode, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.JcObjectIdRelatives.FirstOrDefault(x => !x.IsDeleted && x.ObjTypeCode == ObjTypeCode && x.ObjID == ObjID && x.CardCode == CardCode);
                if (data != null)
                {
                    msg.Error = true;
                    msg.Title = "Đối tượng đã tồn tại!";
                }
                else
                {
                    var objRelative = new JcObjectIdRelative
                    {
                        CardCode = CardCode,
                        ObjTypeCode = ObjTypeCode,
                        ObjID = ObjID,
                        Relative = Relative,
                        CreatedBy = UserName,
                        CreatedTime = DateTime.Now
                    };
                    _context.JcObjectIdRelatives.Add(objRelative);
                    _context.SaveChanges();
                    msg.Title = "Thêm đối tượng thành công";
                }


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteObjectIdRelative(int Id, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.JcObjectIdRelatives.FirstOrDefault(x => x.ID == Id && !x.IsDeleted);
                if (data != null)
                {
                    data.IsDeleted = true;
                    data.DeletedBy = UserName;
                    data.DeletedTime = DateTime.Now;
                    _context.JcObjectIdRelatives.Update(data);
                    msg.Title = "Xóa đối tượng thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Có lỗi khi lấy dữ liệu!";
                }
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertDocument(string MemberId, string FileName, string FileUrl, string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var CardJob = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == CardCode && !x.IsDeleted);
                var file = new CardAttachment
                {
                    CardCode = CardCode,
                    FileCode = "ATTACHMENT_" + CardCode + "_" + (_context.CardAttachments.Count() > 0 ? _context.CardAttachments.Last().Id + 1 : 0),
                    MemberId = MemberId,
                    CreatedTime = DateTime.Now,
                    FileName = FileName,
                    FileUrl = FileUrl,
                    ListPermissionViewFile = CardJob.LstUser
                };
                _context.CardAttachments.Add(file);
                _context.SaveChanges();
                msg.Title = "Thêm tài liệu thành công";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteDocument(int Id, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CardAttachments.FirstOrDefault(x => x.Id == Id);
                _context.CardAttachments.RemoveRange(data);
                _context.SaveChanges();
                msg.Title = "Xóa tài liệu thành công!";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListBoard()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.WORKOSBoards.Where(x => x.IsDeleted == false).Select(x => new
                {
                    x.BoardID,
                    x.BoardCode,
                    x.BoardName,
                    x.BoardType,
                    BoardTypeText = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.BoardType).ValueSet ?? "",
                    OrderBoardType = (x.BoardType == "BOARD_REPEAT") ? 1 : x.BoardType == "BOARD_PROJECT" ? 2 : 3,
                    x.Avatar,
                    x.BackgroundColor,
                    x.BackgroundImage,
                    x.BeginTime,
                    x.Completed,
                    x.Cost,
                    x.Deadline,
                    x.LocationGps,
                    x.LocationText,
                    x.Department,
                    DepartmentName = _context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == x.Department && !y.IsDeleted).Title,
                    x.Branch,
                    BranchName = _context.AdOrganizations.FirstOrDefault(y => y.OrgAddonCode == x.Branch).OrgName,
                }).OrderBy(x => x.OrderBoardType).AsNoTracking();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListOsList(string BoardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.WORKOSLists.Where(x => x.BoardCode.Equals(BoardCode) && x.IsDeleted == false).OrderBy(x => x.Order);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertAddressJobCard(string CardCode, string LocationText, string LocationGps, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                WORKOSAddressCard insertAddress = new WORKOSAddressCard
                {
                    CardCode = CardCode,
                    LocationText = LocationText,
                    LocationGps = LocationGps,
                    CreatedBy = UserName,
                    CreatedTime = DateTime.Now
                };
                _context.WORKOSAddressCards.Add(insertAddress);
                _context.SaveChanges();
                msg.Title = "Thêm địa chỉ thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteAddressJobCard(int Id, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.WORKOSAddressCards.FirstOrDefault(x => x.Id == Id);
                data.IsDeleted = true;
                data.DeletedBy = UserName;
                data.DeletedTime = DateTime.Now;
                _context.WORKOSAddressCards.Update(data);
                _context.SaveChanges();
                msg.Title = "Xóa địa điểm thành công!";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetLisAddressJobCard(string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.WORKOSAddressCards.Where(x => x.CardCode.Equals(CardCode) && x.IsDeleted == false);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public class GroupUserModel
        {
            public string checkId { get; set; }
            public string Code { get; set; }
            public string Name { get; set; }
            public int Type { get; set; }
            public string Group { get; set; }
            public string ViewName { get; set; }
        }
        [HttpPost]
        public JsonResult GetListGroupUser()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.AdGroupUsers
                              where a.IsEnabled == true
                              select new GroupUserModel
                              {
                                  checkId = a.GroupUserCode + "_" + 1,
                                  Code = a.GroupUserCode,
                                  Name = a.Title,
                                  Type = 1,
                                  Group = "Nhóm",
                                  ViewName = a.Title + "- Nhóm"
                              }).Union(
                                from b in _context.AdDepartments
                                where b.IsEnabled == true
                                select new GroupUserModel
                                {
                                    checkId = b.DepartmentCode + "_" + 2,
                                    Code = b.DepartmentCode,
                                    Name = b.Title,
                                    Type = 2,
                                    Group = "Phòng ban",
                                    ViewName = b.Title + "- Phòng ban"
                                });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetListUserGroup(string Code, int Type)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (Type == 1)
                {
                    msg.Object = from a in _context.AdUserInGroups
                                 join b in _context.Users on a.UserId equals b.Id
                                 where a.GroupUserCode == Code
                                 select new
                                 {
                                     UserId = b.Id,
                                     b.GivenName,
                                     DepartmentsId = b.DepartmentId,
                                 };
                }
                else if (Type == 2)
                {
                    msg.Object = (from a in _context.AdDepartments
                                  join b in _context.Users on a.DepartmentCode equals b.DepartmentId
                                  where a.DepartmentCode == Code
                                  && b.Active == true
                                  select new
                                  {
                                      UserId = b.Id,
                                      b.GivenName,
                                      DepartmentsId = b.DepartmentId,
                                  });
                }
                else
                {
                    msg.Object = _context.Users.Where(x => x.Active == true && x.UserName != "admin").Select(x => new { DepartmentsId = x.DepartmentId, UserId = x.Id, x.GivenName, x.Picture, x.UserName, GroupUserCode = x.AdUserInGroups.Select(y => y.GroupUserCode).FirstOrDefault() }).AsNoTracking();

                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public class ViewGroupUserModel
        {
            public string Id { get; set; }
            public string Code { get; set; }
            public string Name { get; set; }
            public string GivenName { get; set; }
            public string Responsibility { get; set; }
            public string ViewName { get; set; }
            public string DepartmentsId { get; set; }
        }
        [HttpPost]
        public JsonResult GetTeamAndGroupUserAssign(string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.CardMappings
                              where a.CardCode.Equals(CardCode) && (!string.IsNullOrEmpty(a.TeamCode) || !string.IsNullOrEmpty(a.GroupUserCode))
                              select new ViewGroupUserModel
                              {
                                  Id = a.Id.ToString(),
                                  Code = !string.IsNullOrEmpty(a.TeamCode) ? a.TeamCode : a.GroupUserCode,
                                  Name = string.IsNullOrEmpty(a.TeamCode) ? (_context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == a.GroupUserCode).Title ?? "") : _context.AdGroupUsers.FirstOrDefault(y => y.GroupUserCode == a.TeamCode).Title,
                                  Responsibility = a.Responsibility,
                                  GivenName = "",
                                  ViewName = string.IsNullOrEmpty(a.TeamCode) ? (_context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == a.GroupUserCode).Title ?? "") : _context.AdGroupUsers.FirstOrDefault(y => y.GroupUserCode == a.TeamCode).Title,
                                  DepartmentsId = !string.IsNullOrEmpty(a.GroupUserCode) ? a.GroupUserCode : "",
                              }).Union(
                                        from b in _context.CardMappings
                                        join c in _context.Users on b.UserId equals c.Id
                                        where b.CardCode == CardCode
                                        select new ViewGroupUserModel
                                        {
                                            Id = b.Id.ToString(),
                                            Code = "",
                                            Name = "",
                                            Responsibility = b.Responsibility,
                                            GivenName = c.GivenName,
                                            ViewName = c.GivenName,
                                            DepartmentsId = c.DepartmentId,
                                        }
                                );

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListUserTeamAndGroup(string CardCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CardMappings.Where(x => x.CardCode.Equals(CardCode) && (!string.IsNullOrEmpty(x.TeamCode) || !string.IsNullOrEmpty(x.GroupUserCode))).Select(x => new
                {
                    x.Id,
                    Code = !string.IsNullOrEmpty(x.TeamCode) ? x.TeamCode : x.GroupUserCode,
                    Name = string.IsNullOrEmpty(x.TeamCode) ? (_context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == x.GroupUserCode).Title ?? "") : _context.AdGroupUsers.FirstOrDefault(y => y.GroupUserCode == x.TeamCode).Title,
                    Type = !string.IsNullOrEmpty(x.TeamCode) ? 1 : 2,
                    x.Responsibility
                });
                msg.Object = ((from a in data
                               join b in _context.AdUserInGroups on a.Code equals b.GroupUserCode
                               join c in _context.Users on b.UserId equals c.Id
                               where a.Type == 1
                               select new
                               {
                                   a.Id,
                                   b.UserId,
                                   c.GivenName,
                                   a.Responsibility
                               }).Union(from a in data
                                        join b in _context.AdUserDepartments on a.Code equals b.DepartmentCode
                                        join c in _context.Users on b.UserId equals c.Id
                                        where a.Type == 2
                                        select new
                                        {
                                            a.Id,
                                            b.UserId,
                                            c.GivenName,
                                            a.Responsibility
                                        }).Union(from a in _context.CardMappings
                                                 join b in _context.Users on a.UserId equals b.Id
                                                 where a.CardCode == CardCode
                                                 select new
                                                 {
                                                     a.Id,
                                                     a.UserId,
                                                     b.GivenName,
                                                     a.Responsibility
                                                 })).DistinctBy(x => x.UserId);

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteTeamAndGroupUse(string Id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CardMappings.FirstOrDefault(x => x.Id.ToString() == Id);
                if (data != null)
                {
                    if (data.UserId != null)
                    {
                        var dataCardJob = _context.WORKOSCards.FirstOrDefault(x => !x.IsDeleted && x.Status != "TRASH" && x.CardCode == data.CardCode);
                        if (dataCardJob != null)
                        {
                            dataCardJob.LstUser = data.UserId != null ? string.Join(",", data.UserId) : null;
                            var dataFile = _context.CardAttachments.Where(x => x.CardCode == dataCardJob.CardCode);
                            if (dataFile.Count() > 0)
                            {
                                foreach (var item in dataFile)
                                {
                                    var listUserFile = !string.IsNullOrEmpty(item.ListPermissionViewFile) ? item.ListPermissionViewFile.Split(",", StringSplitOptions.None) : new string[0];
                                    var lstUserFile = new List<string>(listUserFile);
                                    foreach (var user in lstUserFile)
                                    {
                                        if (user == data.UserId)
                                        {
                                            lstUserFile.Remove(user);
                                            break;
                                        }
                                    }
                                    item.ListPermissionViewFile = lstUserFile != null ? string.Join(",", lstUserFile) : null;
                                    _context.CardAttachments.Update(item);
                                }
                            }
                        }
                    }
                    else
                    {
                        var card = _context.WORKOSCards.FirstOrDefault(x => !x.IsDeleted && x.Status != "TRASH" && x.CardCode == data.CardCode);
                        var listUser = !string.IsNullOrEmpty(card.LstUser) ? card.LstUser.Split(",", StringSplitOptions.None) : new string[0];
                        var lstUser = new List<string>(listUser);
                        var dataFile = _context.CardAttachments.Where(x => x.CardCode == card.CardCode);
                        if (data.TeamCode != null)
                        {
                            var lstUserTeam = GetMemberInGround(data.TeamCode);
                            foreach (var userTeam in lstUserTeam)
                            {
                                foreach (var user in lstUser)
                                {
                                    if (user == userTeam.UserId)
                                    {
                                        lstUser.Remove(user);
                                        break;
                                    }
                                }
                                if (dataFile.Count() > 0)
                                {
                                    foreach (var item in dataFile)
                                    {

                                        var listUserFile = !string.IsNullOrEmpty(item.ListPermissionViewFile) ? item.ListPermissionViewFile.Split(",", StringSplitOptions.None) : new string[0];
                                        var lstUserFile = new List<string>(listUserFile);
                                        foreach (var userFile in lstUserFile)
                                        {
                                            if (userFile == userTeam.UserId)
                                            {
                                                lstUserFile.Remove(userFile);
                                                break;
                                            }
                                        }
                                        item.ListPermissionViewFile = null;
                                        item.ListPermissionViewFile = lstUserFile != null ? string.Join(",", lstUserFile) : null;
                                        _context.CardAttachments.Update(item);
                                    }
                                }

                            }
                        }
                        if (data.GroupUserCode != null)
                        {
                            var lstUserTeam = GetMemberInDepartment(data.TeamCode);
                            foreach (var userTeam in lstUserTeam)
                            {
                                foreach (var user in lstUser)
                                {
                                    if (user == userTeam.UserId)
                                    {
                                        lstUser.Remove(user);
                                        break;
                                    }
                                }
                                if (dataFile.Count() > 0)
                                {
                                    foreach (var item in dataFile)
                                    {

                                        var listUserFile = !string.IsNullOrEmpty(item.ListPermissionViewFile) ? item.ListPermissionViewFile.Split(",", StringSplitOptions.None) : new string[0];
                                        var lstUserFile = new List<string>(listUserFile);
                                        foreach (var userFile in lstUserFile)
                                        {
                                            if (userFile == userTeam.UserId)
                                            {
                                                lstUserFile.Remove(userFile);
                                                break;
                                            }
                                        }
                                        item.ListPermissionViewFile = null;
                                        item.ListPermissionViewFile = lstUserFile != null ? string.Join(",", lstUserFile) : null;
                                        _context.CardAttachments.Update(item);
                                    }
                                }

                            }

                        }
                        //foreach (var item in lstUser)
                        //{
                        //    if (item == data.UserId)
                        //    {
                        //        lstUser.Remove(item);
                        //        break;
                        //    }
                        //}
                        card.LstUser = lstUser != null && lstUser.Any() ? string.Join(",", lstUser) : null;

                    }
                    _context.CardMappings.RemoveRange(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành viên thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy thành viên!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult AssignGroupOrDepartment(string CardCode, int Type, string Code)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var lstUser = new List<UserIdModel>();
                var card = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == CardCode);
                var list = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == card.ListCode);
                var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == list.BoardCode);
                var dataFile = _context.CardAttachments.Where(x => x.CardCode == CardCode);
                var member = new CardMapping()
                {
                    BoardCode = board.BoardCode,
                    ListCode = card.ListCode,
                    CardCode = CardCode,
                    TeamCode = Type == 1 ? Code : null,
                    GroupUserCode = Type == 2 ? Code : null,
                    CreatedTime = DateTime.Now,
                    CreatedBy = ESEIM.AppContext.UserName,
                    Responsibility = "ROLE_STAFF",
                };
                if (Type == 2)
                {
                    lstUser = GetMemberInDepartment(Code);
                }
                if (Type == 1)
                {
                    lstUser = GetMemberInGround(Code);
                }
                if (lstUser.Count() != 0)
                {
                    foreach (var item in lstUser)
                    {
                        card.LstUser = card.LstUser + "," + item.UserId;
                        if (dataFile.Count() > 0)
                        {
                            foreach (var itemFile in dataFile)
                            {
                                itemFile.ListPermissionViewFile = itemFile.ListPermissionViewFile + "," + item.UserId;
                                _context.CardAttachments.Update(itemFile);
                            }
                        }
                    }
                }
                _context.CardMappings.Add(member);
                _context.SaveChanges();
                msg.Title = "Thêm nhóm/phòng ban thành công";

                var project = _context.CardMappings.FirstOrDefault(x => x.CardCode == card.CardCode && !string.IsNullOrEmpty(x.ProjectCode));
                //SendPushNotification(lstUser, string.Format("Bạn có công việc mới: {0}", card.CardName), new
                //{
                //    board.BoardCode,
                //    board.BoardName,
                //    list.ListCode,
                //    card.CardCode,
                //    card.CardName,
                //    card.BeginTime,
                //    card.EndTime,
                //    card.CardID,
                //    card.CardLevel,
                //    card.Deadline,
                //    card.Currency,
                //    card.Completed,
                //    card.Cost,
                //    Type = board.BoardType == "BOARD_REPEAT" ? "REPEAT" : board.BoardType == "BOARD_PROJECT" ? "PROJECT" : "BUILDING",
                //    ProjectCode = project != null ? project.ProjectCode : "",
                //    ProjectName = project != null ? _context.Projects.FirstOrDefault(x => x.ProjectCode == project.ProjectCode && x.FlagDeleted == false).ProjectTitle ?? "" : "",
                //});
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult AssignMember(string cardCode, string userId, string Responsibility, string UserName)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {

                if (CheckIsMemberExist(userId, cardCode, Responsibility) == true)
                {
                    msg.Error = true;
                    msg.Title = "Người dùng đã được thêm";
                }
                else
                {
                    var lstUser = new List<UserIdModel>();
                    var leader = CheckLeader(userId);
                    var card = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == cardCode);
                    var list = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == card.ListCode);
                    var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == list.BoardCode);
                    if (leader != null)
                    {
                        if (leader.IsLeader == true)
                        {
                            var member = new CardMapping()
                            {
                                BoardCode = board.BoardCode,
                                ListCode = card.ListCode,
                                CardCode = cardCode,
                                UserId = userId,
                                Responsibility = Responsibility,
                                CreatedTime = DateTime.Now,
                                CreatedBy = UserName,
                            };
                            var UserList = new UserIdModel
                            {
                                UserId = userId
                            };
                            //card.LstUser = string.Join(",", card.LstUser.Select(x => UserId)) : null;
                            card.LstUser = card.LstUser + "," + userId;
                            _context.CardMappings.Add(member);
                            lstUser.Add(UserList);
                            var dataFile = _context.CardAttachments.Where(x => x.CardCode == cardCode);
                            if (dataFile.Count() > 0)
                            {
                                foreach (var item in dataFile)
                                {
                                    item.ListPermissionViewFile = item.ListPermissionViewFile + "," + userId;
                                    _context.CardAttachments.Update(item);
                                }
                            }
                        }
                        else
                        {
                            var member = new CardMapping()
                            {
                                BoardCode = board.BoardCode,
                                ListCode = card.ListCode,
                                CardCode = cardCode,
                                UserId = userId,
                                Responsibility = Responsibility,
                                CreatedTime = DateTime.Now,
                                CreatedBy = UserName,
                            };
                            card.LstUser = card.LstUser + "," + userId;
                            _context.CardMappings.Add(member);
                            var dataFile = _context.CardAttachments.Where(x => x.CardCode == cardCode);
                            if (dataFile.Count() > 0)
                            {
                                foreach (var item in dataFile)
                                {
                                    item.ListPermissionViewFile = item.ListPermissionViewFile + "," + userId;
                                    _context.CardAttachments.Update(item);
                                }
                            }
                            var UserList = new UserIdModel
                            {
                                UserId = userId
                            };
                            lstUser.Add(UserList);
                            if (leader.userAssign != null)
                            {
                                if (CheckIsMemberExist(leader.userAssign.Id, cardCode, "ROLE_LEADER_ACCEPTED") == false)
                                {
                                    var memberLeader = new CardMapping
                                    {
                                        BoardCode = board.BoardCode,
                                        ListCode = card.ListCode,
                                        CardCode = cardCode,
                                        UserId = leader.userAssign.Id,
                                        Responsibility = "ROLE_LEADER_ACCEPTED",
                                        CreatedTime = DateTime.Now,
                                        CreatedBy = UserName,
                                    };
                                    card.LstUser = card.LstUser + "," + leader.userAssign.Id;
                                    _context.CardMappings.Add(memberLeader);
                                    var UserListLeader = new UserIdModel
                                    {
                                        UserId = leader.userAssign.Id
                                    };
                                    lstUser.Add(UserListLeader);
                                    if (dataFile.Count() > 0)
                                    {
                                        foreach (var item in dataFile)
                                        {
                                            item.ListPermissionViewFile = item.ListPermissionViewFile + "," + leader.userAssign.Id;
                                            _context.CardAttachments.Update(item);
                                        }
                                    }
                                }

                            }
                        }
                        //_context.WORKOSCards.Update(card);

                    }
                    else
                    {
                        var member = new CardMapping()
                        {
                            BoardCode = board.BoardCode,
                            ListCode = card.ListCode,
                            CardCode = cardCode,
                            UserId = userId,
                            Responsibility = Responsibility,
                            CreatedTime = DateTime.Now,
                            CreatedBy = UserName,
                        };
                        card.LstUser = card.LstUser + "," + userId;
                        _context.CardMappings.Add(member);
                        var UserList = new UserIdModel
                        {
                            UserId = userId
                        };
                        lstUser.Add(UserList);
                        var dataFile = _context.CardAttachments.Where(x => x.CardCode == cardCode);
                        if (dataFile.Count() > 0)
                        {
                            foreach (var item in dataFile)
                            {
                                item.ListPermissionViewFile = item.ListPermissionViewFile + "," + userId;
                                _context.CardAttachments.Update(item);
                            }
                        }
                    }

                    _context.SaveChanges();
                    msg.Title = "Thêm người dùng thành công";
                    var project = _context.CardMappings.FirstOrDefault(x => x.CardCode == card.CardCode && !string.IsNullOrEmpty(x.ProjectCode));
                    //SendPushNotification(lstUser, string.Format("Bạn có công việc mới: {0}", card.CardName), new
                    //{
                    //    board.BoardCode,
                    //    board.BoardName,
                    //    list.ListCode,
                    //    card.CardCode,
                    //    card.CardName,
                    //    card.BeginTime,
                    //    card.EndTime,
                    //    card.CardID,
                    //    card.CardLevel,
                    //    card.Deadline,
                    //    card.Currency,
                    //    card.Completed,
                    //    card.Cost,
                    //    Type = board.BoardType == "BOARD_REPEAT" ? "REPEAT" : board.BoardType == "BOARD_PROJECT" ? "PROJECT" : "BUILDING",
                    //    ProjectCode = project != null ? project.ProjectCode : "",
                    //    ProjectName = project != null ? _context.Projects.FirstOrDefault(x => x.ProjectCode == project.ProjectCode && x.FlagDeleted == false).ProjectTitle ?? "" : "",
                    //});
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        public class UserTempAssign
        {
            public string Id { get; set; }
            public string GivenName { get; set; }
            public string Responsibility { get; set; }
            public string DepartmentId { get; set; }
        }

        [NonAction]
        public UserLeader CheckLeader(string userId)
        {
            bool check = false;
            var user = _context.Users.FirstOrDefault(x => x.Active && x.Id == userId);
            var data = _context.UserRoles.FirstOrDefault(x => x.UserId == userId && x.RoleId == "49b018ad-68af-4625-91fd-2273bb5cf749");
            if (data != null)
            {
                var userAssign = new UserTempAssign
                {
                    Id = user.Id,
                    GivenName = user.GivenName,
                    Responsibility = "",
                    DepartmentId = user.DepartmentId
                };
                check = true;

                return new UserLeader
                {
                    IsLeader = check,
                    userAssign = userAssign
                };
            }
            else
            {
                var userAssign = (from a in _context.Users.Where(x => x.Active && x.DepartmentId == user.DepartmentId)
                                  join b in _context.UserRoles.Where(x => x.RoleId == "49b018ad-68af-4625-91fd-2273bb5cf749") on a.Id equals b.UserId
                                  select new UserTempAssign
                                  {
                                      Id = a.Id,
                                      GivenName = a.GivenName,
                                      Responsibility = "ROLE_LEADER_ACCEPTED",
                                      DepartmentId = a.DepartmentId
                                  }).FirstOrDefault();
                check = false;
                return new UserLeader
                {
                    IsLeader = check,
                    userAssign = userAssign
                };
            }
        }
        [NonAction]
        public bool CheckIsMemberExist(string userId, string cardCode, string Responsibility)
        {
            //var member = _context.CardMappings.FirstOrDefault(x => x.UserId == userId && x.CardCode == cardCode && x.Responsibility == Responsibility);
            var member = _context.CardMappings.FirstOrDefault(x => x.UserId == userId && x.CardCode == cardCode);
            if (member != null)
                return true;
            return false;
        }
        public class UserLeader
        {
            public UserTempAssign userAssign { get; set; }
            public bool IsLeader { get; set; }
        }

        [NonAction]
        public List<UserIdModel> GetMemberInDepartment(string DepartmentCode)
        {
            var listUserInDepartment = from a in _context.AdDepartments.Where(x => x.DepartmentCode == DepartmentCode)
                                       join b in _context.Users on a.DepartmentCode equals b.DepartmentId
                                       select new UserIdModel
                                       {
                                           UserId = b.Id,
                                       };
            return listUserInDepartment.ToList();
        }
        [NonAction]
        public List<UserIdModel> GetMemberInGround(string GroundCode)
        {
            var listUserInDepartment = from a in _context.AdUserInGroups.Where(x => x.GroupUserCode == GroundCode && !x.IsDeleted)
                                       select new UserIdModel
                                       {
                                           UserId = a.UserId,
                                       };
            return listUserInDepartment.ToList();
        }
        [HttpPost]
        public JsonResult AutoGenerateWorkSession()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                msg.Object = "*" + (_context.WORKItemSessions.Count() > 0 ? _context.WORKItemSessions.Max(x => x.Id) + 1 : 1);

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        //xoa workItemActivity
        [HttpPost]
        public JsonResult DeleteWorkItemActivity(int Id, string userName, string workSession, decimal progress)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.WORKItemSessionResults.FirstOrDefault(x => !x.IsDeleted && x.Id == Id);
                if (data != null)
                {
                    if (data.CreatedBy == userName)
                    {
                        data.IsDeleted = true;
                        data.DeletedBy = userName;
                        data.DeletedTime = DateTime.Now;
                        _context.WORKItemSessionResults.Update(data);
                        var Session = _context.WORKItemSessions.FirstOrDefault(y => !y.IsDeleted && y.WorkSession == workSession);
                        Session.Progress = progress;
                        _context.WORKItemSessions.Update(Session);
                        _context.SaveChanges();
                        msg.Title = "Xóa dữ liệu thành công!";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Bạn không được xóa bản ghi này!";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy bản ghi!";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertWorkItem([FromBody] ItemWork item)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                DateTime? startTime = !string.IsNullOrEmpty(item.StartTime) ? DateTime.ParseExact(item.StartTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? endTime = !string.IsNullOrEmpty(item.EndTime) ? DateTime.ParseExact(item.EndTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var staffItemWork = _context.WORKItemSessions.FirstOrDefault(x => x.WorkSession.Equals(item.WorkSession));
                if (staffItemWork == null)
                {
                    string itemWorkList = item.Tags1[0].Code;
                    if (item.Tags1.Count > 0)
                    {
                        foreach (var i in item.Tags1)
                        {
                            var sessionItemChkItem = new SessionItemChkItem
                            {
                                Session = item.WorkSession,
                                ItemType = "1",
                                Item = i.Code,
                                CreatedBy = item.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.SessionItemChkItems.Add(sessionItemChkItem);
                        }
                    }
                    var itemStaff = new WORKItemSession
                    {
                        WorkSession = item.WorkSession,
                        CardCode = item.CardCode,
                        ItemWorkList = itemWorkList,
                        CreatedBy = item.UserName,
                        Progress = item.ProgressFromLeader,
                        CreatedTime = DateTime.Now,
                        ShiftCode = item.ShiftCode
                    };
                    _context.WORKItemSessions.Add(itemStaff);

                    var itemActivity = new WORKItemSessionResult
                    {
                        WorkSession = item.WorkSession,
                        StartTime = startTime,
                        EndTime = endTime,
                        ProgressFromStaff = item.ProgressFromStaff,
                        ProgressFromLeader = item.ProgressFromLeader,
                        CreatedBy = item.UserName,
                        CreatedTime = DateTime.Now,
                        ShiftCode = item.ShiftCode
                    };
                    _context.WORKItemSessionResults.Add(itemActivity);
                    _context.SaveChanges();
                    msg.Title = "Thêm mới thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //lay danh sach WORKItemActivity
        public class viewItemMobileLogin
        {
            public int Id { get; set; }
            public string WorkSession { get; set; }
            public List<SessionItemChkItem> ItemWorkList { get; set; }
            public string Note { get; set; }
            public string Status { get; set; }
            public decimal Progress { get; set; }
            public string Value { get; set; }
            public string UserName { get; set; }
            public string CreatedBy { get; set; }
            public bool CheckItem { get; set; }
            public DateTime? TimeCheckIn { get; set; }
            public List<WorkSessionResult> listItemActivity { get; set; }
        }
        public class WorkSessionResult
        {
            public int Id { get; set; }
            public DateTime? StartTime { get; set; }
            public DateTime? EndTime { get; set; }
            public decimal ProgressFromLeader { get; set; }
            public decimal ProgressFromStaff { get; set; }
            public string CheckTitle { get; set; }
            public string ShiftCode { get; set; }
            public DateTime? ChkInTime { get; set; }
            public DateTime? ChkoutTime { get; set; }
        }
        [HttpPost]
        public JsonResult GetListWorkItem(string CardCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var list = (from a in _context.WORKItemSessions
                            join b in _context.ShiftLogs on a.ShiftCode equals b.ShiftCode
                            where !a.IsDeleted && b.Flag != "DELETED" && b.Flag != "CANCEL" && a.CardCode.Equals(CardCode)
                            select new viewItemMobileLogin
                            {
                                Id = a.Id,
                                WorkSession = a.WorkSession,
                                ItemWorkList = _context.SessionItemChkItems.Where(x => !x.IsDeleted && x.Session == a.WorkSession).ToList(),
                                Note = a.Note,
                                Status = a.Status,
                                Progress = a.Progress,
                                UserName = _context.Users.FirstOrDefault(x => x.UserName.Equals(a.CreatedBy)).GivenName,
                                CreatedBy = a.CreatedBy,
                                CheckItem = false,
                                TimeCheckIn = b.ChkinTime,
                                Value = "",
                                listItemActivity = (from c in _context.WORKItemSessionResults
                                                    join d in _context.SessionItemChkItems on c.WorkSession equals d.Session
                                                    join e in _context.CardItemChecks on d.Item equals e.ChkListCode
                                                    join f in _context.ShiftLogs on a.ShiftCode equals f.ShiftCode
                                                    where c.WorkSession.Equals(a.WorkSession) && c.IsDeleted == false
                                                    select new WorkSessionResult
                                                    {
                                                        Id = c.Id,
                                                        StartTime = c.StartTime,
                                                        EndTime = c.EndTime,
                                                        ProgressFromLeader = c.ProgressFromLeader,
                                                        ProgressFromStaff = c.ProgressFromStaff,
                                                        CheckTitle = e.CheckTitle,
                                                        ShiftCode = c.ShiftCode,
                                                        ChkInTime = f.ChkinTime,
                                                        ChkoutTime = f.ChkoutTime
                                                    }).DistinctBy(x => x.Id).ToList(),
                            }).ToList();
                foreach (var item in list)
                {
                    string value = "";
                    foreach (var i in item.ItemWorkList)
                    {

                        var CardItemChk = _context.CardItemChecks.FirstOrDefault(x => !x.Flag && x.ChkListCode == i.Item);
                        if (CardItemChk != null)
                        {
                            value += CardItemChk.CheckTitle + ", ";
                        }
                    }
                    item.Value = value;
                }

                msg.Object = list.DistinctBy(x => x.WorkSession);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetItemWork(int id)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                msg.Object = from a in _context.WORKItemSessionResults.Where(x => !x.IsDeleted && x.Id == id)
                             join b in _context.WORKItemSessions.Where(x => !x.IsDeleted) on a.WorkSession equals b.WorkSession
                             select new
                             {
                                 a.WorkSession,
                                 ChkListCode = b.ItemWorkList,
                                 StartTime = a.StartTime,
                                 EndTime = a.EndTime,
                                 a.ProgressFromLeader,
                                 a.ProgressFromStaff,
                                 a.ShiftCode,
                                 a.NoteFromLeader,
                                 sltShiftLog = _context.ShiftLogs.FirstOrDefault(x => x.ShiftCode == a.ShiftCode)

                             };

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateWorkItem(string StartTime, string EndTime, string WorkSession, string ShiftCode, string UserName, decimal ProgressFromLeader, decimal ProgressFromStaff, string NoteFromLeader, string UserAssessor)
        {
            var msg = new JMessage();
            try
            {
                DateTime? startTime = !string.IsNullOrEmpty(StartTime) ? DateTime.ParseExact(StartTime, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? endTime = !string.IsNullOrEmpty(EndTime) ? DateTime.ParseExact(EndTime, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture) : (DateTime?)null;
                var workResult = _context.WORKItemSessionResults.FirstOrDefault(x => !x.IsDeleted && x.WorkSession == WorkSession);
                var workSession = _context.WORKItemSessions.FirstOrDefault(x => !x.IsDeleted && x.WorkSession == WorkSession);
                if (workResult != null && workSession != null)
                {
                    workSession.ShiftCode = ShiftCode;
                    workSession.UpdatedBy = UserName;
                    workSession.UpdatedTime = DateTime.Now;
                    _context.WORKItemSessions.Update(workSession);

                    workResult.StartTime = startTime;
                    workResult.EndTime = endTime;
                    workResult.ProgressFromLeader = ProgressFromLeader;
                    workResult.ProgressFromStaff = ProgressFromStaff;
                    workResult.ShiftCode = ShiftCode;
                    workResult.UpdatedBy = UserName;
                    workResult.UpdatedTime = DateTime.Now;
                    workResult.NoteFromLeader = NoteFromLeader;
                    workResult.UserAssessor = UserAssessor;
                    _context.WORKItemSessionResults.Update(workResult);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi cập nhập!";
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateWorkItemAssessor(string WorkSession, decimal ProgressFromLeader, string NoteFromLeader, string UserAssessor)
        {
            var msg = new JMessage();
            try
            {
                var workResult = _context.WORKItemSessionResults.FirstOrDefault(x => !x.IsDeleted && x.WorkSession == WorkSession);
                var workSession = _context.WORKItemSessions.FirstOrDefault(x => !x.IsDeleted && x.WorkSession == WorkSession);
                if (workResult != null && workSession != null)
                {
                    workSession.UpdatedTime = DateTime.Now;
                    _context.WORKItemSessions.Update(workSession);

                    workResult.ProgressFromLeader = ProgressFromLeader;
                    workResult.NoteFromLeader = NoteFromLeader;
                    workResult.UserAssessor = UserAssessor;
                    _context.WORKItemSessionResults.Update(workResult);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi cập nhập!";
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteWorkItem(int Id, string UserName)
        {
            var msg = new JMessage();
            try
            {
                var workResult = _context.WORKItemSessionResults.FirstOrDefault(x => !x.IsDeleted && x.Id == Id);
                if (workResult != null)
                {
                    workResult.IsDeleted = true;
                    workResult.DeletedBy = UserName;
                    workResult.DeletedTime = DateTime.Now;
                    _context.WORKItemSessionResults.Update(workResult);
                    _context.SaveChanges();
                    msg.Title = "Xóa báo cáo thành công!";
                }
            }
            catch (Exception ex)
            {
                msg.Title = "Có lỗi khi cập nhập!";
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateProgressFromLeader(int Id, decimal ProgressFromLeader, string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var data = _context.WORKItemSessionResults.FirstOrDefault(x => x.Id == Id && !x.IsDeleted);

            var progress = _context.WORKItemSessions.FirstOrDefault(x => x.WorkSession == data.WorkSession && !x.IsDeleted);

            var data1 = _context.WORKItemSessionResults.Where(x => x.WorkSession == data.WorkSession && !x.IsDeleted).ToList();
            decimal sum = 0;
            foreach (var i in data1)
            {
                sum += i.ProgressFromLeader;
            }
            sum = sum - data.ProgressFromLeader;
            if (ProgressFromLeader <= (100 - sum))
            {
                if (data != null)
                {
                    data.ProgressFromLeader = ProgressFromLeader;
                    data.UpdatedBy = ESEIM.AppContext.UserName;
                    data.UpdatedTime = DateTime.Now;

                    progress.Progress = sum + data.ProgressFromLeader;
                    progress.UpdatedBy = userName;
                    progress.UpdatedTime = DateTime.Now;
                    _context.WORKItemSessions.Update(progress);
                    _context.WORKItemSessionResults.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy bản ghi";
                }
            }
            else
            {
                msg.Error = true;
                msg.Title = "Nhập % nhỏ hơn hoặc bằng " + (100 - sum);
            }

            return Json(msg);
        }
        //cap nhap
        [HttpPost]
        public JsonResult UpdateItemWork([FromBody] ItemWork item)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                DateTime? startTime = !string.IsNullOrEmpty(item.StartTime) ? DateTime.ParseExact(item.StartTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? endTime = !string.IsNullOrEmpty(item.EndTime) ? DateTime.ParseExact(item.EndTime, "HH:mm dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var staffItemWork = _context.WORKItemSessions.FirstOrDefault(x => x.WorkSession.Equals(item.WorkSession) && !x.IsDeleted);
                if (staffItemWork != null)
                {
                    var itemActivity = new WORKItemSessionResult
                    {
                        WorkSession = item.WorkSession,
                        StartTime = startTime,
                        EndTime = endTime,
                        ProgressFromStaff = item.ProgressFromStaff,
                        ProgressFromLeader = item.ProgressFromLeader,
                        CreatedBy = item.UserName,
                        CreatedTime = DateTime.Now,
                        ShiftCode = item.ShiftCode
                    };
                    _context.WORKItemSessionResults.Add(itemActivity);

                    string itemWorkList = "";
                    if (item.Tags1.Count > 0)
                    {
                        itemWorkList = item.Tags1[0].Code;
                        for (var i = 1; i < item.Tags1.Count; i++)
                        {
                            itemWorkList += "," + item.Tags1[i].Code;
                        }
                    }
                    staffItemWork.ItemWorkList = itemWorkList;
                    staffItemWork.UpdatedBy = item.UserName;
                    staffItemWork.UpdatedTime = DateTime.Now;
                    staffItemWork.ShiftCode = item.ShiftCode;
                    _context.WORKItemSessions.Update(staffItemWork);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi cập nhập!";
            }
            return Json(msg);

        }
        //insser comment
        [HttpPost]
        public JsonResult InserCommentCardJob(string cardCode, string userName, string cmtContent)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {

                var comment = new CardCommentList
                {
                    CardCode = cardCode,
                    CmtId = "COMMENT_" + cardCode + "_" + (_context.CardCommentLists.Count() > 0 ? _context.CardCommentLists.Last().Id + 1 : 0),
                    CmtContent = cmtContent,
                    MemberId = userName,
                    CreatedTime = DateTime.Now,
                };
                _context.CardCommentLists.Add(comment);
                _context.SaveChanges();
                msg.Title = "Bình luân thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //delete comment
        [HttpPost]
        public JsonResult DeleteCommentCardJob(string id)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CardCommentLists.FirstOrDefault(x => x.Id.ToString() == id);
                if (data != null)
                {
                    _context.CardCommentLists.RemoveRange(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa bình luận thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy bình luận!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //inser add card sub item
        [HttpPost]
        public JsonResult InserSubItemChk(string ChkListCode, string Title, string Approver)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var subitem = new CardSubitemCheck
                {
                    ChkListCode = ChkListCode,
                    Title = Title,
                    Completed = 0,

                };
                _context.CardSubitemChecks.Add(subitem);
                msg.Object = _cardService.UpdatePercentParentSubItem(ChkListCode);
                _context.SaveChanges();
                msg.Title = "Thêm công việc thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteSubItemChk(string id)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id.ToString() == id);
                if (data != null)
                {
                    _context.CardSubitemChecks.Remove(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa công việc thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy công việc!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //thuc hien cong viec
        [HttpPost]
        public JsonResult UpdateSubItemChk(string id, bool Approve)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id.ToString() == id);
                if (data != null)
                {
                    var subItem = _context.CardSubitemChecks.FirstOrDefault(x => x.Id.ToString() == id);
                    subItem.Approve = Approve;
                    _context.CardSubitemChecks.Update(subItem);
                    _context.SaveChanges();
                    msg.Title = "Thực hiện công việc thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy công việc!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        // lay dau muc viec
        [HttpPost]
        public JsonResult GetListItemChecks(string CardCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {

                msg.Object = _context.CardItemChecks.Where(x => !x.Flag && x.CardCode == CardCode)
                  .Select(x => new
                  {
                      x.Id,
                      x.ChkListCode,
                      x.CheckTitle,
                      checkItem = false,
                      TitleSubItemChk = "",
                      x.CreatedBy,
                      ListUserItemChk = (from a in _context.WorkItemAssignStaffs
                                         join b in _context.Users on a.UserId equals b.Id
                                         where a.CheckListCode == x.ChkListCode && a.IsDeleted == false
                                         select new
                                         {
                                             a.ID,
                                             UserId = b.Id,
                                             b.UserName,
                                             b.GivenName
                                         }).DistinctBy(y => y.UserId),
                      listSubItem = _context.CardSubitemChecks.Where(y => y.ChkListCode == x.ChkListCode && !y.Flag).Select(y => new
                      {
                          y.Id,
                          y.Title,
                          y.Completed,
                          y.Approve
                      }),
                      listItemActivity = (from a in _context.WORKItemSessions
                                          join c in _context.WORKItemSessionResults on a.WorkSession equals c.WorkSession
                                          join d in _context.SessionItemChkItems on c.WorkSession equals d.Session
                                          join e in _context.CardItemChecks on d.Item equals e.ChkListCode
                                          where a.ItemWorkList.Equals(x.ChkListCode) && c.IsDeleted == false
                                          select new
                                          {
                                              Id = c.Id,
                                              StartTime = c.StartTime,
                                              EndTime = c.EndTime,
                                              ProgressFromLeader = c.ProgressFromLeader,
                                              ProgressFromStaff = c.ProgressFromStaff,
                                              CheckTitle = e.CheckTitle,
                                              ShiftCode = c.ShiftCode,
                                              TimeCheckIn = _context.ShiftLogs.FirstOrDefault(z => z.ShiftCode == c.ShiftCode).ChkinTime.Value.ToString("HH:mm dd/MM/yyyy"),
                                              TimeCheckOut = _context.ShiftLogs.FirstOrDefault(z => z.ShiftCode == c.ShiftCode).ChkoutTime.HasValue ? _context.ShiftLogs.FirstOrDefault(z => z.ShiftCode == c.ShiftCode).ChkoutTime.Value.ToString("HH:mm dd/MM/yyyy") : "",
                                              CreatedBy = c.CreatedBy,
                                              UserAssessor = c.UserAssessor
                                          }).DistinctBy(y => y.Id),
                  }).ToList();


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //[HttpPost]
        //public JsonResult ChangeItemStatus(int Id, bool Approve, string UserName)
        //{
        //    var msg = new JMessage() { Error = false, Title = "" };
        //    try
        //    {
        //        var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id == Id);
        //        if (Approve == true)
        //        {
        //            data.Approve = true;
        //            data.Approver = UserName;
        //            data.ApprovedTime = DateTime.Now;
        //            data.Completed = 100;
        //        }
        //        else
        //        {
        //            Approve = false;
        //            data.Approver = null;
        //            data.ApprovedTime = null;
        //            data.Completed = 0;
        //        }
        //        _context.CardSubitemChecks.Update(data);
        //        _context.CardSubitemChecks.Load();
        //        msg.Object = _cardService.UpdatePercentParentSubItem(data.ChkListCode);
        //        _context.SaveChanges();
        //        //msg.Title = String.Format(_stringLocalize["COM_MSG_UPDATE_SUCCESS"), _stringLocalize["")); //"Cập nhật thành công";
        //        msg.Title = "Cập nhập thành công!";
        //    }
        //    catch (Exception ex)
        //    {
        //        msg.Error = true;
        //        msg.Object = ex.Message;
        //        msg.Title = "Có lỗi xảy ra!";
        //        //msg.Title = String.Format(_stringLocalize["COM_MSG_UPDATE_FAILED"), _stringLocalize["")); // "Có lỗi xảy ra!";
        //    }
        //    return Json(msg);
        //}
        [HttpPost]
        public JsonResult ChangeItemStatus(int Id, bool Approve, string UserName)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id == Id);
                if (data.Approve != true)
                {
                    data.Approve = true;
                    data.Approver = UserName;
                    data.ApprovedTime = DateTime.Now;
                    data.Completed = 100;

                }
                else
                {
                    data.Approve = false;
                    data.Approver = null;
                    data.ApprovedTime = null;
                    data.Completed = 0;
                }
                _context.CardSubitemChecks.Update(data);
                _context.CardSubitemChecks.Load();
                msg.Object = _cardService.UpdatePercentParentSubItem(data.ChkListCode);
                _context.SaveChanges();
                msg.Title = "Cập nhật thành công";
                //msg.Title = _sharedResources["COM_UPDATE_SUCCESS"];
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                //msg.Title = _sharedResources["COM_MSG_ERR"];
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        //them dau muc viec
        [HttpPost]
        public JsonResult AddCheckList(string CardCode, string CheckTitle, decimal WeightNum, string CreatedBy)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var getSumWeightNum = _context.CardItemChecks.Where(x => x.CardCode == CardCode && x.Flag == false).Sum(x => x.WeightNum);
                if ((getSumWeightNum + WeightNum) > 100)
                {
                    msg.Error = true;
                    msg.Title = "Trọng số tối đa cho phép " + (100 - getSumWeightNum) + "%!";
                    //msg.Title = _stringLocalizer["CJ_MSG_MAXIMUM_WEIGHT"] + (100 - getSumWeightNum) + " % !";
                }
                else
                {
                    var code = "CHECK_LIST_" + (Guid.NewGuid().ToString());
                    var data = new CardItemCheck()
                    {
                        CardCode = CardCode,
                        CheckTitle = CheckTitle,
                        WeightNum = WeightNum,
                        //BeginTime = !string.IsNullOrEmpty(BeginTime) ? DateTime.ParseExact(BeginTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now,
                        //Deadline = !string.IsNullOrEmpty(DeadLine) ? DateTime.ParseExact(DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now,
                        ChkListCode = code,
                        CreatedBy = CreatedBy,
                        CreatedTime = DateTime.Now
                    };
                    _context.CardItemChecks.Add(data);
                    _context.SaveChanges();
                    //msg.Title = String.Format(_stringLocalize["COM_MSG_ADD_SUCCESS"), _stringLocalize[""));//"Thêm thành công!";
                    msg.Title = "Thêm thành công!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra khi thêm!";
                //msg.Title = String.Format(_stringLocalize["COM_MSG_ADD_FAILED"), _stringLocalize["")); //"Có lỗi xảy ra khi thêm!";
            }
            return Json(msg);
        }
        //xoa dau muc viec
        [HttpPost]
        public JsonResult DeleteCheckList(string CheckCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                //deleted item
                var data = _context.CardItemChecks.FirstOrDefault(x => x.ChkListCode.Equals(CheckCode));
                data.Flag = true;
                _context.CardItemChecks.Update(data);
                _context.CardItemChecks.Load();

                //deleted subitem
                var listSubItem = _context.CardSubitemChecks.Where(x => x.ChkListCode == data.ChkListCode).AsNoTracking().ToList();
                listSubItem.ForEach(x => x.Flag = false);
                _context.CardSubitemChecks.UpdateRange(listSubItem);

                msg.Object = _cardService.UpdatePercentParentItem(data.CardCode);
                _context.SaveChanges();
                msg.Title = "Xóa thành công!";

            }
            catch (Exception ex)
            {
                msg.Object = ex;
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetUnitAssignStaff()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "UNIT_ASSIGN_STAFF").Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Object = ex;
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa!";

            }
            return Json(msg);
        }
        //them nhan  vien vao dau muc viec
        [HttpPost]
        public JsonResult InsertJobCardUser(string UserId, string CardCode, string CheckListCode, string CheckItem, string UserName, string EstimateTime, string Unit)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (CheckItem != null)
                {
                    var data = _context.WorkItemAssignStaffs.FirstOrDefault(x => x.UserId.Equals(UserId) && x.CardCode.Equals(CardCode) && !x.IsDeleted && x.CheckListCode.Equals(CheckListCode) && x.CheckItem.Equals(CheckItem));
                    if (data == null)
                    {
                        var jobCardUser = new WorkItemAssignStaff
                        {
                            CardCode = CardCode,
                            UserId = UserId,
                            CheckItem = CheckItem,
                            CheckListCode = CheckListCode,
                            CreatedBy = UserName,
                            CreatedTime = DateTime.Now,
                            EstimateTime = EstimateTime,
                            Unit = Unit
                        };

                        _context.WorkItemAssignStaffs.Add(jobCardUser);
                        _context.SaveChanges();
                        msg.Title = "Thêm thành công";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Nhân viên đã được thêm vào đầu mục việc";
                    }
                }
                else
                {
                    var data = _context.WorkItemAssignStaffs.FirstOrDefault(x => x.UserId.Equals(UserId) && x.CardCode.Equals(CardCode) && !x.IsDeleted && x.CheckListCode.Equals(CheckListCode));
                    if (data == null)
                    {
                        var jobCardUser = new WorkItemAssignStaff
                        {
                            CardCode = CardCode,
                            UserId = UserId,
                            CheckItem = CheckItem,
                            CheckListCode = CheckListCode,
                            CreatedBy = UserName,
                            CreatedTime = DateTime.Now,
                            EstimateTime = EstimateTime,
                            Unit = Unit
                        };

                        _context.WorkItemAssignStaffs.Add(jobCardUser);
                        _context.SaveChanges();
                        msg.Title = "Thêm thành công";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Nhân viên đã được thêm vào đầu mục việc";
                    }
                }


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //lay danh sách nhan vien dau muc viec
        [HttpPost]
        public JsonResult GetListUserChkList(string CheckListCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.WorkItemAssignStaffs
                              join b in _context.Users on a.UserId equals b.Id
                              where a.CheckListCode == CheckListCode && a.IsDeleted == false
                              select new
                              {
                                  a.ID,
                                  UserId = b.Id,
                                  b.UserName,
                                  b.GivenName,
                                  a.EstimateTime,
                                  Unit = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == a.Unit).ValueSet
                              }).DistinctBy(x => x.UserId);

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        //Xóa danh sách nhan vien dau muc viec
        [HttpPost]
        public JsonResult DeleteUserChkList(string Id, string UserName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.WorkItemAssignStaffs.FirstOrDefault(x => x.ID.ToString() == Id);
                if (data != null)
                {
                    data.IsDeleted = true;
                    data.DeletedBy = UserName;
                    data.DeletedTime = DateTime.Now;
                    _context.WorkItemAssignStaffs.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy bản ghi!";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //getList User SubItem
        [HttpPost]
        public JsonResult GetListUserItem(string CardCode, string CheckListCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.WorkItemAssignStaffs
                              join b in _context.Users on a.UserId equals b.Id
                              where a.CardCode == CardCode && a.CheckListCode == CheckListCode && a.IsDeleted == false
                              select new
                              {
                                  a.ID,
                                  a.UserId,
                                  b.GivenName
                              }).DistinctBy(x => x.UserId);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //getList User dda gan SubItem
        [HttpPost]
        public JsonResult GetListUserSubItem(string CardCode, string CheckListCode, string CheckItem)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.WorkItemAssignStaffs
                              join b in _context.Users on a.UserId equals b.Id
                              where a.CardCode == CardCode && a.CheckListCode == CheckListCode && a.IsDeleted == false && a.CheckItem == CheckItem
                              select new
                              {
                                  a.ID,
                                  a.UserId,
                                  b.GivenName,
                                  a.EstimateTime,
                                  Unit = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == a.Unit).ValueSet
                              }).DistinctBy(x => x.UserId);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        //lay vai tro user
        [HttpPost]
        public JsonResult GetListRoleAssign()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<CardEnum>.GetDisplayValue(CardEnum.Role)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }
        public class TimeWorkingSheet
        {
            public int ID { get; set; }
            public string UserName { get; set; }
            public string TimeWorking { get; set; }
            public string Detail { get; set; }
            public string FullName { get; set; }
        }
        [HttpPost]
        public bool CheckCardSuccess(string cardCode)
        {
            var listCardItem = _context.CardItemChecks.Where(x => x.CardCode == cardCode && !x.Flag).ToList();
            bool check = false;

            if (listCardItem.Count > 0)
            {
                foreach (var cardItem in listCardItem)
                {
                    if (cardItem.Completed == 100)
                    {
                        check = true;
                    }
                    else
                    {
                        check = false;
                        break;
                    }

                }
            }
            else
            {
                check = false;
            }
            return check;
        }
        [HttpPost]
        public JsonResult ChangeCardStatus(string CardCode, string Status)
        {
            var msg = new JMessage() { Error = true };
            try
            {
                var data = _context.WORKOSCards.FirstOrDefault(x => x.CardCode.Equals(CardCode));
                data.Status = Status;

                _context.SaveChanges();

                msg.Error = false;
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Object = ex;
                return Json(msg);
            }
        }
        public class CardRelative
        {
            public string BoardCode { get; set; }
            public string ListCode { get; set; }
            public string CardCode { get; set; }
            public string CardName { get; set; }
            public string BeginTime { get; set; }
            public string EndTime { get; set; }
            public string Deadline { get; set; }
            public string CardLevel { get; set; }
            public string Description { get; set; }
            public string UserId { get; set; }
            public string UserName { get; set; }
            public string Status { get; set; }
            public string WorkType { get; set; }



        }
        public class PramSuggest
        {
            public string objectCode { get; set; }
            public string boardCode { get; set; }
            public string ListCode { get; set; }
            public string userName { get; set; }
        }
        [HttpPost]
        public JsonResult InsertCard(PramSuggest prams)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            //IQueryable<CardMemberCustom> lstUser = null;
            try
            {
                //var list = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == data.ListCode && x.IsDeleted == false);
                //var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == list.BoardCode && x.IsDeleted == false);
                //var card = new WORKOSCard
                //{
                //    CardName = "Thẻ việc mới",
                //    CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                //    ListCode = data.ListCode,
                //    CreatedBy = data.UserName,
                //    CreatedDate = DateTime.Now,
                //    Currency = "CURRENCY_VND",
                //    Status = "CREATED",
                //    BeginTime = DateTime.Now,
                //    EndTime = DateTime.Now,
                //    Deadline = DateTime.Now,
                //    ListUserView = ";" + data.UserId,
                //};
                //_context.WORKOSCards.Add(card);
                ////comment
                //var comment = new CardCommentList()
                //{
                //    CardCode = card.CardCode,
                //    CmtId = "Comment" + Guid.NewGuid().ToString(),
                //    CmtContent = "Đã tạo công việc",
                //    MemberId = data.UserName,
                //    CreatedTime = DateTime.Now
                //};

                //_context.CardCommentLists.Add(comment);
                //_context.SaveChanges();
                //msg.Title = "Tạo thẻ việc thành công!";
                //msg.Object = card;
                var user = _context.Users.FirstOrDefault(x => x.Active && x.UserName == prams.userName);
                if (prams.boardCode != "")
                {
                    var listCode = _context.WORKOSLists.FirstOrDefault(x => x.BoardCode == prams.boardCode && !x.IsDeleted);
                    if (prams.objectCode == "")
                    {
                        var max = _context.WORKOSCards.Where(x => x.ListCode == listCode.ListCode && !x.IsDeleted && x.CreatedBy == prams.userName);
                        if (max.Count() > 0)
                        {
                            var maxId = max.Max(x => x.CardID);
                            var lastCard = _context.WORKOSCards.FirstOrDefault(x => x.CardID == maxId);


                            var listRela = _context.JcObjectIdRelatives.Where(x => !x.IsDeleted && x.CardCode == lastCard.CardCode);
                            var assign = _context.CardMappings.Where(x => x.CardCode == lastCard.CardCode).DistinctBy(p => new { p.BoardCode, p.CardCode, p.UserId, p.GroupUserCode, p.Responsibility }).ToList();
                            var listGroup = assign.Where(x => x.TeamCode != null);
                            var listDepart = assign.Where(x => x.GroupUserCode != null);
                            var listMember = assign.Where(x => x.UserId != null);
                            var listAttach = _context.CardAttachments.Where(x => x.CardCode == lastCard.CardCode);
                            //Insert card and attr
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = listCode.ListCode,
                                LstUser = user.Id,
                                CreatedBy = user.UserName,
                                CreatedDate = DateTime.Now,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = user.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);

                            //Add department of member create card
                            var cardDefaultDepartment = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            if (!listDepart.Any(x => x.GroupUserCode.Equals(cardDefaultDepartment.GroupUserCode) && x.Responsibility.Equals(cardDefaultDepartment.Responsibility)))
                            {
                                _context.CardMappings.Add(cardDefaultDepartment);
                            }

                            if (listGroup.Count() > 0)
                            {
                                foreach (var item in listGroup)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        TeamCode = item.TeamCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listMember.Count() > 0)
                            {
                                foreach (var item in listMember)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        UserId = item.UserId,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            var addLeader = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                UserId = user.Id,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);
                            if (listDepart.Count() > 0)
                            {
                                foreach (var item in listDepart)
                                {
                                    var cardMappingDepartment = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        GroupUserCode = item.GroupUserCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMappingDepartment);

                                }
                            }
                            if (listRela.Count() > 0)
                            {
                                foreach (var item in listRela)
                                {
                                    var rela = new JcObjectIdRelative
                                    {
                                        CardCode = card.CardCode,
                                        ObjTypeCode = item.ObjTypeCode,
                                        ObjID = item.ObjID,
                                        Relative = item.Relative,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Weight = item.Weight.HasValue ? item.Weight.Value : 0
                                    };
                                    _context.JcObjectIdRelatives.Add(rela);
                                }
                            }
                            if (listAttach.Count() > 0)
                            {
                                foreach (var item in listAttach)
                                {
                                    var attach = new CardAttachment
                                    {
                                        CardCode = card.CardCode,
                                        FileCode = item.FileCode,
                                        MemberId = prams.userName,
                                        FileName = item.FileName,
                                        FileUrl = item.FileUrl,
                                        CreatedTime = DateTime.Now,
                                    };
                                    _context.CardAttachments.Add(attach);
                                }

                            }
                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = prams.boardCode,
                            //    Card = card,
                            //    ListCode = listCode.ListCode,
                            //};
                        }
                        else
                        {
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = listCode.ListCode,
                                LstUser = user.Id,
                                CreatedBy = user.UserName,
                                CreatedDate = DateTime.Now,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = user.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);

                            var addLeader = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                UserId = user.Id,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);

                            //Add department of member create card
                            var cardMapping = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            _context.CardMappings.Add(cardMapping);

                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = prams.boardCode,
                            //    Card = card,
                            //    ListCode = listCode.ListCode,
                            //};
                        }
                    }
                    else
                    {
                        var max = (from a in _context.WORKOSCards
                                   join b in _context.JcObjectIdRelatives on a.CardCode equals b.CardCode
                                   where !a.IsDeleted && !b.IsDeleted && b.ObjID == prams.objectCode && a.CreatedBy == prams.userName && a.ListCode == listCode.ListCode
                                   select a);
                        if (max.Count() > 0)
                        {
                            var maxId = max.Max(x => x.CardID);
                            var lastCard = _context.WORKOSCards.FirstOrDefault(x => x.CardID == maxId);

                            var listRela = _context.JcObjectIdRelatives.Where(x => !x.IsDeleted && x.CardCode == lastCard.CardCode);
                            var assign = _context.CardMappings.Where(x => x.CardCode == lastCard.CardCode);
                            var listGroup = assign.Where(x => x.TeamCode != null);
                            var listDepart = assign.Where(x => x.GroupUserCode != null);
                            var listMember = assign.Where(x => x.UserId != null);
                            var listAttach = _context.CardAttachments.Where(x => x.CardCode == lastCard.CardCode);
                            //Insert card and attr
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = listCode.ListCode,
                                CreatedBy = user.UserName,
                                LstUser = user.Id,
                                CreatedDate = DateTime.Now,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = user.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);

                            //Add department of member create card
                            var cardDefaultDepartment = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            _context.CardMappings.Add(cardDefaultDepartment);

                            if (listGroup.Count() > 0)
                            {
                                foreach (var item in listGroup)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        TeamCode = item.TeamCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listMember.Count() > 0)
                            {
                                foreach (var item in listMember)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        UserId = item.UserId,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listDepart.Count() > 0)
                            {
                                foreach (var item in listDepart)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        GroupUserCode = item.GroupUserCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listRela.Count() > 0)
                            {
                                foreach (var item in listRela)
                                {
                                    var rela = new JcObjectIdRelative
                                    {
                                        CardCode = card.CardCode,
                                        ObjTypeCode = item.ObjTypeCode,
                                        ObjID = item.ObjID,
                                        Relative = item.Relative,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Weight = item.Weight.HasValue ? item.Weight.Value : 0
                                    };
                                    _context.JcObjectIdRelatives.Add(rela);
                                }
                            }
                            if (listAttach.Count() > 0)
                            {
                                foreach (var item in listAttach)
                                {
                                    var attach = new CardAttachment
                                    {
                                        CardCode = card.CardCode,
                                        FileCode = item.FileCode,
                                        MemberId = prams.userName,
                                        FileName = item.FileName,
                                        FileUrl = item.FileUrl,
                                        CreatedTime = DateTime.Now,
                                    };
                                    _context.CardAttachments.Add(attach);
                                }

                            }
                            var addLeader = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                UserId = user.Id,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);
                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = prams.boardCode,
                            //    Card = card,
                            //    ListCode = listCode.ListCode,
                            //};
                        }
                        else
                        {
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = listCode.ListCode,
                                CreatedBy = user.UserName,
                                LstUser = user.Id,
                                CreatedDate = DateTime.Now,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = user.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);
                            var addLeader = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                UserId = user.Id,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);
                            //Add department of member create card
                            var cardDefaultDepartment = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            _context.CardMappings.Add(cardDefaultDepartment);

                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = prams.boardCode,
                            //    Card = card,
                            //    ListCode = listCode.ListCode,
                            //};
                        }
                    }
                }
                else
                {
                    if (prams.objectCode == "")
                    {
                        var max = _context.WORKOSCards.Where(x => x.IsDeleted == false && x.CreatedBy == prams.userName);
                        if (max.Count() > 0)
                        {
                            var maxId = max.Max(x => x.CardID);
                            var lastCard = _context.WORKOSCards.FirstOrDefault(x => x.CardID == maxId);

                            var listCode = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == lastCard.ListCode && !x.IsDeleted);
                            var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == listCode.BoardCode && !x.IsDeleted);
                            var listRela = _context.JcObjectIdRelatives.Where(x => !x.IsDeleted && x.CardCode == lastCard.CardCode);
                            var assign = _context.CardMappings.Where(x => x.CardCode == lastCard.CardCode);
                            var listGroup = assign.Where(x => x.TeamCode != null);
                            var listDepart = assign.Where(x => x.GroupUserCode != null);
                            var listMember = assign.Where(x => x.UserId != null);
                            var listAttach = _context.CardAttachments.Where(x => x.CardCode == lastCard.CardCode);
                            //Insert card and attr
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = listCode.ListCode,
                                CreatedBy = user.UserName,
                                LstUser = user.Id,
                                CreatedDate = DateTime.Now,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = user.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);
                            var addLeader = new CardMapping
                            {
                                BoardCode = board.BoardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                UserId = user.Id,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);
                            //Add department of member create card
                            var cardDefaultDepartment = new CardMapping
                            {
                                BoardCode = board.BoardCode,
                                ListCode = listCode.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            _context.CardMappings.Add(cardDefaultDepartment);


                            if (listGroup.Count() > 0)
                            {
                                foreach (var item in listGroup)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = board.BoardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        TeamCode = item.TeamCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listMember.Count() > 0)
                            {
                                foreach (var item in listMember)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = board.BoardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        UserId = item.UserId,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listDepart.Count() > 0)
                            {
                                foreach (var item in listDepart)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = board.BoardCode,
                                        ListCode = listCode.ListCode,
                                        CardCode = card.CardCode,
                                        GroupUserCode = item.GroupUserCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listRela.Count() > 0)
                            {
                                foreach (var item in listRela)
                                {
                                    var rela = new JcObjectIdRelative
                                    {
                                        CardCode = card.CardCode,
                                        ObjTypeCode = item.ObjTypeCode,
                                        ObjID = item.ObjID,
                                        Relative = item.Relative,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Weight = item.Weight.HasValue ? item.Weight.Value : 0
                                    };
                                    _context.JcObjectIdRelatives.Add(rela);
                                }
                            }
                            if (listAttach.Count() > 0)
                            {
                                foreach (var item in listAttach)
                                {
                                    var attach = new CardAttachment
                                    {
                                        CardCode = card.CardCode,
                                        FileCode = item.FileCode,
                                        MemberId = prams.userName,
                                        FileName = item.FileName,
                                        FileUrl = item.FileUrl,
                                        CreatedTime = DateTime.Now,
                                    };
                                    _context.CardAttachments.Add(attach);
                                }

                            }
                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = board.BoardCode,
                            //    Card = card,
                            //    ListCode = listCode.ListCode,
                            //};
                        }
                        else
                        {
                            //return "";
                        }
                    }
                    else
                    {
                        var max = (from a in _context.WORKOSCards
                                   join b in _context.JcObjectIdRelatives on a.CardCode equals b.CardCode
                                   where !a.IsDeleted && !b.IsDeleted && b.ObjID == prams.objectCode && a.CreatedBy == prams.userName
                                   select a);
                        if (max.Count() > 0)
                        {
                            var maxId = max.Max(x => x.CardID);
                            var lastCard = _context.WORKOSCards.FirstOrDefault(x => x.CardID == maxId);

                            var list = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == lastCard.ListCode && !x.IsDeleted);
                            var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == list.BoardCode && !x.IsDeleted);
                            var listRela = _context.JcObjectIdRelatives.Where(x => !x.IsDeleted && x.CardCode == lastCard.CardCode);
                            var assign = _context.CardMappings.Where(x => x.CardCode == lastCard.CardCode);
                            var listGroup = assign.Where(x => x.TeamCode != null);
                            var listDepart = assign.Where(x => x.GroupUserCode != null);
                            var listMember = assign.Where(x => x.UserId != null);
                            var listAttach = _context.CardAttachments.Where(x => x.CardCode == lastCard.CardCode);
                            //Insert card and attr
                            var card = new WORKOSCard
                            {
                                CardName = "",
                                CardCode = "" + (_context.WORKOSCards.Count() > 0 ? _context.WORKOSCards.Max(x => x.CardID) + 1 : 1),
                                ListCode = lastCard.ListCode,
                                CreatedBy = ESEIM.AppContext.UserName,
                                CreatedDate = DateTime.Now,
                                LstUser = user.Id,
                                Currency = "CURRENCY_VND",
                                Status = "CREATED",
                                BeginTime = DateTime.Now,
                                Deadline = DateTime.Now
                            };
                            _context.WORKOSCards.Add(card);
                            msg.Object = card;
                            msg.Title = "Tạo thẻ việc thành công!";
                            var comment = new CardCommentList()
                            {
                                CardCode = card.CardCode,
                                CmtId = "Comment" + Guid.NewGuid().ToString(),
                                CmtContent = "Đã tạo công việc",
                                MemberId = ESEIM.AppContext.UserName,
                                CreatedTime = DateTime.Now
                            };
                            _context.CardCommentLists.Add(comment);
                            var addLeader = new CardMapping
                            {
                                BoardCode = board.BoardCode,
                                ListCode = list.ListCode,
                                CardCode = card.CardCode,
                                UserId = ESEIM.AppContext.UserId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_LEADER"
                            };
                            _context.CardMappings.Add(addLeader);

                            //Add department of member create card
                            var cardDefaultDepartment = new CardMapping
                            {
                                BoardCode = prams.boardCode,
                                ListCode = lastCard.ListCode,
                                CardCode = card.CardCode,
                                GroupUserCode = user.DepartmentId,
                                CreatedBy = prams.userName,
                                CreatedTime = DateTime.Now,
                                Responsibility = "ROLE_MAIN"
                            };
                            _context.CardMappings.Add(cardDefaultDepartment);


                            if (listGroup.Count() > 0)
                            {
                                foreach (var item in listGroup)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = lastCard.ListCode,
                                        CardCode = card.CardCode,
                                        TeamCode = item.TeamCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listMember.Count() > 0)
                            {
                                foreach (var item in listMember)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = lastCard.ListCode,
                                        CardCode = card.CardCode,
                                        UserId = item.UserId,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listDepart.Count() > 0)
                            {
                                foreach (var item in listDepart)
                                {
                                    var cardMapping = new CardMapping
                                    {
                                        BoardCode = prams.boardCode,
                                        ListCode = lastCard.ListCode,
                                        CardCode = card.CardCode,
                                        GroupUserCode = item.GroupUserCode,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Responsibility = item.Responsibility != null ? item.Responsibility : null
                                    };
                                    _context.CardMappings.Add(cardMapping);

                                }
                            }
                            if (listRela.Count() > 0)
                            {
                                foreach (var item in listRela)
                                {
                                    var rela = new JcObjectIdRelative
                                    {
                                        CardCode = card.CardCode,
                                        ObjTypeCode = item.ObjTypeCode,
                                        ObjID = item.ObjID,
                                        Relative = item.Relative,
                                        CreatedBy = prams.userName,
                                        CreatedTime = DateTime.Now,
                                        Weight = item.Weight.HasValue ? item.Weight.Value : 0
                                    };
                                    _context.JcObjectIdRelatives.Add(rela);
                                }
                            }
                            if (listAttach.Count() > 0)
                            {
                                foreach (var item in listAttach)
                                {
                                    var attach = new CardAttachment
                                    {
                                        CardCode = card.CardCode,
                                        FileCode = item.FileCode,
                                        MemberId = prams.userName,
                                        FileName = item.FileName,
                                        FileUrl = item.FileUrl,
                                        CreatedTime = DateTime.Now,
                                    };
                                    _context.CardAttachments.Add(attach);
                                }

                            }
                            _context.SaveChanges();
                            //return new
                            //{
                            //    BoardCode = board.BoardCode,
                            //    Card = card,
                            //    ListCode = lastCard.ListCode,
                            //};
                        }
                        else
                        {
                            //return "";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateCardJob(CardRelative data)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var BeginTime = DateTime.ParseExact(data.BeginTime, "HH:mm:ss dd/MM/yyyy", CultureInfo.InvariantCulture);
                var EndTime = string.IsNullOrEmpty(data.EndTime) ? (DateTime?)null : DateTime.ParseExact(data.EndTime, "HH:mm:ss dd/MM/yyyy", CultureInfo.InvariantCulture);
                var Deadline = DateTime.ParseExact(data.Deadline, "HH:mm:ss dd/MM/yyyy", CultureInfo.InvariantCulture);
                var card = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == data.CardCode);
                if (card != null)
                {
                    card.BeginTime = BeginTime;
                    card.EndTime = EndTime;
                    card.Deadline = Deadline;
                    card.CardLevel = data.CardLevel;
                    card.Description = data.Description;
                    card.CardCode = data.CardCode;
                    card.CardName = data.CardName;
                    card.Status = data.Status;
                    card.WorkType = data.WorkType;
                    _context.SaveChanges();
                    msg.Title = "Cập nhập thẻ việc thành công!";
                    msg.Object = card;
                }


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        // thay đổi tiêu đề đầu muc jviệc
        [HttpPost]
        public JsonResult ChangeCheckTitle(string ChkListCode, string CheckTitle, string CardCode, string UserId)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.CardItemChecks.FirstOrDefault(x => x.ChkListCode.Equals(ChkListCode));
                if (data.CheckTitle.Equals(CheckTitle))
                {
                    msg.Title = "Cập nhật thành công!";
                }
                var activity = new CardUserActivity
                {
                    UserId = UserId,
                    Action = "UPDATE",
                    IdObject = "ITEMCHECK",
                    IsCheck = true,
                    CardCode = CardCode,
                    CreatedTime = DateTime.Now,
                    FromDevice = "MOBILE",
                    ChangeDetails = "Tiêu đề từ " + data.CheckTitle + " sang " + CheckTitle
                };
                _context.CardUserActivitys.Add(activity);
                data.CheckTitle = CheckTitle;
                _context.CardItemChecks.Update(data);
                _context.SaveChanges();

                //msg.Title = String.Format(_stringLocalize["COM_MSG_UPDATE_SUCCESS"), _stringLocalize[""));// "Cập nhật thành công!";
                msg.Title = "Cập nhật thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra!";
                //msg.Title = String.Format(_stringLocalize["COM_MSG_UPDATE_FAILED"), _stringLocalize[""));// "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult ChangSubItemTitle(int Id, string Title, string UserId)
        {
            var msg = new JMessage() { Error = true };
            try
            {
                var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id == Id);
                if (data.Title.Equals(Title))
                {
                    return null;
                }

                var itemCheck = _context.CardItemChecks.FirstOrDefault(x => x.ChkListCode == data.ChkListCode);
                var activity = new CardUserActivity
                {
                    UserId = UserId,
                    Action = "UPDATE",
                    IdObject = "SUBITEM",
                    IsCheck = true,
                    CardCode = itemCheck.CardCode,
                    CreatedTime = DateTime.Now,
                    FromDevice = "MOBILE",
                    ChangeDetails = "Tiêu đề từ " + data.Title + " sang " + Title
                };
                _context.CardUserActivitys.Add(activity);

                data.Title = Title;
                _context.CardSubitemChecks.Update(data);
                _context.SaveChanges();
                msg.Error = false;
                msg.Title = "Cập nhật thành công!";
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Object = ex;
                msg.Title = "Có lỗi xảy ra!";
                //msg.Title = String.Format(_stringLocalize["COM_MSG_UPDATE_FAILED"), _stringLocalize["")); //"Có lỗi xảy ra!";
                return Json(msg);
            }
        }
        [HttpPost]
        public JsonResult DeleteCheckItem(int Id, string UserId)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CardSubitemChecks.FirstOrDefault(x => x.Id == Id);
                data.Flag = true;
                _context.CardSubitemChecks.Update(data);
                _context.CardSubitemChecks.Load();
                msg.Object = _cardService.UpdatePercentParentSubItem(data.ChkListCode);

                var itemCheck = _context.CardItemChecks.FirstOrDefault(x => x.ChkListCode == data.ChkListCode);
                var activity = new CardUserActivity
                {
                    UserId = UserId,
                    Action = "DELETE",
                    IdObject = "SUBITEM",
                    IsCheck = true,
                    CardCode = itemCheck.CardCode,
                    CreatedTime = DateTime.Now,
                    FromDevice = "MOBILE",
                    ChangeDetails = data.Title
                };
                _context.CardUserActivitys.Add(activity);

                _context.SaveChanges();
                //msg.Title = String.Format(_stringLocalize["COM_MSG_DELETE_SUCCESS"), _stringLocalize["")); //"Xóa thành công";
                msg.Title = "Xóa thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                //msg.Title = String.Format(_stringLocalize["COM_MSG_DELETE_FAIL"), _stringLocalize[""));// "Có lỗi xảy ra!";
            }
            return Json(msg);
        }
        //
        //
        [HttpPost]
        public JsonResult GetBoardAndList(string userName)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var user = _context.Users.FirstOrDefault(x => x.Active && x.UserName == userName);
                var max = _context.WORKOSCards.Where(x => !x.IsDeleted && x.CreatedBy == userName);
                var maxId = max.Max(x => x.CardID);
                var lastCard = _context.WORKOSCards.FirstOrDefault(x => x.CardID == maxId);
                var workOsList = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == lastCard.ListCode);
                var listBoard = _context.WORKOSBoards.Where(x => x.IsDeleted == false && x.BoardCode == workOsList.BoardCode).Select(x => new
                {
                    x.BoardID,
                    x.BoardCode,
                    x.BoardName,
                    x.BoardType,
                    BoardTypeText = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.BoardType).ValueSet ?? "",
                    OrderBoardType = (x.BoardType == "BOARD_REPEAT") ? 1 : x.BoardType == "BOARD_PROJECT" ? 2 : 3,
                    x.Avatar,
                    x.BackgroundColor,
                    x.BackgroundImage,
                    x.BeginTime,
                    x.Completed,
                    x.Cost,
                    x.Deadline,
                    x.LocationGps,
                    x.LocationText,
                    x.Department,
                    DepartmentName = _context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == x.Department && !y.IsDeleted).Title,
                    x.Branch,
                    BranchName = _context.AdOrganizations.FirstOrDefault(y => y.OrgAddonCode == x.Branch).OrgName,
                }).OrderBy(x => x.OrderBoardType).AsNoTracking();
                var workOsBoard = listBoard.FirstOrDefault(x => x.BoardCode == workOsList.BoardCode);
                msg.Object = new
                {
                    OsList = workOsList,
                    OsBoard = workOsBoard
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
            }
            return Json(msg);
        }
        public class NotificationModal
        {
            public List<UserIdModel> listUser { get; set; }
            public string cardCode { get; set; }
            public string displayName { get; set; }
        }
        [HttpPost]
        public JsonResult SendNotificationApp([FromBody] NotificationModal data)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var card = _context.WORKOSCards.FirstOrDefault(x => x.CardCode == data.cardCode);
                var list = _context.WORKOSLists.FirstOrDefault(x => x.ListCode == card.ListCode);
                var board = _context.WORKOSBoards.FirstOrDefault(x => x.BoardCode == list.BoardCode);
                var project = _context.CardMappings.FirstOrDefault(x => x.CardCode == card.CardCode && !string.IsNullOrEmpty(x.ProjectCode));
                SendPushNotification(data.listUser, string.Format("Thẻ việc #{0} được cập nhập bởi {1}", data.cardCode, data.displayName), new
                {
                    board.BoardCode,
                    board.BoardName,
                    list.ListCode,
                    card.CardCode,
                    card.CardName,
                    card.BeginTime,
                    card.EndTime,
                    card.CardID,
                    card.CardLevel,
                    card.Deadline,
                    card.Currency,
                    card.Completed,
                    card.Cost,
                    Type = board.BoardType == "BOARD_REPEAT" ? "REPEAT" : board.BoardType == "BOARD_PROJECT" ? "PROJECT" : "BUILDING",
                    ProjectCode = project != null ? project.ProjectCode : "",
                    ProjectName = project != null ? _context.Projects.FirstOrDefault(x => x.ProjectCode == project.ProjectCode && x.FlagDeleted == false).ProjectTitle ?? "" : "",
                });
            }
            catch
            {

            }
            return Json(msg);
        }
        #endregion

        #region Project
        [HttpPost]
        public int GetCountProject()
        {
            return _context.Projects.Where(x => x.FlagDeleted == false).AsNoTracking().Count();
        }

        [HttpPost]
        public JsonResult GetListProject()
        {
            var msg = new JMessage { Error = false, Title = "" };
            var listColor = new[]
            {
                new
                {
                    Color = "#f44336",
                    Id = 1
                },
                new
                {
                    Color = "#E91E63",
                    Id = 2
                },
                new
                {
                    Color = "#9C27B0",
                    Id = 3
                },
                new
                {
                    Color = "#673AB7",
                    Id = 4
                },
                 new
                {
                    Color = "#9E9E9E",
                    Id = 5
                },
                  new
                {
                    Color = "#5758BB",
                    Id = 6
                }
            };
            var random = new Random();
            var list = new List<ProjectType>();
            try
            {
                var listProType = _context.CommonSettings.Where(x => x.Group == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.ProType));
                foreach (var item in listProType)
                {
                    var number = random.Next(1, 7);
                    var checkExist = list.FirstOrDefault(x => x.Id == number);
                    if (checkExist == null)
                    {
                        var prjType = new ProjectType
                        {
                            Id = number,
                            Code = item.CodeSet,
                            Color = listColor.FirstOrDefault(x => x.Id == number)?.Color,
                        };
                        list.Add(prjType);
                    }
                    else
                    {
                        while (list.FirstOrDefault(x => x.Id == number) != null)
                        {
                            number = random.Next(1, 7);
                        }
                        var prjType = new ProjectType
                        {
                            Id = number,
                            Code = item.CodeSet,
                            Color = listColor.FirstOrDefault(x => x.Id == number)?.Color,
                        };
                        list.Add(prjType);
                    }
                }
                //var query = (from a in _context.Projects
                //             orderby a.PrjType
                //             select new
                //             {
                //                 a.ProjectCode,
                //                 a.ProjectTitle,
                //                 Color = list.FirstOrDefault(x => x.Code == a.PrjType) != null ? list.FirstOrDefault(x => x.Code == a.PrjType).Color : "#4CAF50",
                //                 Board = (from g in _context.ProjectBoards
                //                          join h in _context.WORKOSBoards on g.BoardCode equals h.BoardCode
                //                          where g.ProjectCode == a.ProjectCode && h.IsDeleted == false
                //                          select new
                //                          {
                //                              h.BoardName,
                //                              ListCount = _context.WORKOSLists.Where(x => x.BoardCode == g.BoardCode && x.IsDeleted == false).AsNoTracking().Count()
                //                          }).AsNoTracking()
                //             });
                var query = (from a in _context.Projects
                             orderby a.PrjType
                             select new
                             {
                                 a.ProjectCode,
                                 a.ProjectTitle,
                                 Color = list.FirstOrDefault(x => x.Code == a.PrjType) != null ? list.FirstOrDefault(x => x.Code == a.PrjType).Color : "#4CAF50",
                                 Board = (from g in _context.CardMappings
                                          join h in _context.WORKOSBoards on g.BoardCode equals h.BoardCode
                                          where g.ProjectCode == a.ProjectCode && h.IsDeleted == false
                                          select new
                                          {
                                              h.BoardName,
                                              ListCount = _context.WORKOSLists.Where(x => x.BoardCode == g.BoardCode && x.IsDeleted == false).AsNoTracking().Count()
                                          }).AsNoTracking()
                             });
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListTaskByProject(string projectCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.CardMappings
                             join b in _context.WORKOSLists on a.ListCode equals b.ListCode
                             where a.ProjectCode == projectCode
                             select new
                             {
                                 b.ListCode,
                                 b.ListName,
                                 b.Completed
                             }).AsNoTracking();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy hạng mục công việc!";
            }
            return Json(msg);
        }
        #endregion

        #region App thị trường
        //Màn bổ sung mới cho bản đồ
        [HttpPost]
        public JsonResult GetCountNodeOfWorkPlan(string userName)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                int count = 0;
                var wplist = _context.VcWorkPlans.Where(x => x.UserName == userName && x.IsDeleted != true
                                        && x.CurrentStatus != WpStatus.WpCancel.DescriptionAttr()
                                        && x.CurrentStatus != WpStatus.WpPending.DescriptionAttr()
                                        && x.CurrentStatus != WpStatus.WpReject.DescriptionAttr()
                                        && x.CurrentStatus != WpStatus.WpWaiting.DescriptionAttr())
                                     .OrderByDescending(x => x.Id)
                                     .Select(x => new { x.CurrentStatus, x.WpCode, x.ToDate })
                                     .Skip(0).Take(2)
                                     .AsNoTracking()
                                     .ToList();
                if (wplist.Count > 1)
                {
                    if (wplist[1].CurrentStatus != "WP_DONE")
                    {
                        wplist.Remove(wplist[0]);
                    }
                    else
                    {
                        if (wplist[1].ToDate >= DateTime.Now)
                        {
                            wplist.Remove(wplist[0]);
                        }
                        else
                        {
                            var chkCheckout = (from a in _context.VcSettingRoutes.Where(x => !x.IsDeleted && x.WpCode == wplist[1].WpCode)
                                               join b in _context.VcWorkChecks.Where(x => x.Checkout != true && x.UserName == userName) on a.RouteCode equals b.CareCode
                                               select a.RouteCode)
                                              .FirstOrDefault();
                            if (chkCheckout != null)
                            {
                                wplist.Remove(wplist[0]);
                            }
                            else
                            {
                                wplist.Remove(wplist[1]);
                            }
                        }
                    }
                }
                //var data = (from b in wplist
                //            join a in _context.VcSettingRoutes.Where(x => x.IsDeleted == false) on b.WpCode equals a.WpCode
                //            join d in _context.Customerss.Where(x => !x.IsDeleted) on a.Node equals d.CusCode
                //            join f1 in _context.VcWorkChecks.Where(x => x.CheckinTime.HasValue && x.CheckinTime.Value.Date == DateTime.Now.Date && x.UserName == username) on a.RouteCode equals f1.CareCode into f2
                //            from f in f2.DefaultIfEmpty()
                //            join c1 in _context.CommonSettings.Where(x => x.Group == "ROUTE_CURRENT_STATUS" && x.IsDeleted == false) on a.CurrentStatus equals c1.CodeSet into c2
                //            from c in c2.DefaultIfEmpty()
                //            join e1 in _context.CommonSettings.Where(x => x.Group ==EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.CustomerArea) && x.IsDeleted == false) on d.Area equals e1.CodeSet into e2
                //            from e in e2.DefaultIfEmpty()
                //            orderby a.Id descending
                //            select new
                //            {
                //                a.RouteCode,
                //                WpCode = a.WpCode,
                //                Node = a.Node,
                //                Lat = _context.MapDataGpss.OrderByDescending(x => x.IsDefault).FirstOrDefault(x => !x.IsDeleted && x.IsActive && !string.IsNullOrEmpty(x.MakerGPS) && x.ObjCode == a.Node) != null
                //                      ? _context.MapDataGpss.OrderByDescending(x => x.IsDefault).FirstOrDefault(x => !x.IsDeleted && x.IsActive && !string.IsNullOrEmpty(x.MakerGPS) && x.ObjCode == a.Node).MakerGPS.Split(",")[0]
                //                      : null,
                //                Long = _context.MapDataGpss.OrderByDescending(x => x.IsDefault).FirstOrDefault(x => !x.IsDeleted && x.IsActive && !string.IsNullOrEmpty(x.MakerGPS) && x.ObjCode == a.Node) != null
                //                      ? _context.MapDataGpss.OrderByDescending(x => x.IsDefault).FirstOrDefault(x => !x.IsDeleted && x.IsActive && !string.IsNullOrEmpty(x.MakerGPS) && x.ObjCode == a.Node).MakerGPS.Split(",")[1]
                //                      : null,
                //                Name = d != null ? d.CusName : "",
                //                Address = d != null ? d.Address : "",
                //                TimePlan = a.TimePlan.Value.ToString("HH:mm:ss dd-MM-yyyy"),
                //                StatusCode = a.CurrentStatus,
                //                StatusName = c != null ? c.ValueSet : "",
                //                NoHasData = (a.CurrentStatus == "ROUTE_PENDING" || a.CurrentStatus == "ROUTE_PROCESSING") ? true : false,
                //                AreaName = e != null ? e.ValueSet : "",
                //                Checkin = f != null ? f.Checkin : null,
                //                Checkout = f != null ? f.Checkout : null,
                //                ActionInDay = f != null ? (f.Checkout == true
                //                                        ? "Đã checkout"
                //                                        : (f.Checkin == true
                //                                            ? "Đã checkin"
                //                                            : "Chưa checkin"))
                //                                   : "Chưa checkin"
                //            }).ToList();

                if (wplist.Count > 0)
                {
                    var countTotal = _context.VcSettingRoutes.Where(x => x.WpCode == wplist[0].WpCode && x.IsDeleted != true).AsNoTracking().Count();
                    if (countTotal != 0)
                    {
                        count = _context.VcSettingRoutes.Where(x => x.WpCode == wplist[0].WpCode && x.IsDeleted != true && (x.CurrentStatus == RouteStatus.RoutePending.DescriptionAttr() || x.CurrentStatus == RouteStatus.RouteProcessing.DescriptionAttr())).AsNoTracking().Count();
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "User chưa lập kế hoạch tuần chi tiết!";
                    }
                }

                msg.Object = count;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Lỗi khi load dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region Common
        [HttpPost]
        public JsonResult UploadImage(IFormFile pictureFile)
        {
            var msg = new JMessage { Error = false, Title = "" };
            if (pictureFile.Length > 0)
            {
                var mes = _upload.UploadImage(pictureFile);
                var trackingMedia = new JCTrackingMedia
                {
                    FilePath = "/uploads/images/" + mes.Object.ToString(),
                    FileName = mes.Object.ToString(),
                    FileType = Path.GetExtension(mes.Object.ToString())
                };
                msg.Object = trackingMedia;
                msg.Title = "Tải ảnh thành công!";
            }
            return Json(msg);
        }

        [HttpPost]
        [RequestFormLimits(MultipartBodyLengthLimit = long.MaxValue)]
        [RequestSizeLimit(long.MaxValue)]
        public JsonResult UploadFile(IFormFile file)
        {
            var msg = new JMessage { Error = false, Title = "" };
            if (file.Length > 0)
            {
                var mes = _upload.UploadFile(file, Path.Combine(_hostingEnvironment.WebRootPath, "uploads\\files"));
                var trackingMedia = new JCTrackingMedia
                {
                    FilePath = "/uploads/files/" + mes.Object.ToString(),
                    FileName = mes.Object.ToString(),
                    FileType = Path.GetExtension(mes.Object.ToString())
                };
                msg.Object = trackingMedia;
                msg.Title = "Tải tệp tin thành công!";
            }
            return Json(msg);
        }
        #endregion

        #region Fund Manager (Quản lý quỹ cho Facco và S-work)

        [HttpPost]
        public JsonResult GenAETCode(string aetType, string catCode, string userName)
        {
            var str = string.Empty;
            var idMax = 1;
            var obj = _context.FundAccEntrys.LastOrDefault();
            if (obj != null)
                idMax = obj.Id + 1;

            str = string.Format("AET.{0}_{1}_{2}_{3}_{4}", idMax, aetType, catCode, userName, DateTime.Now.ToString("yyyyMMdd"));

            return Json(str);
        }

        //List danh sách danh mục
        [HttpPost]
        public JsonResult GetListFundCategory()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.FundCatReptExpss.Where(x => !x.IsDeleted)
                    .Select(x => new
                    {
                        x.Id,
                        x.CatCode,
                        x.CatName,
                        x.CatParent,
                        x.CatType,
                        CatTypeName = _context.CommonSettings.FirstOrDefault(p => p.CodeSet.Equals(x.CatType)) != null ? _context.CommonSettings.FirstOrDefault(p => p.CodeSet.Equals(x.CatType)).ValueSet : x.CatType,
                        x.CreatedBy,
                        x.CreatedTime,
                        x.Note,
                        CatParentName = _context.FundCatReptExpss.FirstOrDefault(p => p.CatCode.Equals(x.CatParent)) != null ? _context.FundCatReptExpss.FirstOrDefault(p => p.CatCode.Equals(x.CatParent)).CatName : null
                    }).OrderByDescending(x => x.Id).ToList();

                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        //Check quyen user
        [HttpPost]
        public JsonResult CheckIsAllData(string userName)
        {
            var msg = new JMessage { Error = false, Title = "", Object = false };
            try
            {
                var userData = _context.Users.FirstOrDefault(x => x.UserName.ToLower() == userName.ToLower());
                if (userData != null)
                {
                    if (userData.UserType == 10 || userData.DepartmentId == "DEPARTMENT_LEADER" && userData.BranchId == "b_ALL")
                    {
                        msg.Object = true;
                    }
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }


        //List danh sách danh mục cha
        [HttpPost]
        public JsonResult GetListFundCategoryParent()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.FundCatReptExpss.Where(x => x.CatParent != null && x.IsDeleted == false)
                    .Select(x => new
                    {
                        x.CatParent,
                        x.CatName
                    })
                    .DistinctBy(x => x.CatParent).ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult AddListFundCategoryParent()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.FundCatReptExpss.Where(x => x.IsDeleted == false).Select(x => new { x.CatCode }).ToList();
                msg.Object = data;
                //var data = _context.FundCatReptExpss.Where(x => !x.IsDeleted && x.CatParent == null).ToList();
                //msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult ListTypeInCommonSetting()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CommonSettings.Where(x => x.Group == "CAT_FUND_TYPE" && x.IsDeleted == false).AsNoTracking().ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertFundCategory(FundCatReptExps data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var checkExist = _context.FundCatReptExpss.FirstOrDefault(x => x.CatCode.ToLower() == data.CatCode.ToLower() && !x.IsDeleted);
                if (checkExist != null)
                {
                    msg.Error = true;
                    msg.Title = "Đã tồn tại mã danh mục quỹ!";
                }
                else
                {
                    data.CreatedTime = DateTime.Now;
                    _context.FundCatReptExpss.Add(data);
                    _context.SaveChanges();
                    msg.Object = data;
                    msg.Title = "Thêm danh mục quỹ thành công !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }

        [HttpPost]
        public object UpdateFundCategory(FundCatReptExps data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = _context.FundCatReptExpss.FirstOrDefault(x => x.CatCode.ToLower() == data.CatCode.ToLower());
                if (obj != null)
                {
                    obj.CatCode = data.CatCode;
                    obj.CatName = data.CatName;
                    obj.CatParent = data.CatParent;
                    obj.CatType = data.CatType;
                    obj.Note = data.Note;
                    obj.UpdatedBy = User.Identity.Name;
                    obj.UpdatedTime = DateTime.Now;
                    _context.FundCatReptExpss.Update(obj);
                    _context.SaveChanges();

                    msg.Object = obj;
                    msg.Title = "Cập nhật danh mục quỹ thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Cập nhật danh mục quỹ thất bại !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi cập nhật!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object DeleteFundCategory(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = _context.FundCatReptExpss.FirstOrDefault(x => x.Id == id);
                if (obj != null)
                {
                    obj.DeletedBy = User.Identity.Name;
                    obj.DeletedTime = DateTime.Now;
                    obj.IsDeleted = true;
                    _context.FundCatReptExpss.Update(obj);
                    _context.SaveChanges();

                    msg.Object = obj;
                    msg.Title = "Xóa danh mục quỹ thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Xóa danh mục quỹ thất bại !";
                }

                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi xóa !";
                msg.Object = ex;
                return Json(msg);
            }
        }

        //List danh sách loại tiền tệ
        [HttpPost]
        public JsonResult GetListFundCurrency()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.FundCurrencys.Where(x => !x.IsDeleted).ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        //Set 1 loại tiền thành mặc định
        [HttpPost]
        public JsonResult SetCurrencyDefault(int id)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var data = _context.FundCurrencys.FirstOrDefault(x => x.Id == id);
                data.UpdatedBy = ESEIM.AppContext.UserName;
                data.UpdatedTime = DateTime.Now;
                data.DefaultPayment = true;

                var listFundCurrencys = _context.FundCurrencys.Where(x => x.DefaultPayment == true).ToList();
                listFundCurrencys.ForEach(x => x.DefaultPayment = false);
                foreach (var item in listFundCurrencys)
                {
                    _context.FundCurrencys.Update(item);
                }
                _context.SaveChanges();
                msg.Title = "Cập nhật thành công";
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Cập nhật thất bại";
                return Json(msg);
            }
        }

        //List danh sách thu chi tổng tiền trong danh sách, tìm kiếm
        public class ViewAccEntry
        {
            public int Id { get; set; }
            public string AetCode { get; set; }
            public string Title { get; set; }
            public string AetType { get; set; }
            public string AetTypeName { get; set; }
            public string CatCode { get; set; }
            public string CatName { get; set; }
            public DateTime? DeadLine { get; set; }
            public string Payer { get; set; }
            public string Receiptter { get; set; }
            public decimal Total { get; set; }
            public string Currency { get; set; }
            public string CreatedBy { get; set; }
            public string Status { get; set; }
        }

        public class FundAccEntryResultModel
        {
            public FundAccEntryResultModel()
            {
                ListFundAccEntry = new List<ViewAccEntry>();
            }
            public List<ViewAccEntry> ListFundAccEntry { get; set; }

            public decimal TotalReceipt { get; set; }
            public decimal TotalExpense { get; set; }
            public decimal TotalSurplus { get; set; }
        }
        [HttpPost]
        public object GetListAccEntry(JTableAccEntryModel jTablePara)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBegin = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var data = (from a in _context.FundAccEntrys
                            join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                            on a.CatCode equals b.CatCode
                            where (!a.IsDeleted
                            && (string.IsNullOrEmpty(jTablePara.AetCode) || (a.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.Title) || (a.Title.ToLower().Contains(jTablePara.Title.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.AetType) || (a.AetType.Equals(jTablePara.AetType)))
                                   && (string.IsNullOrEmpty(jTablePara.Currency) || (a.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.Payer) || (a.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
                                   && ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
                                   && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate)))
                            select new ViewAccEntry
                            {
                                Id = a.Id,
                                AetCode = a.AetCode,
                                Title = a.Title,
                                AetType = a.AetType,
                                AetTypeName = a.AetType == "Expense" ? "Chi" : "Thu",
                                CatCode = a.CatCode,
                                CatName = b.CatName,
                                DeadLine = a.DeadLine,
                                Payer = a.Payer,
                                Receiptter = a.Receiptter,
                                Total = a.Total,
                                Currency = a.Currency,
                                CreatedBy = a.CreatedBy,
                                Status = a.Status,
                            });
                var query = (from a in _context.FundAccEntrys
                             join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                             on a.CatCode equals b.CatCode
                             where !a.IsDeleted
                             select new
                             {
                                 AetType = a.AetType,
                                 Total = a.Total,
                                 Currency = a.Currency,
                             });
                decimal totalReceipt = query.Where(x => x.AetType == "Receipt").Sum(x => x.Currency == "VND" ? x.Total : x.Total * (1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)));
                decimal totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Currency == "VND" ? x.Total : x.Total * (1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)));
                var data1 = data.OrderByDescending(x => x.Id).ThenBy(x => x.Title).Skip(intBegin).Take(jTablePara.Length).AsNoTracking().ToList();
                var result = new FundAccEntryResultModel
                {
                    ListFundAccEntry = data1,
                    TotalReceipt = totalReceipt,
                    TotalExpense = totalExpense,
                    TotalSurplus = totalReceipt - totalExpense
                };

                msg.Object = result;

                return Json(msg);
            }
            catch (Exception ex)
            {
                throw;
            }

        }
        [HttpPost]
        public object GetListTitle()
        {
            var msg = new JMessage() { Error = false };
            try
            {
                msg.Object = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == true)
                              join b in _context.FundAccEntryTrackings.Where(x => x.Action == "APPROVED") on a.AetCode equals b.AetCode
                              select new
                              {
                                  Title = a.Title,
                                  Code = a.AetCode,
                                  Id = a.Id
                              }).DistinctBy(x => x.Code).OrderByDescending(x => x.Id).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetObjDependencyFund()
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var list = new List<Properties>();
                var project = new Properties
                {
                    Code = EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project),
                    Name = ProjectEnum.Project.DescriptionAttr()
                };
                list.Add(project);

                var contract = new Properties
                {
                    Code = EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract),
                    Name = ContractEnum.Contract.DescriptionAttr()
                };
                list.Add(contract);

                var poSupplier = new Properties
                {
                    Code = EnumHelper<PoSupplierEnum>.GetDisplayValue(PoSupplierEnum.PoSupplier),
                    Name = PoSupplierEnum.PoSupplier.DescriptionAttr()
                };
                list.Add(poSupplier);
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        //List danh sách thu chi tổng tiền của 1 user
        [HttpPost]
        //public object GetListAccEntryForUser(JTableAccEntryModel jTablePara, string userName)
        //{
        //    var msg = new JMessage() { Error = false };
        //    try
        //    {

        //        var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
        //        var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
        //        int intBegin = (jTablePara.CurrentPage - 1) * jTablePara.Length;
        //        var data = _context.FundAccEntrys.Where(x => !x.IsDeleted
        //        && x.CreatedBy == userName
        //        && (string.IsNullOrEmpty(jTablePara.AetCode) || (x.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Title) || (x.Title.ToLower().Contains(jTablePara.Title.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.AetType) || (x.AetType.Equals(jTablePara.AetType)))
        //                          && (string.IsNullOrEmpty(jTablePara.Currency) || (x.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Payer) || (x.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
        //                          && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate))
        //                          && ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate))).ToList();

        //        var query = from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.CreatedBy == userName)
        //                    join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false && x.CreatedBy == userName)
        //                    on a.CatCode equals b.CatCode
        //                    where (!a.IsDeleted
        //                   && (string.IsNullOrEmpty(jTablePara.AetCode) || (a.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Title) || (a.Title.ToLower().Contains(jTablePara.Title.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.AetType) || (a.AetType.Equals(jTablePara.AetType)))
        //                          && (string.IsNullOrEmpty(jTablePara.Currency) || (a.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Payer) || (a.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
        //                          && ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
        //                          && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate))
        //                                && ((a.IsPlan == false))
        //                                && (a.Status == "APPROVED"))
        //                    orderby a.CreatedTime
        //                    select new
        //                    {
        //                        CatName = b.CatName,
        //                        Id = a.Id,
        //                        AetCode = a.AetCode,
        //                        Title = a.Title,
        //                        AetType = a.AetType,
        //                        AetRelativeType = a.AetRelativeType,
        //                        AetDescription = a.AetDescription,
        //                        Total = a.Total,
        //                        Payer = a.Payer,
        //                        Currency = a.Currency,
        //                        Status = a.Status,
        //                        Receiptter = a.Receiptter
        //                    };
        //        decimal totalReceipt = query.Where(x => x.AetType == "Receipt").Sum(x => x.Total);
        //        decimal totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Total);
        //        var result = new FundAccEntryResultModel
        //        {
        //            ListFundAccEntry = data,
        //            TotalReceipt = totalReceipt,
        //            TotalExpense = totalExpense,
        //            TotalSurplus = totalReceipt - totalExpense
        //        };

        //        msg.Object = result;

        //        return Json(msg);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //    }

        //}
        [HttpPost]
        public object GetListPlanAccEntry(JTableAccEntryModel jTablePara)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBegin = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var data = (from a in _context.FundAccEntrys
                            join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                            on a.CatCode equals b.CatCode
                            where (!a.IsDeleted && a.IsPlan == true
                            && (string.IsNullOrEmpty(jTablePara.AetCode) || (a.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.Title) || (a.Title.ToLower().Contains(jTablePara.Title.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.AetType) || (a.AetType.Equals(jTablePara.AetType)))
                                   && (string.IsNullOrEmpty(jTablePara.Currency) || (a.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
                                   && (string.IsNullOrEmpty(jTablePara.Payer) || (a.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
                                   && ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
                                   && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate)))
                            select new ViewAccEntry
                            {
                                Id = a.Id,
                                AetCode = a.AetCode,
                                Title = a.Title,
                                AetType = a.AetType,
                                AetTypeName = a.AetType == "Expense" ? "Chi" : "Thu",
                                CatCode = a.CatCode,
                                CatName = b.CatName,
                                DeadLine = a.DeadLine,
                                Payer = a.Payer,
                                Receiptter = a.Receiptter,
                                Total = a.Total,
                                Currency = a.Currency,
                                CreatedBy = a.CreatedBy,
                                Status = a.Status,
                            });
                var query = (from a in _context.FundAccEntrys
                             join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                             on a.CatCode equals b.CatCode
                             where !a.IsDeleted && a.IsPlan == true
                             select new
                             {
                                 AetType = a.AetType,
                                 Total = a.Total,
                                 Currency = a.Currency,
                             });
                decimal totalReceipt = query.Where(x => x.AetType == "Receipt").Sum(x => x.Currency == "VND" ? x.Total : x.Total * (1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)));
                decimal totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Currency == "VND" ? x.Total : x.Total * (1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)));
                var data1 = data.OrderByDescending(x => x.Id).ThenBy(x => x.Title).Skip(intBegin).Take(jTablePara.Length).AsNoTracking().ToList();
                var result = new FundAccEntryResultModel
                {
                    ListFundAccEntry = data1,
                    TotalReceipt = totalReceipt,
                    TotalExpense = totalExpense,
                    TotalSurplus = totalReceipt - totalExpense
                };

                msg.Object = result;
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);

        }
        //[HttpPost]
        //public object GetListPlanAccEntryForUser(JTableAccEntryModel jTablePara, string userName)
        //{
        //    var msg = new JMessage() { Error = false };
        //    try
        //    {
        //        var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
        //        var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
        //        int intBegin = (jTablePara.CurrentPage - 1) * jTablePara.Length;
        //        var data = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.IsPlan == true && x.CreatedBy == userName
        //                          && (string.IsNullOrEmpty(jTablePara.AetCode) || (x.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Title) || (x.Title.ToLower().Contains(jTablePara.Title.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.AetType) || (x.AetType.Equals(jTablePara.AetType)))
        //                          && (string.IsNullOrEmpty(jTablePara.Currency) || (x.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Payer) || (x.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
        //                          && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate))
        //                          && ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate))).ToList();


        //        var query = from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.CreatedBy == userName)
        //                    join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false && x.CreatedBy == userName)
        //                    on a.CatCode equals b.CatCode
        //                    where (!a.IsDeleted
        //                   && (string.IsNullOrEmpty(jTablePara.AetCode) || (a.AetCode.ToLower().Contains(jTablePara.AetCode.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Title) || (a.Title.ToLower().Contains(jTablePara.Title.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.AetType) || (a.AetType.Equals(jTablePara.AetType)))
        //                          && (string.IsNullOrEmpty(jTablePara.Currency) || (a.Currency.ToLower().Contains(jTablePara.Currency.ToLower())))
        //                          && (string.IsNullOrEmpty(jTablePara.Payer) || (a.Payer.ToLower().Contains(jTablePara.Payer.ToLower())))
        //                          && ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
        //                          && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate))
        //                                && ((a.IsPlan == true))
        //                                && (a.Status == "APPROVED"))
        //                    orderby a.CreatedTime
        //                    select new
        //                    {
        //                        CatName = b.CatName,
        //                        Id = a.Id,
        //                        AetCode = a.AetCode,
        //                        Title = a.Title,
        //                        AetType = a.AetType,
        //                        AetRelativeType = a.AetRelativeType,
        //                        AetDescription = a.AetDescription,
        //                        Total = a.Total,
        //                        Payer = a.Payer,
        //                        Currency = a.Currency,
        //                        Status = a.Status,
        //                        Receiptter = a.Receiptter

        //                    };
        //        decimal totalReceipt = query.Where(x => x.AetType == "Receipt").Sum(x => x.Total);
        //        decimal totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Total);
        //        var result = new FundAccEntryResultModel
        //        {
        //            ListFundAccEntry = data,
        //            TotalReceipt = totalReceipt,
        //            TotalSurplus = totalReceipt - totalExpense
        //        };
        //        msg.Object = result;

        //        return Json(msg);
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //    }

        //}
        [HttpPost]
        public object DeleteAccEntry(int id)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var obj = _context.FundAccEntrys.FirstOrDefault(x => x.Id == id);
                if (obj != null)
                {
                    obj.DeletedBy = ESEIM.AppContext.UserName;
                    obj.DeletedTime = DateTime.Now;
                    obj.IsDeleted = true;
                    _context.FundAccEntrys.Remove(obj);
                    _context.SaveChanges();
                    msg.Title = "Xóa phiếu thu chi thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Xóa phiếu thu chi thất bại !";
                }
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Xóa phiếu thu chi thất bại !";
                return Json(msg);
            }
        }

        [HttpPost]
        public JsonResult InsertAccEntry([FromBody]FundAccEntryModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var checkExist = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.ToLower() == data.AetCode.ToLower());
                if (checkExist != null)
                {
                    msg.Error = true;
                    msg.Title = "Đã tồn tại phiếu thu chi !";
                }
                else
                {
                    //So sánh với số tiền phiếu cha (cùng loại thu/chi)
                    if (!string.IsNullOrEmpty(data.AetRelative))
                    {
                        var aetRelativeParent = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode == data.AetRelative);
                        //nếu cùng loại thu/chi => kiểm tra xem phiếu cha đã có bao nhiêu phiếu con => Tính ra số tiền cho phép còn lại
                        if (aetRelativeParent.AetType == data.AetType)
                        {
                            var aetRelativeChild = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.AetRelative == data.AetRelative && x.AetType == aetRelativeParent.AetType);
                            var totalChild = aetRelativeChild.Sum(x => x.Total);
                            if (data.Total > aetRelativeParent.Total - totalChild)
                            {
                                msg.Error = true;
                                msg.Title = "Số tiền trên phiếu lớn hơn số tiền được phép thu/chi của phiếu cha";
                                return Json(msg);
                            }
                        }
                    }

                    //So sánh với số tiền cần phải thu/chi của hợp đồng
                    if (!string.IsNullOrEmpty(data.ObjCode) && data.ObjType == "CONTRACT")
                    {
                        var contractPayment = _context.FundAccEntrys
                                            .Where(x => !x.IsDeleted
                                                        && x.IsPlan == false
                                                        && x.ObjType == "CONTRACT"
                                                        && x.ObjCode == data.ObjCode
                                                        && (x.CatCode == "ADVANCE_CONTRACT" || x.CatCode == "PAY_CONTRACT")
                                                        && x.AetType == "Receipt"
                                                        );
                        var totalPayment = contractPayment.Sum(x => x.Total);
                        var contract = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode == data.ObjCode);
                        var totalContract = contract.RealBudget;
                        if (data.Total > totalContract - totalPayment && data.AetType == "Receipt" && (data.CatCode == "ADVANCE_CONTRACT" || data.CatCode == "PAY_CONTRACT"))
                        {
                            msg.Error = true;
                            msg.Title = "Số tiền trên phiếu thu lớn hơn số tiền cần phải thu của hợp đồng";
                            return Json(msg);
                        }
                    }
                    //So sánh với số tiền của Dự án
                    if (!string.IsNullOrEmpty(data.ObjCode) && data.ObjType == "PROJECT")
                    {
                        var projectPayment = _context.FundAccEntrys
                                            .Where(x => !x.IsDeleted
                                                        && x.IsPlan == false
                                                        && x.ObjType == "PROJECT"
                                                        && x.ObjCode == data.ObjCode
                                                        && (x.CatCode == data.CatCode)
                                                        && x.AetType == data.AetType
                                                        );
                        var totalPayment = projectPayment.Sum(x => x.Total);
                        var project = _context.Projects.FirstOrDefault(x => !x.FlagDeleted && x.ProjectCode == data.ObjCode);
                        var totalProject = Convert.ToDecimal(project.Budget);
                        if (data.Total > totalProject - totalPayment)
                        {
                            msg.Error = true;
                            msg.Title = "Số tiền trên phiếu  lớn hơn số tiền của dự án";
                            return Json(msg);
                        }
                    }

                    if (!string.IsNullOrEmpty(data.AetRelative))
                    {
                        var query = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode == data.AetRelative && x.IsDeleted == false);
                        var total = _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.AetRelative == data.AetRelative && x.AetType == query.AetType && x.IsCompleted == true).Sum(x => x.Total) + data.Total;
                        if (query.Total >= total)
                        {
                            var isplan = true;
                            var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                            if (deadLine <= DateTime.Now)
                            {
                                isplan = false;
                            }

                            var obj = new FundAccEntry
                            {
                                AetCode = data.AetCode,
                                AetDescription = data.AetDescription,
                                AetRelative = data.AetRelative,
                                AetRelativeType = data.AetRelativeType,
                                AetType = data.AetType,
                                CatCode = data.CatCode,
                                CreatedTime = DateTime.Now,
                                Currency = data.Currency,
                                DeadLine = deadLine,
                                IsDeleted = false,
                                Payer = data.Payer,
                                Receiptter = data.Receiptter,
                                Title = data.Title,
                                Total = data.Total,
                                Status = data.AetType != "Receipt" ? "CREATED" : "APPROVED",
                                GoogleMap = data.GoogleMap,
                                Address = data.Address,
                                IsPlan = isplan,
                                IsCompleted = isplan == true ? false : (data.AetType != "Receipt" ? false : true),
                                ObjType = data.ObjType,
                                ObjCode = data.ObjCode,
                                CreatedBy = data.CreateBy,
                            };
                            _context.FundAccEntrys.Add(obj);
                            _context.SaveChanges();
                            var query1 = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode == data.AetRelative && x.IsDeleted == false);
                            var total1 = _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.AetRelative == data.AetRelative && x.AetType == query.AetType && x.IsCompleted == true).Sum(x => x.Total);
                            if (query1.Total <= total1)
                            {
                                query1.IsCompleted = true;

                            }
                            else
                            {
                                query1.IsCompleted = false;
                            }
                            _context.FundAccEntrys.Update(query1);
                            _context.SaveChanges();

                            var entryTracking = new FundAccEntryTracking
                            {
                                AetCode = obj.AetCode,
                                CreatedBy = data.CreateBy,
                                CreatedTime = DateTime.Now,
                                Action = obj.Status,
                                Note = obj.AetDescription
                            };
                            _context.FundAccEntryTrackings.Add(entryTracking);
                            _context.SaveChanges();

                            if (data.ListFileAccEntry.Count > 0)
                            {
                                foreach (var item in data.ListFileAccEntry)
                                {
                                    var fundFile = new FundFiles
                                    {
                                        AetCode = obj.AetCode,
                                        FileName = item.FileName,
                                        FilePath = item.FilePath,
                                        FileType = item.FileType,
                                        CreatedBy = data.CreateBy,
                                        CreatedTime = DateTime.Now,
                                    };
                                    _context.FundFiless.Add(fundFile);
                                }
                                _context.SaveChanges();
                            }
                            var header = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode.Equals(obj.AetCode));
                            //var detail = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.AetCode.Equals(obj.AetCode)).ToList();
                            if (header != null)
                            {
                                var logData = new
                                {
                                    Header = header,
                                    //Detail = detail
                                };
                                var listLogData = new List<object>();
                                listLogData.Add(logData);

                                header.LogData = JsonConvert.SerializeObject(listLogData);

                                _context.FundAccEntrys.Update(header);
                                _context.SaveChanges();
                            }
                            msg.ID = header.Id;
                            msg.Title = "Thêm phiếu thu chi thành công !";
                            SendPushNotificationTracking("FEA_MSG_SEND");
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Tổng phiếu con không được vượt quá phiếu cha";
                        }
                    }
                    else
                    {
                        var isplan = true;
                        var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                        if (deadLine <= DateTime.Now)
                        {
                            isplan = false;
                        }

                        var obj = new FundAccEntry
                        {
                            AetCode = data.AetCode,
                            AetDescription = data.AetDescription,
                            AetRelative = data.AetRelative,
                            AetRelativeType = data.AetRelativeType,
                            AetType = data.AetType,
                            CatCode = data.CatCode,
                            CreatedTime = DateTime.Now,
                            Currency = data.Currency,
                            DeadLine = deadLine,
                            IsDeleted = false,
                            Payer = data.Payer,
                            Receiptter = data.Receiptter,
                            Title = data.Title,
                            Total = data.Total,
                            Status = data.AetType != "Receipt" ? "CREATED" : "APPROVED",
                            GoogleMap = data.GoogleMap,
                            Address = data.Address,
                            IsPlan = isplan,
                            IsCompleted = isplan == true ? false : (data.AetType != "Receipt" ? false : true),
                            ObjType = data.ObjType,
                            ObjCode = data.ObjCode,
                            CreatedBy = data.CreateBy,
                        };
                        _context.FundAccEntrys.Add(obj);
                        _context.SaveChanges();
                        var entryTracking = new FundAccEntryTracking
                        {
                            AetCode = obj.AetCode,
                            CreatedBy = data.CreateBy,
                            CreatedTime = DateTime.Now,
                            Action = obj.Status,
                            Note = obj.AetDescription
                        };
                        _context.FundAccEntryTrackings.Add(entryTracking);
                        _context.SaveChanges();

                        if (data.ListFileAccEntry.Count > 0)
                        {
                            foreach (var item in data.ListFileAccEntry)
                            {
                                var fundFile = new FundFiles
                                {
                                    AetCode = obj.AetCode,
                                    FileName = item.FileName,
                                    FilePath = item.FilePath,
                                    FileType = item.FileType,
                                    CreatedBy = data.CreateBy,
                                    CreatedTime = DateTime.Now,
                                };
                                _context.FundFiless.Add(fundFile);
                            }
                            _context.SaveChanges();
                        }
                        var header = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode.Equals(obj.AetCode));
                        //var detail = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.AetCode.Equals(obj.AetCode)).ToList();
                        if (header != null)
                        {
                            var logData = new
                            {
                                Header = header,
                                //Detail = detail
                            };
                            var listLogData = new List<object>();
                            listLogData.Add(logData);

                            header.LogData = JsonConvert.SerializeObject(listLogData);

                            _context.FundAccEntrys.Update(header);
                            _context.SaveChanges();
                        }
                        msg.ID = header.Id;
                        msg.Title = "Thêm phiếu thu chi thành công !";
                        SendPushNotificationTracking("FEA_MSG_SEND");
                    }

                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
            //var msg = new JMessage() { Error = false };
            //try
            //{
            //    var checkExist = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.ToLower() == data.AetCode.ToLower());
            //    if (checkExist != null)
            //    {
            //        msg.Error = true;
            //        msg.Title = "Đã tồn tại phiếu thu chi !";
            //    }
            //    else
            //    {
            //        var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

            //        var obj = new FundAccEntry
            //        {
            //            AetCode = data.AetCode,
            //            AetDescription = data.AetDescription,
            //            AetRelative = data.AetRelative,
            //            AetRelativeType = data.AetRelativeType,
            //            AetType = data.AetType,
            //            CatCode = data.CatCode,
            //            CreatedBy = data.CreateBy,
            //            CreatedTime = DateTime.Now,
            //            Currency = data.Currency,
            //            DeadLine = deadLine,
            //            IsDeleted = false,
            //            IsPlan = data.IsPlan,
            //            Payer = data.Payer,
            //            Receiptter = data.Receiptter,
            //            Title = data.Title,
            //            Total = data.Total,
            //            Status = "CREATED",
            //            GoogleMap = data.GoogleMap,
            //            Address = data.Address,
            //            ObjCode = data.ObjCode,
            //            ObjType = data.ObjType
            //        };

            //        _context.FundAccEntrys.Add(obj);
            //        _context.SaveChanges();

            //        var entryTracking = new FundAccEntryTracking
            //        {
            //            AetCode = obj.AetCode,
            //            CreatedBy = User.Identity.Name,
            //            CreatedTime = DateTime.Now,
            //            Action = obj.Status,
            //            Note = obj.AetDescription
            //        };

            //        _context.FundAccEntryTrackings.Add(entryTracking);
            //        _context.SaveChanges();

            //        if (data.ListFileAccEntry.Count > 0)
            //        {
            //            foreach (var item in data.ListFileAccEntry)
            //            {
            //                var fundFile = new FundFiles
            //                {
            //                    AetCode = obj.AetCode,
            //                    FileName = item.FileName,
            //                    FilePath = item.FilePath,
            //                    FileType = item.FileType,
            //                    CreatedBy = User.Identity.Name,
            //                    CreatedTime = DateTime.Now,
            //                };

            //                _context.FundFiless.Add(fundFile);
            //            }

            //            _context.SaveChanges();
            //        }

            //        msg.Title = "Thêm phiếu thu chi thành công !";
            //    }
            //}
            //catch (Exception ex)
            //{
            //    msg.Error = true;
            //    msg.Title = "Có lỗi xảy ra khi thêm !";
            //}
            //return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertPlanAccEntry([FromBody]FundAccEntryModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var checkExist = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.ToLower() == data.AetCode.ToLower());
                if (checkExist != null)
                {
                    msg.Error = true;
                    msg.Title = "Đã tồn tại phiếu thu chi !";
                }
                else
                {
                    var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                    var obj = new FundAccEntry
                    {
                        AetCode = data.AetCode,
                        AetDescription = data.AetDescription,
                        AetRelative = data.AetRelative,
                        AetRelativeType = data.AetRelativeType,
                        AetType = data.AetType,
                        CatCode = data.CatCode,
                        CreatedBy = User.Identity.Name,
                        CreatedTime = DateTime.Now,
                        Currency = data.Currency,
                        DeadLine = deadLine,
                        IsDeleted = false,
                        IsPlan = data.IsPlan,
                        Payer = data.Payer,
                        Receiptter = data.Receiptter,
                        Title = data.Title,
                        Total = data.Total,
                        Status = "CREATED",
                        GoogleMap = data.GoogleMap,
                        Address = data.Address,
                    };

                    _context.FundAccEntrys.Add(obj);
                    _context.SaveChanges();


                    var entryTracking = new FundAccEntryTracking
                    {
                        AetCode = obj.AetCode,
                        CreatedBy = User.Identity.Name,
                        CreatedTime = DateTime.Now,
                        Action = obj.Status,
                        Note = obj.AetDescription
                    };

                    _context.FundAccEntryTrackings.Add(entryTracking);
                    _context.SaveChanges();

                    if (data.ListFileAccEntry.Count > 0)
                    {
                        foreach (var item in data.ListFileAccEntry)
                        {
                            var fundFile = new FundFiles
                            {
                                AetCode = obj.AetCode,
                                FileName = item.FileName,
                                FilePath = item.FilePath,
                                FileType = item.FileType,
                                CreatedBy = User.Identity.Name,
                                CreatedTime = DateTime.Now,
                            };

                            _context.FundFiless.Add(fundFile);
                        }

                        _context.SaveChanges();
                    }

                    msg.Title = "Thêm phiếu thu chi thành công !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertAccEntryTracking(string userName, string aetCode, string status, string note)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                //userName = User.Identity.Name;

                var checkRole = _context.Users.FirstOrDefault(x => x.UserName.ToLower() == userName.ToLower());
                if (checkRole != null)
                {
                    var type = checkRole.UserType;
                    var role = string.Empty;
                    var userInGroup = _context.AdUserInGroups.FirstOrDefault(x => x.UserId == checkRole.Id && x.IsMain == true);
                    if (userInGroup != null)
                    {
                        var roleId = userInGroup.RoleId;
                        var userRole = _context.Roles.FirstOrDefault(x => x.Id == roleId);
                        role = userRole.Code;
                    }
                    if (type == 10 || role == "001")
                    {
                        var entryTracking = new FundAccEntryTracking
                        {
                            AetCode = aetCode,
                            CreatedBy = User.Identity.Name,
                            CreatedTime = DateTime.Now,
                            Action = status,
                            Note = note
                        };
                        _context.FundAccEntryTrackings.Add(entryTracking);
                        _context.SaveChanges();

                        var obj = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.Equals(aetCode));
                        if (obj != null)
                        {
                            obj.Status = status;
                            _context.FundAccEntrys.Update(obj);
                            _context.SaveChanges();
                            var Notif1 = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.AetType == obj.AetType)
                                          join b in _context.FundAccEntryTrackings.Where(x => x.IsDeleted == false && x.Action == "APPROVED")
                                          on a.AetCode equals b.AetCode
                                          select new
                                          {
                                              a.CatCode,
                                              a.AetType,
                                              a.AetCode,
                                              a.DeadLine,
                                              a.Payer,
                                              a.Receiptter,
                                              a.Total,
                                          }).ToList();
                            var Notif2 = (from a in Notif1.Where(x => x.CatCode == obj.CatCode)
                                          join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == obj.AetType && x.catCode == obj.CatCode)
                                         on a.CatCode equals b.catCode
                                          where a.DeadLine >= b.fromTime && a.DeadLine <= b.toTime
                                          group a by new { a.CatCode, a.AetType }
                                         into list
                                          orderby list.Key.CatCode
                                          select new
                                          {
                                              list,
                                              total = list.Sum(x => x.Total),
                                              catCode = list.Key.CatCode,
                                              aetType = list.Key.AetType,
                                              maxDate = list.Max(x => x.DeadLine),
                                              minDate = list.Min(x => x.DeadLine),

                                          }).ToList();
                            var queryNotif = (from a in Notif2.Where(x => x.aetType == obj.AetType)
                                              join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == obj.AetType)
                                              on a.catCode equals b.catCode
                                              where a.maxDate <= b.toTime && a.minDate >= b.fromTime && a.total >= b.total
                                              select new
                                              {
                                                  id = b.id,
                                                  maxTotal = b.total,
                                                  fromDate = b.fromTime,
                                                  toDate = b.toTime,
                                                  aetType = b.aetType,
                                                  catCode = b.catCode,
                                                  currency = b.currency,
                                                  total = a.total,
                                              }).ToList();
                            int count = queryNotif.Count();
                            if (count > 0)
                            {
                                SendPushNotificationTracking("Có một danh mục thu chi vượt hạn mức");
                            }
                        }

                        msg.Title = "Cập nhật trạng thái thành công !";
                        SendPushNotificationTracking("Có phiếu thu / chi đã được duyệt");

                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Bạn không có quyền để thực hiện nghiệp vụ này !";
                    }
                }
                else
                {
                    msg.Title = "Thêm phiếu thu chi thành công !";
                    SendPushNotificationTracking("Có phiếu thu / chi mới được thêm");
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }

        [HttpGet]
        public JsonResult SendPushNotificationTracking(string message)
        {
            var msg = new JMessage() { Error = false };

            var query = (from a in _context.FcmTokens
                         join b in _context.Users on a.UserId equals b.Id
                         select new DeviceFcm
                         {
                             Token = a.Token,
                             Device = a.Device
                         }).AsNoTracking().Select(y => new DeviceFcm { Token = y.Token, Device = y.Device });
            if (query.Any())
            {
                var countToken = query.Count();
                if (countToken > 100000)
                {
                    int countPush = (query.Count() / 100000) + 1;
                    for (int i = 0; i < countPush; i++)
                    {
                        var listDevices = query.Skip(i * 1000).Take(100000).AsNoTracking().ToList();
                        var sendNotication = _notification.SendNotification("Khẩn cấp", message, listDevices, null);
                    }
                }
                else
                {
                    var sendNotication = _notification.SendNotification("Khẩn cấp", message, query.ToList(), null);
                }
            }
            else
            {
                msg.Error = true;
                msg.Title = "Chưa có tài khoản nào đăng nhập!";
            }

            return Json(msg);
        }

        [HttpPost]
        public object UpdateAccEntry([FromBody]FundAccEntryModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var checkRole = _context.Users.FirstOrDefault(x => x.UserName.ToLower() == data.CreateBy.ToLower());
                if (checkRole != null)
                {
                    var type = checkRole.UserType;
                    var role = string.Empty;
                    var userInGroup = _context.AdUserInGroups.FirstOrDefault(x => x.UserId == checkRole.Id && x.IsMain == true);
                    var obj = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode.ToLower() == data.AetCode.ToLower());
                    if (userInGroup != null)
                    {
                        var roleId = userInGroup.RoleId;
                        var userRole = _context.Roles.FirstOrDefault(x => x.Id == roleId);
                        role = userRole?.Code;
                    }
                    //if (type == 10 || role == "001")
                    //if (type == 10)
                    //{
                    //    msg.Error = true;
                    //    msg.Title = String.Format(_stringLocalizer["FAE_MSG_NO_RIGHT_EDIT"));//"Bạn không có quyền hạn để sửa phiếu thu / chi !";

                    //}
                    var action = _context.FundAccEntryTrackings.Where(x => x.AetCode == data.AetCode).MaxBy(f => f.Id).Action;
                    if ((action == "APPROVED" || action == "REFUSE") && obj.IsDeleted == false && obj.IsPlan == false)
                    {
                        msg.Error = true;
                        msg.Title = "Không được sửa phiếu thu chi đã được xét duyệt !";
                    }
                    else
                    {
                        if (obj != null)
                        {
                            //So sánh với số tiền phiếu cha (cùng loại thu/chi)
                            if (!string.IsNullOrEmpty(data.AetRelative))
                            {
                                var aetRelativeParent = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode == data.AetRelative);
                                //nếu cùng loại thu/chi => kiểm tra xem phiếu cha đã có bao nhiêu phiếu con khác phiếu con chỉnh sửa => Tính ra số tiền cho phép còn lại
                                if (aetRelativeParent.AetType == data.AetType)
                                {
                                    var aetRelativeChild = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.Id != obj.Id && x.AetRelative == data.AetRelative && x.AetType == aetRelativeParent.AetType);
                                    var totalChild = aetRelativeChild.Sum(x => x.Total);
                                    if (data.Total > aetRelativeParent.Total - totalChild)
                                    {
                                        msg.Error = true;
                                        msg.Title = "Số tiền trên phiếu lớn hơn số tiền được phép thu/chi của phiếu cha";
                                        //msg.Title = _stringLocalizer["FEA_MSG_MONEY_ON_ORDER"];
                                        return Json(msg);
                                    }
                                }
                            }

                            //So sánh với số tiền cần phải thu/chi của hợp đồng
                            if (!string.IsNullOrEmpty(data.ObjCode) && data.ObjType == "CONTRACT")
                            {
                                var contractPayment = _context.FundAccEntrys
                                                    .Where(x => !x.IsDeleted
                                                                && x.IsPlan == false
                                                                && x.ObjType == "CONTRACT"
                                                                && x.ObjCode == data.ObjCode
                                                                && (x.CatCode == "ADVANCE_CONTRACT" || x.CatCode == "PAY_CONTRACT")
                                                                && x.AetType == "Receipt"
                                                                );
                                var totalPayment = contractPayment.Sum(x => x.Total);
                                var contract = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode == data.ObjCode);
                                var totalContract = contract.RealBudget;
                                if (data.Total > totalContract - totalPayment + obj.Total && data.AetType == "Receipt" && (data.CatCode == "ADVANCE_CONTRACT" || data.CatCode == "PAY_CONTRACT"))
                                {
                                    msg.Error = true;
                                    msg.Title = "Số tiền trên phiếu thu lớn hơn số tiền cần phải thu của hợp đồng";
                                    return Json(msg);
                                }
                            }
                            //So sánh với số tiền của Dự án
                            if (!string.IsNullOrEmpty(data.ObjCode) && data.ObjType == "PROJECT")
                            {
                                var projectPayment = _context.FundAccEntrys
                                                    .Where(x => !x.IsDeleted
                                                                && x.IsPlan == false
                                                                && x.ObjType == "PROJECT"
                                                                && x.ObjCode == data.ObjCode
                                                                && (x.CatCode == data.CatCode)
                                                                && x.AetType == data.AetType
                                                                );
                                var totalPayment = projectPayment.Sum(x => x.Total);
                                var project = _context.Projects.FirstOrDefault(x => !x.FlagDeleted && x.ProjectCode == data.ObjCode);
                                var totalContract = Convert.ToDecimal(project.Budget);
                                if (data.Total > totalContract - totalPayment)
                                {
                                    msg.Error = true;
                                    msg.Title = "Số tiền trên phiếu lớn hơn số tiền của dự án";
                                    return Json(msg);
                                }
                            }
                            var total = _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.IsCompleted == true && x.AetRelative == data.AetCode && x.AetType == data.AetType).Sum(x => x.Total);
                            if (total > 0)
                            {
                                if (total > data.Total)
                                {
                                    msg.Error = true;
                                    msg.Title = "Tổng phiếu con không được lớn hơn phiếu cha";
                                    return Json(msg);
                                }
                                if (total == data.Total)
                                {
                                    obj.IsCompleted = true;
                                }
                                else
                                {
                                    obj.IsCompleted = false;
                                }
                            }
                            var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                            if (deadLine <= DateTime.Now)
                            {
                                obj.IsPlan = false;
                            }
                            else
                            {
                                obj.IsPlan = true;
                            }
                            obj.AetCode = data.AetCode;
                            obj.AetDescription = data.AetDescription;
                            obj.AetRelative = data.AetRelative;
                            obj.AetRelativeType = data.AetRelativeType;
                            obj.AetType = data.AetType;
                            obj.CatCode = data.CatCode;
                            obj.UpdatedBy = data.CreateBy;
                            obj.UpdatedTime = DateTime.Now;
                            obj.Currency = data.Currency;
                            obj.Payer = data.Payer;
                            obj.Receiptter = data.Receiptter;
                            obj.Title = data.Title;
                            obj.Total = data.Total;
                            obj.DeadLine = deadLine;
                            obj.Status = data.Status;
                            obj.GoogleMap = data.GoogleMap;
                            obj.Address = data.Address;
                            obj.ObjType = data.ObjType;
                            obj.ObjCode = data.ObjCode;
                            _context.FundAccEntrys.Update(obj);
                            _context.SaveChanges();

                            var updateTracking = false;
                            var objTracking = _context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(obj.AetCode));
                            if (objTracking != null)
                            {
                                if (objTracking.Action != obj.Status)
                                    updateTracking = true;
                            }

                            if (updateTracking)
                            {
                                var entryTracking = new FundAccEntryTracking
                                {
                                    AetCode = obj.AetCode,
                                    CreatedBy = data.CreateBy,
                                    CreatedTime = DateTime.Now,
                                    Action = obj.Status,
                                    Note = obj.AetDescription
                                };

                                _context.FundAccEntryTrackings.Add(entryTracking);
                                _context.SaveChanges();
                            }

                            if (data.ListFileAccEntry.Count > 0)
                            {
                                foreach (var item in data.ListFileAccEntry)
                                {
                                    var fundFileObj = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                                    if (fundFileObj == null)
                                    {
                                        var fundFile = new FundFiles
                                        {
                                            AetCode = obj.AetCode,
                                            FileName = item.FileName,
                                            FilePath = item.FilePath,
                                            FileType = item.FileType,
                                            CreatedBy = data.CreateBy,
                                            CreatedTime = DateTime.Now,
                                        };

                                        _context.FundFiless.Add(fundFile);
                                    }
                                    _context.SaveChanges();
                                }
                            }

                            if (data.ListFileAccEntryRemove.Count > 0)
                            {
                                foreach (var item in data.ListFileAccEntryRemove)
                                {
                                    var funFileRemove = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                                    if (funFileRemove != null)
                                        _context.FundFiless.Remove(funFileRemove);
                                }

                                _context.SaveChanges();
                            }

                            msg.Object = obj;
                            msg.Title = "Cập nhật phiếu thu chi thành công !";
                        }
                    }
                }
                var header = _context.FundAccEntrys.FirstOrDefault(x => !x.IsDeleted && x.AetCode.Equals(data.AetCode));
                if (header != null)
                {
                    var logData = new
                    {
                        Header = header,
                    };

                    var listLogData = new List<object>();

                    if (!string.IsNullOrEmpty(header.LogData))
                    {
                        listLogData = JsonConvert.DeserializeObject<List<object>>(header.LogData);
                        logData.Header.LogData = null;
                        listLogData.Add(logData);
                        header.LogData = JsonConvert.SerializeObject(listLogData);

                        _context.FundAccEntrys.Update(header);
                        _context.SaveChanges();
                    }
                    else
                    {
                        listLogData.Add(logData);

                        header.LogData = JsonConvert.SerializeObject(listLogData);

                        _context.FundAccEntrys.Update(header);
                        _context.SaveChanges();
                    }
                }
                //var obj = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.ToLower() == data.AetCode.ToLower());
                //if (obj != null)
                //{
                //    var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                //    obj.AetCode = data.AetCode;
                //    obj.AetDescription = data.AetDescription;
                //    obj.AetRelative = data.AetRelative;
                //    obj.AetRelativeType = data.AetRelativeType;
                //    obj.AetType = data.AetType;
                //    obj.CatCode = data.CatCode;
                //    obj.UpdatedBy = User.Identity.Name;
                //    obj.UpdatedTime = DateTime.Now;
                //    obj.IsPlan = data.IsPlan;
                //    obj.Payer = data.Payer;
                //    obj.Receiptter = data.Receiptter;
                //    obj.Title = data.Title;
                //    obj.Total = data.Total;
                //    obj.DeadLine = deadLine;
                //    obj.Status = data.Status;
                //    obj.GoogleMap = data.GoogleMap;
                //    obj.Address = data.Address;

                //    _context.FundAccEntrys.Update(obj);
                //    _context.SaveChanges();

                //    var updateTracking = false;
                //    var objTracking = _context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(obj.AetCode));
                //    if (objTracking != null)
                //    {
                //        if (objTracking.Action != obj.Status)
                //            updateTracking = true;
                //    }

                //    if (updateTracking)
                //    {
                //        var entryTracking = new FundAccEntryTracking
                //        {
                //            AetCode = obj.AetCode,
                //            CreatedBy = User.Identity.Name,
                //            CreatedTime = DateTime.Now,
                //            Action = obj.Status,
                //            Note = obj.AetDescription
                //        };

                //        _context.FundAccEntryTrackings.Add(entryTracking);
                //        _context.SaveChanges();
                //    }

                //    if (data.ListFileAccEntry.Count > 0)
                //    {
                //        foreach (var item in data.ListFileAccEntry)
                //        {
                //            var fundFileObj = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                //            if (fundFileObj == null)
                //            {
                //                var fundFile = new FundFiles
                //                {
                //                    AetCode = obj.AetCode,
                //                    FileName = item.FileName,
                //                    FilePath = item.FilePath,
                //                    FileType = item.FileType,
                //                    CreatedBy = User.Identity.Name,
                //                    CreatedTime = DateTime.Now,
                //                };

                //                _context.FundFiless.Add(fundFile);
                //            }
                //            _context.SaveChanges();
                //        }
                //    }

                //    if (data.ListFileAccEntryRemove.Count > 0)
                //    {
                //        foreach (var item in data.ListFileAccEntryRemove)
                //        {
                //            var funFileRemove = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                //            if (funFileRemove != null)
                //                _context.FundFiless.Remove(funFileRemove);
                //        }

                //        _context.SaveChanges();
                //    }

                //    msg.Object = obj;
                //    msg.Title = "Cập nhật phiếu thu chi thành công !";
                //}
                //else
                //{
                //    msg.Error = true;
                //    msg.Title = "Cập nhật phiếu thu chi thất bại !";
                //}
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi cập nhật!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object UpdatePlanAccEntry([FromBody]FundAccEntryModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = _context.FundAccEntrys.FirstOrDefault(x => x.AetCode.ToLower() == data.AetCode.ToLower());
                if (obj != null)
                {
                    var deadLine = !string.IsNullOrEmpty(data.DeadLine) ? DateTime.ParseExact(data.DeadLine, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                    obj.AetCode = data.AetCode;
                    obj.AetDescription = data.AetDescription;
                    obj.AetRelative = data.AetRelative;
                    obj.AetRelativeType = data.AetRelativeType;
                    obj.AetType = data.AetType;
                    obj.CatCode = data.CatCode;
                    obj.UpdatedBy = data.CreateBy;
                    obj.UpdatedTime = DateTime.Now;
                    obj.IsPlan = data.IsPlan;
                    obj.Payer = data.Payer;
                    obj.Receiptter = data.Receiptter;
                    obj.Title = data.Title;
                    obj.Total = data.Total;
                    obj.DeadLine = deadLine;
                    obj.Status = data.Status;
                    obj.GoogleMap = data.GoogleMap;
                    obj.Address = data.Address;

                    _context.FundAccEntrys.Update(obj);
                    _context.SaveChanges();

                    var updateTracking = false;
                    var objTracking = _context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(obj.AetCode));
                    if (objTracking != null)
                    {
                        if (objTracking.Action != obj.Status)
                            updateTracking = true;
                    }

                    if (updateTracking)
                    {
                        var entryTracking = new FundAccEntryTracking
                        {
                            AetCode = obj.AetCode,
                            CreatedBy = data.CreateBy,
                            CreatedTime = DateTime.Now,
                            Action = obj.Status,
                            Note = obj.AetDescription
                        };

                        _context.FundAccEntryTrackings.Add(entryTracking);
                        _context.SaveChanges();
                    }

                    if (data.ListFileAccEntry.Count > 0)
                    {
                        foreach (var item in data.ListFileAccEntry)
                        {
                            var fundFileObj = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                            if (fundFileObj == null)
                            {
                                var fundFile = new FundFiles
                                {
                                    AetCode = obj.AetCode,
                                    FileName = item.FileName,
                                    FilePath = item.FilePath,
                                    FileType = item.FileType,
                                    CreatedBy = data.CreateBy,
                                    CreatedTime = DateTime.Now,
                                };

                                _context.FundFiless.Add(fundFile);
                            }
                            _context.SaveChanges();
                        }
                    }

                    if (data.ListFileAccEntryRemove.Count > 0)
                    {
                        foreach (var item in data.ListFileAccEntryRemove)
                        {
                            var funFileRemove = _context.FundFiless.FirstOrDefault(x => x.Id == item.Id);
                            if (funFileRemove != null)
                                _context.FundFiless.Remove(funFileRemove);
                        }

                        _context.SaveChanges();
                    }

                    msg.Object = obj;
                    msg.Title = "Cập nhật phiếu thu chi thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Cập nhật phiếu thu chi thất bại !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi cập nhật!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailAccEntry(int id, string userName)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var isPermission = true;
                var isShow = true;

                var checkRole = _context.Users.FirstOrDefault(x => x.UserName.ToLower() == userName.ToLower());
                if (checkRole != null)
                {
                    var type = checkRole.UserType;
                    var role = string.Empty;
                    var userInGroup = _context.AdUserInGroups.FirstOrDefault(x => x.UserId == checkRole.Id && x.IsMain == true);
                    if (userInGroup != null)
                    {
                        var roleId = userInGroup.RoleId;
                        var userRole = _context.Roles.FirstOrDefault(x => x.Id == roleId);
                        role = userRole?.Code;
                    }
                    //if (type == 10 || role == "001")
                    if (type == 10)
                    {
                        isPermission = true;
                        isShow = false;
                    }
                }
                var show = _context.FundAccEntrys.FirstOrDefault(x => x.Id == id);

                if (show.IsPlan == true)
                {
                    isShow = false;

                }
                if (show.IsPlan == false && (_context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(show.AetCode)).Action == "APPROVED" || _context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(show.AetCode)).Action == "REFUSE"))
                {
                    isShow = true;
                }

                var query = _context.FundAccEntrys.ToList();

                var data = from a in query
                           where a.Id == id
                           select new
                           {
                               a.Id,
                               a.AetCode,
                               a.AetType,
                               a.Title,
                               a.CatCode,
                               a.AetRelative,
                               a.AetRelativeType,
                               a.AetDescription,
                               a.Total,
                               a.Payer,
                               a.Currency,
                               DeadLine = a.DeadLine != null ? a.DeadLine.Value.ToString("dd/MM/yyyy") : null,
                               a.IsPlan,
                               a.Status,
                               a.GoogleMap,
                               a.Address,
                               a.Receiptter,
                               Action = _context.FundAccEntryTrackings.Any(x => x.AetCode.Equals(a.AetCode))
                                        ? _context.FundAccEntryTrackings.LastOrDefault(x => x.AetCode.Equals(a.AetCode)).Action
                                        : null,
                               IsPermission = isPermission,
                               IsShow = isShow,
                               a.ObjCode,
                               a.ObjType,
                               a.CreatedBy,
                               ListFileAccEntry = _context.FundFiless.Where(x => x.AetCode.Equals(a.AetCode)).ToList()
                           };
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi lấy thông tin!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListAccTracking()
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = (from a in _context.FundAccEntryTrackings
                           where a.IsDeleted == false
                           select new
                           {
                               a.Id,
                               a.Action,
                               a.AetCode,
                               a.FromDevice,
                               a.LocationGps,
                               a.LocationText,
                               a.Note,
                               a.IsDeleted,
                               a.CreatedBy,
                               CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : null,
                           }).ToList();

                msg.Object = obj;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi lấy thông tin!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetAccTrackingDetail(string aetCode)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = (from a in _context.FundAccEntryTrackings
                           where a.IsDeleted == false && a.AetCode.Equals(aetCode)
                           select new
                           {
                               a.Id,
                               a.Action,
                               a.AetCode,
                               a.FromDevice,
                               a.LocationGps,
                               a.LocationText,
                               a.Note,
                               a.IsDeleted,
                               a.CreatedBy,
                               CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : null,
                           }).ToList();

                msg.Object = obj;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi lấy thông tin!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListAetRelative()
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = (from a in _context.FundCatReptExpss
                           where a.IsDeleted == false
                           select new
                           {
                               a.Id,
                               a.CatCode,
                               a.CatName,
                               a.CatParent,
                               a.CatType,
                               a.Note,
                               a.IsDeleted,
                               a.CreatedBy,
                               CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : null,
                           }).ToList();

                msg.Object = obj;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi lấy thông tin!";
            }
            return Json(msg);
        }

        //Lập cảnh báo tài chính
        [HttpPost]
        public JsonResult GetListParamForWarning()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //var data = _context.ParamForWarnings.Where(x => !x.isDeleted).ToList();
                var query = (from a in _context.ParamForWarnings.Where(x => !x.isDeleted)
                             join b in _context.FundCatReptExpss.Where(x => !x.IsDeleted) on a.catCode equals b.CatCode
                             orderby a.createdTime descending
                             select new
                             {
                                 Id = a.id,
                                 Aettype = a.aetType,
                                 CatCode = a.catCode,
                                 Total = a.total,
                                 currency = a.currency,
                                 FromTime = a.fromTime,
                                 ToTime = a.toTime,
                                 CatName = b.CatName

                             }).ToList();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public object InsertParamForWarning(ParamForWarningModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var model = _context.ParamForWarnings.FirstOrDefault(x => x.aetType.ToLower() == data.AETType.ToLower() && x.catCode.ToLower() == data.CatCode.ToLower() && !x.isDeleted);
                if (model == null)
                {
                    var fromDate = !string.IsNullOrEmpty(data.FromTime) ? DateTime.ParseExact(data.FromTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                    var toDate = !string.IsNullOrEmpty(data.ToTime) ? DateTime.ParseExact(data.ToTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                    var obj = new ParamForWarning
                    {
                        aetType = data.AETType,
                        catCode = data.CatCode,
                        currency = data.Currency,
                        total = !string.IsNullOrEmpty(data.Total) ? Convert.ToDecimal(data.Total) : 0,
                        createdBy = data.CreatedBy,
                        createdTime = DateTime.Now,
                        fromTime = fromDate,
                        toTime = toDate
                    };

                    _context.ParamForWarnings.Add(obj);
                    _context.SaveChanges();

                    msg.Title = "Thêm thiết lập cảnh báo thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Thiết lập cảnh báo đã tồn tại !";
                }

                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm!";
                msg.Object = ex;
                return Json(msg);
            }
        }

        [HttpPost]
        public object UpdateParamForWarning(ParamForWarningModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var fromDate = !string.IsNullOrEmpty(data.FromTime) ? DateTime.ParseExact(data.FromTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(data.ToTime) ? DateTime.ParseExact(data.ToTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var obj = _context.ParamForWarnings.FirstOrDefault(x => x.aetType.ToLower() == data.AETType.ToLower() && x.catCode.ToLower() == data.CatCode.ToLower());
                if (obj != null)
                {
                    obj.aetType = data.AETType;
                    obj.catCode = data.CatCode;
                    obj.currency = data.Currency;
                    obj.total = !string.IsNullOrEmpty(data.Total) ? Convert.ToDecimal(data.Total) : 0;
                    obj.fromTime = fromDate;
                    obj.toTime = toDate;
                    obj.updatedBy = data.UpdatedBy;
                    obj.updatedTime = DateTime.Now;

                    _context.ParamForWarnings.Update(obj);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thiết lập cảnh báo thành công";
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi cập nhật!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object DeleteParamForWarning(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = _context.ParamForWarnings.FirstOrDefault(x => x.id == id);
                if (obj != null)
                {
                    obj.deletedBy = User.Identity.Name;
                    obj.deletedTime = DateTime.Now;
                    obj.isDeleted = true;

                    _context.ParamForWarnings.Update(obj);
                    _context.SaveChanges();

                    msg.Object = obj;
                    msg.Title = "Xóa thiết lập cảnh báo thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Xóa thiết lập cảnh báo thất bại !";
                }

                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi xóa!";
                msg.Object = ex;
                return Json(msg);
            }
        }
        public class Tree
        {
            public int Id { get; set; }
            public string Code { get; set; }
            public string Title { get; set; }
            public int? ParentId { get; set; }
            public int? Order { get; set; }
            public bool HasChild { get; set; }
            public int Level { get; set; }
            public string CatCode { get; set; }
            public string CatName { get; set; }
            public string CatParent { get; set; }
            public string CatType { get; set; }
            public string Note { get; set; }
            public bool IsDeleted { get; set; }
        }
        public List<Tree> GetTreeData(SearchChartModel obj)
        {

            if (!string.IsNullOrEmpty(obj.CatParent))
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), obj.CatParent, new List<Tree>(), 0);
                return dataOrder;
            }
            else
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), "CAT_FUND", new List<Tree>(), 0);
                return dataOrder;
            }



        }
        private List<Tree> GetSubTreeData(List<FundCatReptExps> data, string catParent, List<Tree> lstCategories, int tab)
        {
            //tab += "- ";
            if (data.Any(x => x.CatParent == catParent))
            {
                var contents = data.Where(x => x.CatParent == catParent && x.IsDeleted == false).OrderBy(x => x.CatName).ToList();
                foreach (var item in contents)
                {
                    var category = new Tree
                    {
                        Id = item.Id,
                        Code = item.CatCode,
                        Title = item.CatName,
                        Level = tab,
                        HasChild = _context.FundCatReptExpss.Where(x => x.IsDeleted == false).Any(x => x.CatParent == item.CatCode),
                        CatCode = item.CatCode,
                        CatParent = item.CatParent,
                        CatName = item.CatName,
                        CatType = item.CatType,


                    };
                    if (!category.HasChild)
                    {
                        lstCategories.Add(category);
                    };
                    if (category.HasChild) { GetSubTreeData(data, item.CatCode, lstCategories, tab + 1); }
                }
            }
            else
            {
                var query = data.FirstOrDefault(x => x.CatCode == catParent && x.IsDeleted == false);
                var category = new Tree
                {
                    Id = query.Id,
                    Code = query.CatCode,
                    Title = query.CatName,
                    Level = tab,
                    HasChild = false,
                    CatCode = query.CatCode,
                    CatParent = query.CatParent,
                    CatName = query.CatName,
                    CatType = query.CatType,

                };
                lstCategories.Add(category);
            }

            return lstCategories;
        }
        public List<Tree> GetTreeDataExpense(SearchChartModel obj)
        {

            if (!string.IsNullOrEmpty(obj.CatParent))
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), obj.CatCodeExpense, new List<Tree>(), 0);
                return dataOrder;
            }
            else
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), "CAT_FUND", new List<Tree>(), 0);
                return dataOrder;
            }



        }
        public List<Tree> GetTreeDataReceipte(SearchChartModel obj)
        {

            if (!string.IsNullOrEmpty(obj.CatParent))
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), obj.CatCodeReceipte, new List<Tree>(), 0);
                return dataOrder;
            }
            else
            {
                var data = _context.FundCatReptExpss.OrderBy(x => x.CatName).AsNoTracking();
                var dataOrder = GetSubTreeData(data.ToList(), "CAT_FUND", new List<Tree>(), 0);
                return dataOrder;
            }



        }

        [HttpPost]
        public (object totalReceipt, object totalExpense, object totalReceiptPlan, object totalExpensePlan) SearchChart(SearchChartModel obj)
        {
            var data = GetTreeData(obj);
            List<SearchChartResponse> totalReceipt = new List<SearchChartResponse>();
            List<SearchChartResponse> totalExpense = new List<SearchChartResponse>();
            List<SearchChartResponse> totalReceiptPlan = new List<SearchChartResponse>();
            List<SearchChartResponse> totalExpensePlan = new List<SearchChartResponse>();
            try
            {
                DateTime? fromDate = !string.IsNullOrEmpty(obj.FromDate) ? DateTime.ParseExact(obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(obj.ToDate) ? DateTime.ParseExact(obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                if (string.IsNullOrEmpty(obj.CatCodeExpense))
                {
                    totalExpense = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.IsCompleted == true)
                                    join b in data on a.CatCode equals b.CatCode
                                    let date = a.DeadLine.Value.Date
                                    where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                    && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                    && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Expense") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Expense" && a.AetType == obj.AetType))
                                    //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(b.CatParent) && b.CatParent == obj.CatParent))
                                    group new { a } by new { date }
                                    into grp
                                    orderby grp.Key.date
                                    select new SearchChartResponse
                                    {
                                        Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                        Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                    })
                                    .ToList();
                    totalExpensePlan = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false)
                                        join b in data on a.CatCode equals b.CatCode
                                        let date = a.DeadLine.Value.Date
                                        where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                        && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                        && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Expense") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Expense" && a.AetType == obj.AetType))
                                        //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(b.CatParent) && b.CatParent == obj.CatParent))
                                        group new { a } by new { date }
                                    into grp
                                        orderby grp.Key.date
                                        select new SearchChartResponse
                                        {
                                            Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                            Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                        })
                                    .ToList();
                }
                else
                {
                    var dataExpense = GetTreeDataExpense(obj);
                    totalExpense = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.IsCompleted == true)
                                        //join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                                    join b in dataExpense on a.CatCode equals b.CatCode
                                    let date = a.DeadLine.Value.Date
                                    where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                    && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                    && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Expense") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Expense" && a.AetType == obj.AetType))
                                    //&& (!string.IsNullOrEmpty(a.CatCode) && a.CatCode == obj.CatCodeExpense)
                                    group new { a } by new { date }
                                     into grp
                                    orderby grp.Key.date
                                    select new SearchChartResponse
                                    {
                                        Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                        Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                    })
                                .ToList();
                    totalExpensePlan = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false)
                                            //join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                                        join b in dataExpense on a.CatCode equals b.CatCode
                                        let date = a.DeadLine.Value.Date
                                        where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                        && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                        && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Expense") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Expense" && a.AetType == obj.AetType))
                                        //&& (!string.IsNullOrEmpty(a.CatCode) && a.CatCode == obj.CatCodeExpense)
                                        group new { a } by new { date }
                                     into grp
                                        orderby grp.Key.date
                                        select new SearchChartResponse
                                        {
                                            Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                            Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                        })
                                .ToList();
                }
                if (string.IsNullOrEmpty(obj.CatCodeReceipte))
                {
                    totalReceipt = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.IsCompleted == true)
                                    join b in data on a.CatCode equals b.CatCode
                                    let date = a.DeadLine.Value.Date
                                    where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                    && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                    && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Receipt") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Receipt" && a.AetType == obj.AetType))
                                    //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(b.CatParent) && b.CatParent == obj.CatParent))
                                    group new { a } by new { date }
                                into grp
                                    orderby grp.Key.date
                                    select new SearchChartResponse
                                    {
                                        Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                        Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                    })
                                .ToList();
                    totalReceiptPlan = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false)
                                        join b in data on a.CatCode equals b.CatCode
                                        let date = a.DeadLine.Value.Date
                                        where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                        && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                        && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Receipt") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Receipt" && a.AetType == obj.AetType))
                                        //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(b.CatParent) && b.CatParent == obj.CatParent))
                                        group new { a } by new { date }
                                into grp
                                        orderby grp.Key.date
                                        select new SearchChartResponse
                                        {
                                            Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                            Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                        })
                                .ToList();
                }
                else
                {
                    var dataReceipt = GetTreeDataReceipte(obj);

                    totalReceipt = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.IsCompleted == true)
                                        //join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                                    join b in dataReceipt on a.CatCode equals b.CatCode
                                    let date = a.DeadLine.Value.Date
                                    where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                    && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                    && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Receipt") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Receipt" && a.AetType == obj.AetType))
                                    //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(a.CatCode) && a.CatCode == obj.CatCodeReceipte))
                                    group new { a } by new { date }
                                    into grp
                                    orderby grp.Key.date
                                    select new SearchChartResponse
                                    {
                                        Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                        Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                    })
                                    .ToList();
                    totalReceiptPlan = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false)
                                            //join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                                        join b in dataReceipt on a.CatCode equals b.CatCode
                                        let date = a.DeadLine.Value.Date
                                        where (fromDate == null || (a.DeadLine.Value.Date >= fromDate.Value.Date))
                                        && (toDate == null || (a.DeadLine.Value.Date <= toDate.Value.Date))
                                        && ((string.IsNullOrEmpty(obj.AetType) && a.AetType == "Receipt") || (!string.IsNullOrEmpty(a.AetType) && a.AetType == "Receipt" && a.AetType == obj.AetType))
                                        //&& (string.IsNullOrEmpty(obj.CatParent) || (!string.IsNullOrEmpty(a.CatCode) && a.CatCode == obj.CatCodeReceipte))
                                        group new { a } by new { date }
                                   into grp
                                        orderby grp.Key.date
                                        select new SearchChartResponse
                                        {
                                            Total = Math.Round(grp.Sum(x => x.a.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.a.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate)), 2),
                                            Date = grp.Key.date.ToString("dd/MM/yyyy"),
                                        })
                                   .ToList();
                }

            }
            catch (Exception ex)
            {

            }
            return (totalReceipt, totalExpense, totalReceiptPlan, totalExpensePlan);
        }
        #endregion
        [HttpPost]
        public object InsertSMS([FromBody]SMSModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                foreach (var item in data.FundLoaddingSMSBank)
                {
                    if (_context.FundLoaddingSMSBanks.FirstOrDefault(x => x.SMS_Raw.Equals(item.SMS_Raw) && x.IsDeleted == false) != null)
                    {
                        msg.Error = true;
                        msg.Title = "SMS đã tồn tại";
                    }
                    else
                    {
                        var obj = new FundLoaddingSMSBank
                        {
                            SMS_Raw = item.SMS_Raw,
                            SMS_Status = "NoProcess",
                            Created_Date = DateTime.Now,
                            Created_By = User.Identity.Name,
                            Bank_Name = item.Bank_Name,
                        };
                        _context.FundLoaddingSMSBanks.Add(obj);
                        _context.SaveChanges();

                    }

                }
                return msg;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi tải lên SMS";
                return msg;
            }

        }
        [HttpPost]
        public object GetListSMSNoProcess()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = (from a in _context.FundLoaddingSMSBanks.Where(x => x.IsDeleted == false)
                            where a.SMS_Status == "NoProcess"
                            select new
                            {
                                a.Id,
                                a.SMS_Raw,
                                a.Bank_Name,
                                a.Created_Date,
                            }).ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return msg;

        }
        [HttpPost]
        public object UpdateSMS([FromBody]SMSModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                foreach (var item in data.FundLoaddingSMSBank)
                {
                    if (item.Id > 0)
                    {
                        var query = _context.FundLoaddingSMSBanks.FirstOrDefault(x => x.Id == item.Id);

                        query.SMS_Status = "Processed";

                        if (item.Bank_Name == "VIETCOMBANK")
                        {
                            var text = item.SMS_Raw.Split(" ");
                            if (item.SMS_Raw.IndexOf("+") > 0)
                            {
                                query.ACC_Receiver = text[2];
                                query.MoneyTranfer = text[3];
                                query.ACC_Balance = text[8];
                                query.Currency = text[3].Substring(text[3].Length - 3);
                                query.CurrencyBalance = text[8].Substring(text[8].Length - 4);
                            }
                            else
                            {
                                query.ACC_Sender = text[2];
                                query.MoneyTranfer = text[3];
                                query.ACC_Balance = text[8];
                                query.Currency = text[3].Substring(text[3].Length - 3);
                                query.CurrencyBalance = text[8].Substring(text[8].Length - 4);
                            }
                        }
                        if (item.Bank_Name == "TECHCOMBANK")
                        {
                            var text = item.SMS_Raw.Split(" ");
                            if (item.SMS_Raw.IndexOf("+") > 0)
                            {
                                query.ACC_Receiver = text[1];
                                query.MoneyTranfer = text[4].Substring(3);
                                query.ACC_Balance = text[6].Substring(3);
                            }
                            else
                            {
                                query.ACC_Sender = text[1];
                                query.MoneyTranfer = text[4].Substring(3);
                                query.ACC_Balance = text[6].Substring(3);
                            }

                        }
                        _context.FundLoaddingSMSBanks.Update(query);
                        _context.SaveChanges();

                    }
                    else
                    {

                        var obj = new FundLoaddingSMSBank
                        {

                            SMS_Raw = item.SMS_Raw,
                            Created_Date = DateTime.Now,
                            Created_By = User.Identity.Name,
                            Bank_Name = item.Bank_Name,
                            SMS_Status = "Processed",
                        };
                        if (item.Bank_Name == "VIETCOMBANK")
                        {
                            var text = item.SMS_Raw.Split(" ");
                            if (item.SMS_Raw.IndexOf("+") > 0)
                            {
                                obj.ACC_Receiver = text[2];
                                obj.MoneyTranfer = text[3].Substring(0, text[3].Length - 3);
                                obj.ACC_Balance = text[8].Substring(0, text[8].Length - 4);
                                obj.Currency = text[3].Substring(text[3].Length - 3);
                                obj.CurrencyBalance = text[8].Substring(text[8].Length - 4);
                            }
                            else
                            {
                                obj.ACC_Sender = text[2];
                                obj.MoneyTranfer = text[3].Substring(0, text[3].Length - 3);
                                obj.ACC_Balance = text[8].Substring(0, text[8].Length - 4);
                                obj.Currency = text[3].Substring(text[3].Length - 3);
                                obj.CurrencyBalance = text[8].Substring(text[8].Length - 4);
                            }
                        }
                        if (item.Bank_Name == "VIETTINBANK")
                        {
                            var text = item.SMS_Raw.Split(" ");
                            if (item.SMS_Raw.IndexOf("+") > 0)
                            {

                                obj.ACC_Receiver = text[1];
                                obj.MoneyTranfer = text[4].Substring(3);
                                obj.ACC_Balance = text[6].Substring(3);
                            }
                            else
                            {
                                obj.Id = item.Id;
                                obj.ACC_Sender = text[1];
                                obj.MoneyTranfer = text[4].Substring(3);
                                obj.ACC_Balance = text[6].Substring(3);
                            }

                        }
                        _context.FundLoaddingSMSBanks.Add(obj);
                        _context.SaveChanges();


                    }
                }
                return msg;
            }
            catch
            {
                msg.Error = true;
                return msg;
            }
        }
        [HttpPost]
        public object GetListSMSProcessed()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = (from a in _context.FundLoaddingSMSBanks.Where(x => x.IsDeleted == false)
                            where a.SMS_Status == "Processed"
                            select new
                            {
                                a.Id,
                                a.ACC_Sender,
                                a.Sender,
                                a.ACC_Receiver,
                                a.Receiver,
                                a.MoneyTranfer,
                                a.Currency,
                                a.ACC_Balance,
                                a.CurrencyBalance,
                                a.Bank_Name,
                                a.SMS_Raw,
                                a.Created_Date,
                            }).ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return msg;

        }

        #region IOT
        [HttpPost]
        public JsonResult GetListCarInOut()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.IotCarInOuts.ToList();
                msg.Object = list;
                msg.Title = "Lấy dữ liệu thành công";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListWarningSetting()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.IotWarningSettings.Where(x => x.IsDeleted != true).ToList();
                msg.Object = list;
                msg.Title = "Lấy dữ liệu thành công";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListFaceID()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.ObeAiRecognitionTrackings.ToList();
                msg.Object = list;
                msg.Title = "Lấy dữ liệu thành công";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListSetUpAlert()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.IotSetUpAlerts.ToList();
                msg.Object = list;
                msg.Title = "Lấy dữ liệu thành công";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListAnalysisAction()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var list = _context.IotAnalysis_Actions.ToList();
                msg.Object = list;
                msg.Title = "Lấy dữ liệu thành công";
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
            }
            return Json(msg);
        }
        [HttpPost]

        //List danh sách thiết lập tham số có tìm kiếm
        [HttpPost]
        public object GetListSensor(SearchSensors jTablePara)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBegin = (jTablePara.CurrentPage - 1) * jTablePara.Length;
                var data = _context.IotSensors.Where(x => (string.IsNullOrEmpty(jTablePara.Location) || (x.Location.ToLower().Contains(jTablePara.Location.ToLower())))
                                  && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate))
                                  && ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate))).ToList();

                msg.Object = data;

                return Json(msg);
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public JsonResult InsertIOTWarningSeting([FromBody]IotWarningSettingModel data)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = new IotWarningSetting
                {
                    CloseBelow = data.CloseBelow,
                    CloseOn = data.CloseBelow,
                    CreatedBy = User.Identity.Name,
                    CreatedTime = DateTime.Now,
                    DeviceCode = data.DeviceCode,
                    ObjType = data.ObjType,
                    Location = data.Location,
                    IsDeleted = false,
                };

                _context.IotWarningSettings.Add(obj);
                _context.SaveChanges();
                msg.Object = data;
                msg.Title = "Thêm cấu hình tham số thành công !";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteIOTWarningSeting(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var obj = _context.IotWarningSettings.FirstOrDefault(x => x.Id == id);
                if (obj != null)
                {
                    obj.IsDeleted = true;
                    obj.DeletedBy = User.Identity.Name;
                    obj.DeletedTime = DateTime.Now;
                    obj.IsDeleted = true;

                    _context.IotWarningSettings.Update(obj);
                    _context.SaveChanges();
                    msg.Object = obj;
                    msg.Title = "Xóa cấu hình tham số thành công !";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Xóa cấu hình tham số thất bại !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }
        #endregion
        [HttpPost]
        public object GetCataloguesName()
        {
            var query = from a in _context.MaterialProducts
                        join b in _context.ProductAttributes on a.ProductCode equals b.ProductCode
                        where b.AttributeCode.ToLower() == "video"
                        select new
                        {
                            a.ProductCode,
                            a.ProductName
                        };
            var dis = query.ToList();
            return Json(dis);
        }
        [HttpPost]
        public object GetVideosInCatalogue(string productCode)
        {
            var query = from a in _context.MaterialProducts
                        join b in _context.ProductAttributes on a.ProductCode equals b.ProductCode
                        where b.AttributeCode.ToLower() == "video" && a.ProductCode == productCode
                        select new
                        {
                            a.ProductCode
                        };
            var dis = query.Distinct().Select(x => new A { ProductCode = x.ProductCode }).ToList();
            var query2 = (from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectType == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product))
                          join a1 in dis on a.ObjectCode equals a1.ProductCode
                          join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                          join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                          from f in f1.DefaultIfEmpty()
                          select new
                          {
                              a.Id,
                              a1.ProductCode,
                              b.FileCode,
                              b.FileName,
                              b.FileTypePhysic,
                              b.Desc,
                              b.CreatedTime,
                              b.CloudFileId,
                              TypeFile = "NO_SHARE",
                              ReposName = f != null ? f.ReposName : "",
                          });
            return Json(query2.ToList());
        }
        [HttpPost]
        public object GetCatalogueAndFile()
        {
            var query = (from a in _context.MaterialProducts
                         join b in _context.ProductAttributes on a.ProductCode equals b.ProductCode
                         where b.AttributeCode.ToLower() == "video"
                         select new
                         {
                             a.ProductCode,
                             a.ProductName
                         }).ToList();
            var query1 = (from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectType == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product))
                          join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                          join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                          from f in f1.DefaultIfEmpty()
                          where !string.IsNullOrEmpty(a.ObjectCode)
                          select new
                          {
                              a.Id,
                              a.ObjectCode,
                              b.FileCode,
                              b.FileName,
                              b.FileTypePhysic,
                              b.Desc,
                              b.CreatedTime,
                              b.CloudFileId,
                              TypeFile = "NO_SHARE",
                              ReposName = f != null ? f.ReposName : "",
                          });

            var query2 = (from a in query
                          join b in query1 on a.ProductCode equals b.ObjectCode into b2
                          from b in b2.DefaultIfEmpty()
                          select new
                          {
                              a.ProductCode,
                              a.ProductName,
                              Id = (b != null ? b.Id : -1),
                              FileName = (b != null ? b.FileName : null),
                              FileCode = (b != null ? b.FileCode : null),
                              FileTypePhysic = (b != null ? b.FileTypePhysic : null),
                              Desc = (b != null ? b.Desc : null),
                              CreatedTime = (b != null ? b.CreatedTime : null),
                              CloudFileId = (b != null ? b.CloudFileId : null),

                          }).ToList();
            var query3 = query2.GroupBy(x => x.ProductCode).Select(x => new B
            {
                ProductCode = x.Key,
                ProductName = x.FirstOrDefault().ProductName,
                list = x.Select(b => new Data
                {
                    Id = (b != null ? b.Id : -1),
                    FileName = (b != null ? b.FileName : null),
                    FileCode = (b != null ? b.FileCode : null),
                    FileTypePhysic = (b != null ? b.FileTypePhysic : null),
                    Desc = (b != null ? b.Desc : null),
                    CreatedTime = (b != null ? b.CreatedTime : null),
                    CloudFileId = (b != null ? b.CloudFileId : null),
                }).ToList()
            }).ToList();
            foreach (var item in query3)
            {
                var list = item.list;
                for (var item1 = list.Count - 1; item1 >= 0; --item1)
                {
                    if (list[item1].Id == -1)
                        list.RemoveAt(item1);
                }
                item.list = list;
            }
            return Json(query3);
        }
        [HttpPost]
        public JsonResult CreateTempFile(int Id)
        {
            JMessage msg = new JMessage() { Error = false };
            var data = (from a in _context.EDMSRepoCatFiles.Where(x => x.Id == Id)
                        join b in _context.EDMSRepositorys on a.ReposCode equals b.ReposCode into b2
                        from b in b2.DefaultIfEmpty()
                        join c in _context.EDMSFiles on a.FileCode equals c.FileCode into c2
                        from c in c2.DefaultIfEmpty()
                        select new Res
                        {
                            Id = a.Id,
                            Server = (b != null ? b.Server : null),
                            Type = (b != null ? b.Type : null),
                            Url = (c != null ? c.Url : null),
                            FileId = (c != null ? c.CloudFileId : null),
                            FileTypePhysic = c.FileTypePhysic,
                            FileName = c.FileName,
                            MimeType = c.MimeType,
                            Account = b.Account,
                            PassWord = b.PassWord,
                            FileCode = c.FileCode
                        }
                        ).FirstOrDefault();
            if (data != null)
            {
                if (!string.IsNullOrEmpty(data.Server))
                {
                    string ftphost = data.Server;
                    string ftpfilepath = data.Url;
                    var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + ftphost + ftpfilepath);
                    using (System.Net.WebClient request = new System.Net.WebClient())
                    {
                        request.Credentials = new System.Net.NetworkCredential(data.Account, data.PassWord);
                        byte[] fileData = request.DownloadData(urlEnd);
                        JMessage msg1 = _upload.UploadFileByBytes(fileData, data.FileName, _hostingEnvironment.WebRootPath, "uploads\\tempFile");
                        string path = msg1.Object.ToString();
                        data.Url = path.Replace("\\", "/");
                        msg1.Object = data;
                        return Json(msg1);
                    }
                }
                else
                {
                    byte[] fileData = FileExtensions.DowloadFileGoogle(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", data.FileId);
                    JMessage msg1 = _upload.UploadFileByBytes(fileData, data.FileName, _hostingEnvironment.WebRootPath, "uploads\\tempFile");
                    string path = msg1.Object.ToString();
                    data.Url = path.Replace("\\", "/");
                    return Json(msg1);
                }
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetProductByCatalogue([FromBody]SearchProduct obj)
        {
            int intBeginFor = (obj.Page - 1) * obj.Length;
            List<ProductSearch> list = null;
            var prices = FunctionProductPrice();
            JMessage3 msg = new JMessage3() { Error = false };
            try
            {

                var rs = from b in _context.SubProducts.Where(x => !x.IsDeleted)
                         join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                         from c2 in c1.DefaultIfEmpty()
                         where (string.IsNullOrEmpty(obj.Product) || (b.AttributeCode.ToLower().Contains(obj.Product.ToLower()) || b.AttributeName.ToLower().Contains(obj.Product.ToLower())))
                         && obj.Category == b.ProductCode
                         select new ProductSearch
                         {
                             ProductID = b.Id,
                             ProductCode = b.ProductQrCode,
                             ProductName = b.AttributeName,
                             PathImg = b.Image,
                             Cost = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             Unit = b.Unit,
                             UnitName = c2.ValueSet,
                             AttributeCode = b.AttributeCode,
                             AttributeName = b.AttributeName,
                             ProductType = "SUB_PRODUCT",
                             PricePerM = b.PricePerM,
                             PricePerM2 = b.PricePerM2,
                             PriceCostCatelogue = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceCostAirline = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceCostSea = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceRetailBuild = (b.PriceRetailBuild != null ? b.PriceRetailBuild : 0),
                             PriceRetailBuildAirline = (b.PriceRetailBuildAirline != null ? b.PriceRetailBuildAirline : 0),
                             PriceRetailBuildSea = (b.PriceRetailBuildSea != null ? b.PriceRetailBuildSea : 0),
                             PriceRetailNoBuild = (b.PriceRetailNoBuild != null ? b.PriceRetailNoBuild : 0),
                             PriceRetailNoBuildAirline = (b.PriceRetailNoBuildAirline != null ? b.PriceRetailNoBuildAirline : 0),
                             PriceRetailNoBuildSea = (b.PriceRetailNoBuildSea != null ? b.PriceRetailNoBuildSea : 0),
                             Type = b.Type,
                             Value = b.Value
                         };
                IQueryable<ProductSearch> query = rs;
                var pagging = query.ToList();
                var query1 = from a in pagging
                             join b in prices on a.ProductCode equals b.ProductCode into b2
                             from b in b2.DefaultIfEmpty()
                             select new ProductSearch
                             {

                                 ProductCode = a.ProductCode,
                                 ProductName = a.ProductName,
                                 PathImg = a.PathImg,
                                 Cost = 0,
                                 Unit = a.Unit,
                                 UnitName = a.UnitName,
                                 AttributeCode = "",
                                 AttributeName = "",
                                 ProductType = a.ProductType,
                                 PricePerM = a.PricePerM,
                                 PriceCostCatelogue = (b != null ? b.PriceCostCatelogue : a.PriceCostCatelogue),
                                 PriceCostAirline = (b != null ? b.PriceCostAirline : a.PriceCostAirline),
                                 PriceCostSea = (b != null ? b.PriceCostSea : a.PriceCostSea),
                                 PriceRetailBuild = (b != null ? b.PriceRetailBuild : a.PriceRetailBuild),
                                 PriceRetailBuildAirline = (b != null ? b.PriceRetailBuildAirline : a.PriceRetailBuildAirline),
                                 PriceRetailBuildSea = (b != null ? b.PriceRetailBuildSea : a.PriceRetailBuildSea),
                                 PriceRetailNoBuild = (b != null ? b.PriceRetailNoBuild : a.PriceRetailNoBuild),
                                 PriceRetailNoBuildAirline = (b != null ? b.PriceRetailNoBuildAirline : a.PriceRetailNoBuildAirline),
                                 PriceRetailNoBuildSea = (b != null ? b.PriceRetailNoBuildSea : a.PriceRetailNoBuildSea),
                                 Type = a.Type,
                                 Value = a.Value
                             };
                var count = query1.Count();
                list = query1.OrderByDescending(x => x.ProductID).Skip(intBeginFor).Take(obj.Length).ToList();
                foreach (var item in list)
                {
                    item.Cost = item.PriceRetailBuild != null ? item.PriceRetailBuild : 0;
                }
                msg.Object = list;
                msg.MaxLength = count;
            }
            catch (Exception ex)
            {

            }
            return Json(msg);
        }
        // canh bao quy
        public class JTableModelWarning
        {
            public string CatCode { get; set; }
        }
        [HttpPost]
        public object JTableExpense(JTableModelWarning jTablePara)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.AetType == "Expense")
                            join b in _context.FundAccEntryTrackings.Where(x => x.IsDeleted == false && x.Action == "APPROVED")
                            on a.AetCode equals b.AetCode
                            select new
                            {
                                a.CatCode,
                                a.AetType,
                                a.AetCode,
                                a.DeadLine,
                                a.Payer,
                                a.Receiptter,
                                a.Total,
                                a.Currency,
                            });

                var data1 = (from a in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                             join b in data on a.CatCode equals b.CatCode
                             select new
                             {
                                 CatName = a.CatName,
                                 CatCode = b.CatCode,
                                 AetType = b.AetType,
                                 AetCode = b.AetCode,
                                 DeadLine = b.DeadLine.Value,
                                 Payer = b.Payer,
                                 Receiptter = b.Receiptter,
                                 Currency = b.Currency,
                                 Total = (b.Currency == "VND" || b.Currency == "VNĐ") ? b.Total : (b.Total * ((1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(b.Currency)).Rate)))),

                             }).DistinctBy(x => x.AetCode).ToList();
                var data2 = (from a in data1
                             join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == "Expense")
                             on a.CatCode equals b.catCode
                             where a.DeadLine >= b.fromTime && a.DeadLine <= b.toTime
                             group a by new { a.CatCode, a.AetType }
                            into list
                             orderby list.Key.CatCode
                             select new
                             {
                                 list,
                                 catName = list.Select(x => x.CatName).FirstOrDefault(),
                                 total = list.Sum(x => x.Total),
                                 catCode = list.Key.CatCode,
                                 aetType = list.Key.AetType,
                                 maxDate = list.Max(x => x.DeadLine),
                                 minDate = list.Min(x => x.DeadLine),

                             }).ToList();
                msg.Object = (from a in data2.Where(x => x.aetType == "Expense")
                              join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == "Expense")
                              on a.catCode equals b.catCode
                              where a.maxDate <= b.toTime && a.minDate >= b.fromTime && a.total >= b.total
                              select new
                              {
                                  id = b.id,
                                  maxTotal = b.total,
                                  fromDate = b.fromTime,
                                  toDate = b.toTime,
                                  aetType = "Chi",
                                  catCode = b.catCode,
                                  currency = b.currency,
                                  total = a.total,
                                  catName = a.catName,
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }
        [HttpPost]
        public object JTableReceipt(JTableModelWarning jTablePara)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = (from a in _context.FundAccEntrys.Where(x => x.IsDeleted == false && x.IsPlan == false && x.AetType == "Receipt")
                            join b in _context.FundAccEntryTrackings.Where(x => x.IsDeleted == false && x.Action == "APPROVED")
                            on a.AetCode equals b.AetCode
                            select new
                            {
                                a.CatCode,
                                a.AetType,
                                a.AetCode,
                                a.DeadLine,
                                a.Payer,
                                a.Receiptter,
                                a.Total,
                                a.Currency,
                            });
                var data1 = (from a in _context.FundCatReptExpss.Where(x => x.IsDeleted == false)
                             join b in data on a.CatCode equals b.CatCode
                             select new
                             {
                                 CatName = a.CatName,
                                 CatCode = b.CatCode,
                                 AetType = b.AetType,
                                 AetCode = b.AetCode,
                                 DeadLine = b.DeadLine.Value,
                                 Payer = b.Payer,
                                 Receiptter = b.Receiptter,
                                 Currency = b.Currency,
                                 Total = (b.Currency == "VND" || b.Currency == "VNĐ") ? b.Total : (b.Total * ((1 * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(b.Currency)).Rate)))),
                             }).DistinctBy(x => x.AetCode).ToList();
                var data2 = (from a in data1
                             join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == "Receipt")
                             on a.CatCode equals b.catCode
                             where a.DeadLine >= b.fromTime && a.DeadLine <= b.toTime
                             group a by new { a.CatCode, a.AetType }
                            into list
                             orderby list.Key.CatCode
                             select new
                             {
                                 list,
                                 catName = list.Select(x => x.CatName).FirstOrDefault(),
                                 total = list.Sum(x => x.Total),
                                 catCode = list.Key.CatCode,
                                 aetType = list.Key.AetType,
                                 maxDate = list.Max(x => x.DeadLine),
                                 minDate = list.Min(x => x.DeadLine),

                             }).ToList();
                msg.Object = (from a in data2.Where(x => x.aetType == "Receipt")
                              join b in _context.ParamForWarnings.Where(x => x.isDeleted == false && x.aetType == "Receipt")
                              on a.catCode equals b.catCode
                              where a.maxDate <= b.toTime && a.minDate >= b.fromTime && a.total >= b.total
                              select new
                              {
                                  id = b.id,
                                  maxTotal = b.total,
                                  fromDate = b.fromTime,
                                  toDate = b.toTime,
                                  aetType = "Thu",
                                  catCode = b.catCode,
                                  currency = b.currency,
                                  total = a.total,
                                  catName = a.catName
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi thêm !";
            }
            return Json(msg);
        }

        #region PO
        // Lấy loại tiền
        [HttpPost]
        public JsonResult GetListCurrency()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.CommonSettings.Where(x => x.Group == "CURRENCY_TYPE" && x.IsDeleted != true).Select(x => new { Code = x.CodeSet, Name = x.ValueSet }).AsNoTracking().ToList();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Error = true;
                msg.Title = "Lỗi khi load danh sách trạng thái!";
            }
            return Json(msg);
        }
        //Tồn kho
        public class JTableModelIventory : JTableModel
        {
            public string Key { get; set; }
            public string ProductCode { get; set; }
            public string StoreCode { get; set; }
            public string LotProductCode { get; set; }
            public string ProductQrCode { get; set; }
            public int CurrentPagePara { get; set; }

        }
        public class Res
        {
            public int Id { get; set; }
            public string Server { get; set; }
            public string Type { get; set; }
            public string Url { get; set; }
            public string FileId { get; set; }
            public string FileTypePhysic { get; set; }
            public string FileName { get; set; }
            public string MimeType { get; set; }
            public string Account { get; set; }
            public string PassWord { get; set; }
            public string FileCode { get; set; }
        }
        [HttpPost]
        public object GetListIventory(JTableModelIventory jTablePara)
        {
            int intBeginFor = (jTablePara.CurrentPagePara - 1) * jTablePara.Length;
            var query = from a in _context.ProductInStocks.Where(x => !x.IsDeleted && x.ProductType == "FINISHED_PRODUCT")
                        join b in _context.MaterialProducts.Where(x => !x.IsDeleted) on a.ProductCode equals b.ProductCode
                        join f in _context.EDMSWareHouses.Where(x => x.WHS_Flag != true && x.Type == "PR") on a.StoreCode equals f.WHS_Code
                        join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on a.Unit equals c.CodeSet
                        join m in _context.PoBuyerHeaders.Where(x => !x.IsDeleted) on a.LotProductCode equals m.PoSupCode into m1
                        from m2 in m1.DefaultIfEmpty()
                        join g1 in _context.LotProducts.Where(x => !x.IsDeleted) on a.LotProductCode equals g1.LotProductCode into g2
                        from g in g2.DefaultIfEmpty()
                        join d in _context.MaterialProductGroups.Where(x => !x.IsDeleted) on b.GroupCode equals d.Code into d2
                        from d1 in d2.DefaultIfEmpty()
                        join e in _context.MaterialTypes.Where(x => !x.IsDeleted) on b.TypeCode equals e.Code into e2
                        from e1 in e2.DefaultIfEmpty()
                        where
                        (string.IsNullOrEmpty(jTablePara.ProductQrCode) || (!string.IsNullOrEmpty(a.ProductQrCode) && a.ProductQrCode.ToLower().Contains(jTablePara.ProductQrCode.ToLower())))
                         && (string.IsNullOrEmpty(jTablePara.ProductCode) || (a.ProductCode.ToLower().Contains(jTablePara.ProductCode.ToLower())))
                         && (string.IsNullOrEmpty(jTablePara.StoreCode) || (a.StoreCode.ToLower().Contains(jTablePara.StoreCode.ToLower())))
                         && (string.IsNullOrEmpty(jTablePara.LotProductCode) || (a.LotProductCode.ToLower().Contains(jTablePara.LotProductCode.ToLower())))
                        select new InventoryRes
                        {
                            Id = a.Id,
                            ProductCode = a.ProductCode,
                            ProductName = b.ProductName,
                            StoreCode = a.StoreCode,
                            StoreName = f.WHS_Name,
                            LotProductCode = a.LotProductCode,
                            LotProductName = m2.PoTitle,

                            QrCode = a.ProductQrCode,
                            CreatedTime = a.CreatedTime,
                            Unit = c.ValueSet,
                            ProductGroup = (d1 != null ? d1.Name : ""),
                            ProductType = (e1 != null ? e1.Name : ""),
                            Quantity = a.Quantity,
                            Image = b.Image,
                            PathImg = b.Image
                        };
            var query1 = from a in _context.ProductInStocks.Where(x => !x.IsDeleted && x.ProductType == "SUB_PRODUCT")
                         join b in _context.SubProducts.Where(x => !x.IsDeleted) on a.ProductCode equals b.AttributeCode
                         join f in _context.EDMSWareHouses.Where(x => x.WHS_Flag != true && x.Type == "PR") on a.StoreCode equals f.WHS_Code
                         join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on a.Unit equals c.CodeSet
                         join h in _context.MaterialProducts.Where(x => !x.IsDeleted) on b.ProductCode equals h.ProductCode
                         //join k in _context.MaterialStoreImpGoodsHeaders.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.LotProductCode)) on a.LotProductCode equals k.LotProductCode into k1
                         //from k2 in k1.GroupBy(x=>x.LotProductCode).Select(x=> new { x.Key,name=_context.PoBuyerHeaders.Where(y=>!y.IsDeleted && y.PoSupCode==x.Key).FirstOrDefault().PoTitle})
                         join m in _context.PoBuyerHeaders.Where(x => !x.IsDeleted) on a.LotProductCode equals m.PoSupCode into m1
                         from m2 in m1.DefaultIfEmpty()
                         join g1 in _context.LotProducts.Where(x => !x.IsDeleted) on a.LotProductCode equals g1.LotProductCode into g2
                         from g in g2.DefaultIfEmpty()
                         join d in _context.MaterialProductGroups.Where(x => !x.IsDeleted) on h.GroupCode equals d.Code into d2
                         from d1 in d2.DefaultIfEmpty()
                         join e in _context.MaterialTypes.Where(x => !x.IsDeleted) on h.TypeCode equals e.Code into e2
                         from e1 in e2.DefaultIfEmpty()
                         where
                         (string.IsNullOrEmpty(jTablePara.ProductQrCode) || (!string.IsNullOrEmpty(a.ProductQrCode) && a.ProductQrCode.ToLower().Contains(jTablePara.ProductQrCode.ToLower())))
                          && (string.IsNullOrEmpty(jTablePara.ProductCode) || (a.ProductCode == jTablePara.ProductCode))
                          && (string.IsNullOrEmpty(jTablePara.StoreCode) || (a.StoreCode == jTablePara.StoreCode))
                          && (string.IsNullOrEmpty(jTablePara.LotProductCode) || (a.LotProductCode == jTablePara.LotProductCode))

                         select new InventoryRes
                         {
                             Id = a.Id,
                             ProductCode = a.ProductCode,
                             ProductName = b.AttributeName,
                             StoreCode = a.StoreCode,
                             StoreName = f.WHS_Name,
                             LotProductCode = a.LotProductCode,
                             LotProductName = m2.PoTitle,
                             QrCode = a.ProductQrCode,
                             CreatedTime = a.CreatedTime,
                             Unit = c.ValueSet,
                             ProductGroup = (d1 != null ? d1.Name : ""),
                             ProductType = (e1 != null ? e1.Name : ""),
                             Quantity = a.Quantity,
                             Image = b.Image,
                             PathImg = b.Image
                         };

            var rs = query.Union(query1).OrderByDescending(x => x.ProductName);
            var groupCost = rs.GroupBy(x => x.ProductCode).Select(y => new InventoryRes
            {
                ProductCode = y.Key,
                Total = y.Sum(c => c.Quantity)
            });
            var rs1 = from a in rs
                      join b in groupCost on a.ProductCode equals b.ProductCode into b2
                      from b in b2.DefaultIfEmpty()
                      select new InventoryRes
                      {
                          Id = a.Id,
                          ProductCode = a.ProductCode,
                          ProductName = a.ProductName,
                          StoreCode = a.StoreCode,
                          StoreName = a.StoreName,
                          LotProductCode = a.LotProductCode,
                          LotProductName = a.LotProductName,
                          QrCode = a.QrCode,
                          CreatedTime = a.CreatedTime,
                          Unit = a.Unit,
                          ProductGroup = a.ProductGroup,
                          ProductType = a.ProductType,
                          Quantity = a.Quantity,
                          Image = b.Image,
                          PathImg = b.Image,
                          Total = (b != null ? b.Total : 0)
                      };
            var count = rs1.Count();
            var QueryOrderBy = "Id DESC";
            var dataReceive = new
            {
                data = rs1.OrderUsingSortExpression(QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                total = count
            };
            return Json(dataReceive);
        }
        [HttpPost]
        public object GetStores()
        {
            var data = from a in _context.EDMSWareHouses.Where(x => x.WHS_Flag != true && x.Type == "PR")
                       select new
                       {
                           Code = a.WHS_Code,
                           Name = a.WHS_Name
                       };
            return data.ToList();
        }
        //po khách hàng
        public class JTableModelContract : JTableModel
        {
            public string Key { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string Status { get; set; }
            public string BudgetF { get; set; }
            public string BudgetT { get; set; }
            public string Signer { get; set; }
            public int CurrentPagePara { get; set; }
            public string Currency { get; set; }
        }
        public class A
        {
            public string ProductCode { get; set; }
        }
        public class B : A
        {
            public string ProductName { get; set; }
            public List<Data> list { get; set; }
        }
        public class Data
        {
            public int Id { get; set; }
            public string FileCode { get; set; }
            public string FileName { get; set; }
            public string FileTypePhysic { get; set; }
            public string Desc { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string CloudFileId { get; set; }
        }
        [HttpPost]
        public object GetListPoCustommer(JTableModelContract jTablePara)
        {
            int intBeginFor = (jTablePara.CurrentPagePara - 1) * jTablePara.Length;
            if (string.IsNullOrEmpty(jTablePara.Key))
                jTablePara.Key = "";
            if (string.IsNullOrEmpty(jTablePara.ContractCode))
                jTablePara.ContractCode = "";
            string key = jTablePara.Key.ToLower();
            DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            string contractCode = jTablePara.ContractCode.ToLower();
            string status = jTablePara.Status;

            decimal budgetF;
            decimal budgetT;
            decimal.TryParse(jTablePara.BudgetF, out budgetF);
            if (!decimal.TryParse(jTablePara.BudgetT, out budgetT))
            {
                budgetT = decimal.MaxValue;
            }

            string signer = jTablePara.Signer;
            string currency = jTablePara.Currency;

            var query = from a in _context.PoSaleHeaders
                        where ((a.IsDeleted == false) &&
                               (a.Tags.ToLower().Contains(key)) &&
                               ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate)) &&
                               ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate)) &&
                               (string.IsNullOrEmpty(contractCode) || a.ContractCode.ToLower().Contains(contractCode)) &&
                               (string.IsNullOrEmpty(status) || a.Status.Contains(status)) &&
                               (a.Budget == null ? true : a.Budget >= budgetF && a.Budget <= budgetT) &&
                               (string.IsNullOrEmpty(signer) || a.Signer.Contains(signer)) &&
                               (string.IsNullOrEmpty(currency) || a.Currency.Contains(currency)))
                        select new
                        {
                            id = a.ContractHeaderID,
                            code = a.ContractCode,
                            name = a.Title,
                            status = a.Status,
                            duration = a.Duration,
                            contractDate = a.ContractDate,
                            budget = a.Budget,
                            currency = _context.CommonSettings.FirstOrDefault(p => !p.IsDeleted && p.CodeSet == a.Currency).ValueSet,
                            signer = a.Signer
                        };

            var count = query.Count();
            var QueryOrderBy = "id DESC";
            var dataReceive = new
            {
                data = query.OrderUsingSortExpression(QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                total = count
            };
            return Json(dataReceive);
        }
        [HttpPost]
        public object DetailPoCustommer(string ContractCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = from a in _context.PoSaleProductDetails.Where(x => !x.IsDeleted && x.ContractCode == ContractCode)
                           select new
                           {
                               Id = a.Id,
                               ProductCode = a.ProductCode,
                               ProductName = _context.MaterialProducts.FirstOrDefault(p => !p.IsDeleted && p.ProductCode == a.ProductCode).ProductName,
                               Quantity = a.Quantity,
                               Unit = _context.CommonSettings.FirstOrDefault(p => !p.IsDeleted && p.CodeSet == a.Unit).ValueSet,
                               UnitPrice = a.Cost,
                               //Currency = _context.CommonSettings.FirstOrDefault(p => !p.IsDeleted && p.CodeSet == a.Currency).ValueSet,
                               TotalAmount = (a.Quantity * a.Cost)
                           };
                msg.Object = data;

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return msg;

        }
        // Po nhà cung cấp
        public class JTableModelSupplierPO : JTableModel
        {
            public string Key { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string PoSupCode { get; set; }
            public int CurrentPagePara { get; set; }

        }
        public class JTableModelSupplierMessage : JTableModel
        {
            public Boolean Error { get; set; }
            public string Title { get; set; }
            public string Object { get; set; }
            public string PoSupCode { get; set; }
            public int CurrentPagePara { get; set; }

        }
        [HttpPost]
        public async Task<object> GetListPoSupplier(JTableModelSupplierPO jTablePara)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            int intBeginFor = (jTablePara.CurrentPagePara - 1) * jTablePara.Length;
            if (string.IsNullOrEmpty(jTablePara.Key))
                jTablePara.Key = "";
            if (string.IsNullOrEmpty(jTablePara.PoSupCode))
                jTablePara.PoSupCode = "";
            string key = jTablePara.Key.ToLower();
            DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            string PoSupCode = jTablePara.PoSupCode.ToLower();
            var query = from x in _context.PoBuyerHeaders
                        where ((x.IsDeleted == false) &&
                               ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate)) &&
                               ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate)) &&
                               (string.IsNullOrEmpty(PoSupCode) || x.PoSupCode.ToLower().Contains(PoSupCode)))
                        select new
                        {
                            id = x.Id,
                            BuyerCode = x.BuyerCode,
                            SupCode = x.SupCode,
                            PoTitle = x.PoTitle,
                            PoSupCode = x.PoSupCode,
                            DateOfOrder = x.DateOfOrder,
                            sDateOfOrder = x.sDateOfOrder,
                            OrderBy = x.OrderBy,
                            Email = x.Email,
                            PaymentTerm = x.PaymentTerm,
                            ShippingAdd = x.ShippingAdd,
                            Consigner = x.Consigner,
                            Mobile = x.Mobile,
                            Buyer = x.Buyer,
                            Noted = x.Noted,
                            CreatedBy = x.CreatedBy,
                            Confirm = x.Confirm,
                            Status = x.Status,
                            ApprovedBy = x.ApprovedBy,
                            ApprovedTime = x.ApprovedTime,
                            CreatedTime = x.CreatedTime,
                        };

            var count = query.Count();
            var QueryOrderBy = "id DESC";
            var dataReceive = new
            {
                data = query.OrderUsingSortExpression(QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                total = count
            };
            return Json(dataReceive);
        }
        [HttpPost]
        public object DetailPoSupplier(string poCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = from a in _context.PoBuyerDetails.Where(x => !x.IsDeleted && x.PoSupCode == poCode)
                           select new
                           {
                               Id = a.Id,
                               ProductCode = a.ProductCode,
                               ProductName = _context.MaterialProducts.FirstOrDefault(p => !p.IsDeleted && p.ProductCode == a.ProductCode).ProductName,
                               Quantity = a.Quantity,
                               Unit = _context.CommonSettings.FirstOrDefault(p => !p.IsDeleted && p.CodeSet == a.Unit).ValueSet,
                               UnitPrice = a.UnitPrice,
                               Currency = _context.CommonSettings.FirstOrDefault(p => !p.IsDeleted && p.CodeSet == a.Currency).ValueSet,
                               TotalAmount = a.TotalAmount
                           };
                msg.Object = data;

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return msg;
        }

        // yêu cầu đặt hàng
        [HttpPost]
        public JsonResult GenReqCode()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var monthNow = DateTime.Now.Month;
                var yearNow = DateTime.Now.Year;
                var reqCode = string.Empty;
                var no = 1;
                var noText = "01";
                var data = _context.RequestImpProductHeaders.Where(x => x.CreatedTime.Year == yearNow && x.CreatedTime.Month == monthNow).ToList();
                if (data.Count > 0)
                {
                    no = data.Count + 1;
                    if (no < 10)
                    {
                        noText = "0" + no;
                    }
                    else
                    {
                        noText = no.ToString();
                    }
                }
                msg.Object = string.Format("{0}{1}{2}{3}", "REQ_", "T" + monthNow + ".", yearNow + "_", noText);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }

            return Json(msg);
        }
        [HttpPost]
        public object GetInfoCustomers(string poCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var check = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode == poCode);
                if (check != null)
                {
                    var data = from a in _context.Customerss.Where(x => !x.IsDeleted && x.CusCode == check.CusCode)
                               select new
                               {
                                   Id = a.CusID,
                                   Code = a.CusCode,
                                   Name = a.CusName,
                                   Address = a.Address,
                                   ZipCode = a.ZipCode,
                                   MobilePhone = a.MobilePhone,
                                   PersonInCharge = a.PersonInCharge,
                                   Email = a.Email
                               };
                    msg.Object = data;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy khách hàng này";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return msg;

        }
        [HttpPost]
        public object GetListPoProduct()
        {

            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var today = DateTime.Now.Date;
                var listContractHeader = _context.PoSaleHeaders.Where(x => !x.IsDeleted).OrderByDescending(p => p.ContractHeaderID);
                var listLogProductDetail = new List<LogProductDetail>();
                foreach (var item in listContractHeader)
                {
                    if (!string.IsNullOrEmpty(item.LogProductDetail))
                        listLogProductDetail.AddRange(JsonConvert.DeserializeObject<List<LogProductDetail>>(item.LogProductDetail));
                }

                var listProductDetail = listLogProductDetail.Where(x => x.ImpQuantity < 0 && x.EstimateDate.Date >= today).GroupBy(x => x.ContractCode).Select(x => new
                {
                    Code = x.FirstOrDefault().ContractCode,
                    Quantity = x.Sum(y => y.ImpQuantity) * -1
                });
                msg.Object = (from a in listProductDetail
                              join b in _context.PoSaleHeaders.Where(x => !x.IsDeleted) on a.Code equals b.ContractCode
                              select new
                              {
                                  a.Code,
                                  Name = b.Title,
                                  a.Quantity,
                                  b.CusCode,
                                  listProductDetail = listLogProductDetail.Where(p => p.ContractCode.Equals(b.ContractCode))
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }

            return msg;
        }
        [HttpPost]
        public JsonResult Insert([FromBody]RequestImpProductHeader obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var data = _context.RequestImpProductHeaders.FirstOrDefault(x => !x.IsDeleted && (x.PoCode.Equals(obj.PoCode) || x.ReqCode.Equals(obj.ReqCode)));
                if (data == null)
                {
                    obj.IsDeleted = false;
                    obj.CreatedBy = obj.CreatedBy;
                    obj.CreatedTime = DateTime.Now;
                    _context.RequestImpProductHeaders.Add(obj);
                    _context.SaveChanges();

                    if (obj.ListProductDetail.Count > 0)
                    {
                        msg = InsertDetail(obj);
                    }

                    msg.Title = "Thêm mới thành công Y/C đặt hàng";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Mã Y/C hoặc số đơn hàng đặt hàng đã tồn tại, không thể thêm mới";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm đơn đặt hàng";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult Update([FromBody]RequestImpProductHeader obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var data = _context.RequestImpProductHeaders.FirstOrDefault(x => !x.IsDeleted && x.Id == obj.Id);
                var status = data.Status;
                if (data != null)
                {
                    data.Title = obj.Title;
                    data.Status = obj.Status;
                    data.UpdatedBy = obj.UpdatedBy;
                    data.UpdatedTime = DateTime.Now;
                    _context.RequestImpProductHeaders.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công Y/C đặt hàng";
                    if (obj.ListProductDetail.Count > 0)
                    {
                        msg = UpdateDetail(obj);
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Y/C đặt hàng không tồn tại, vui lòng làm mới trang";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi cập nhật Y/C đặt hàng";
            }
            return Json(msg);
        }
        [HttpPost]
        public JMessage UpdateDetail(RequestImpProductHeader obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var impHeader = _context.RequestImpProductHeaders.FirstOrDefault(x => !x.IsDeleted && x.ReqCode.Equals(obj.ReqCode));
                if (impHeader != null)
                {
                    if (obj.ListProductDetail.Count > 0)
                    {
                        foreach (var item in obj.ListProductDetail)
                        {
                            var data = _context.RequestImpProductDetails.FirstOrDefault(x => !x.IsDeleted && x.ReqCode.Equals(obj.ReqCode) && x.ProductCode.ToLower() == item.ProductCode.ToLower());
                            if (data != null)
                            {
                                data.PoCount = item.PoCount;
                                data.RateConversion = item.RateConversion;
                                data.RateLoss = item.RateLoss;
                                data.Quantity = item.Quantity;
                                data.Unit = item.Unit;
                                data.Note = item.Note;
                                data.UpdatedBy = obj.UpdatedBy;
                                data.UpdatedTime = DateTime.Now;

                                _context.RequestImpProductDetails.Update(data);
                                _context.SaveChanges();
                                msg.Title = "Sửa sản phẩm thành công";
                            }
                            else
                            {
                                msg.Error = true;
                                msg.Title = "Mã sản phẩm không tồn tại tồn tại, không thể chỉnh sửa";
                            }
                        }
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Vui lòng thêm phiếu yêu cầu đặt hàng trước khi lưu sản phẩm";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi sửa sản phẩm";
            }
            return msg;
        }
        [HttpPost]
        public JsonResult Delete(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.RequestImpProductHeaders.FirstOrDefault(x => !x.IsDeleted && x.Id == id);
                var status = data.Status;
                if (data != null)
                {
                    data.DeletedBy = ESEIM.AppContext.UserName;
                    data.DeletedTime = DateTime.Now;
                    data.IsDeleted = true;
                    _context.RequestImpProductHeaders.Update(data);
                    _context.SaveChanges();

                    msg.Title = "Xóa thành công Y/C đặt hàng";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = " Y/C đặt hàng không tồn tại, vui lòng làm mới trang";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa Y/C đặt hàng";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetRequestImpProductItem(int Id)
        {
            var msg = new JMessage();
            var data = _context.RequestImpProductHeaders.FirstOrDefault(x => x.Id == Id);
            if (data != null)
            {
                var listProduct = GetListImpProduct(data.PoCode);
                var detail = (from a in _context.RequestImpProductDetails.Where(x => x.ReqCode.Equals(data.ReqCode))
                              join b in _context.CommonSettings on a.Unit equals b.CodeSet into b1
                              from b2 in b1.DefaultIfEmpty()
                              join c in listProduct on a.ProductCode equals c.ProductCode
                              select new RequestImpProductDetail
                              {
                                  ProductCode = a.ProductCode,
                                  //ProductName = e2 != null ? string.Format("{0}-{1}_{2}", _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)) != null ? _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)).ProductName : null, b.ProductCode, e2.AttributeCode) : f2 != null ? string.Format("Thành phẩm_{0}-{1}", f2.ProductName, f2.ProductCode) : null,
                                  ProductName = c.ProductName,
                                  ProductType = a.ProductType,
                                  Quantity = a.Quantity,
                                  PoCount = a.PoCount,
                                  RateConversion = a.RateConversion,
                                  RateLoss = a.RateLoss,
                                  Unit = a.Unit,
                                  UnitName = b2.ValueSet,
                                  Note = a.Note
                              }).ToList();
                data.ListProductDetail = detail;
                //data.PoName = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode.Equals(data.PoCode))?.Title + "(" + data.ListProductDetail.Sum(x => int.Parse(x.PoCount)) + ")";
            }
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public List<RequestImpProductDetail> GetListImpProduct(string poCode)
        {
            var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(poCode));
            var listLogProductDetail = new List<LogProductDetail>();
            var listProductGroup = new List<RequestImpProductDetail>();
            if (contractHeader != null)
            {
                if (!string.IsNullOrEmpty(contractHeader.LogProductDetail))
                    listLogProductDetail.AddRange(JsonConvert.DeserializeObject<List<LogProductDetail>>(contractHeader.LogProductDetail));

                var listProductDetail = listLogProductDetail.Where(x => x.ImpQuantity < 0).GroupBy(p => p.ProductCode).Select(x => new
                {
                    x.FirstOrDefault().ProductCode,
                    x.FirstOrDefault().ContractCode,
                    Quantity = x.FirstOrDefault().ImpQuantity * -1
                });
                var listProduct = (from a in listProductDetail
                                   join b in _context.PoSaleProductDetails.Where(x => !x.IsDeleted) on a.ProductCode equals b.ProductCode
                                   join e in _context.SubProducts.Where(x => !x.IsDeleted) on b.ProductCode equals e.ProductQrCode into e1
                                   from e2 in e1.DefaultIfEmpty()
                                   join f in _context.MaterialProducts.Where(x => !x.IsDeleted) on b.ProductCode equals f.ProductCode into f1
                                   from f2 in f1.DefaultIfEmpty()
                                   join g in _context.CommonSettings.Where(x => !x.IsDeleted) on b.Unit equals g.CodeSet into g1
                                   from g2 in g1.DefaultIfEmpty()
                                   where b.ContractCode.Equals(poCode)
                                   select new RequestImpProductDetail
                                   {
                                       ProductCode = a.ProductCode,
                                       //ProductName = e2 != null ? string.Format("{0}-{1}_{2}", _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)) != null ? _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)).ProductName : null, b.ProductCode, e2.AttributeCode) : f2 != null ? string.Format("Thành phẩm_{0}-{1}", f2.ProductName, f2.ProductCode) : null,
                                       ProductName = e2 != null ? e2.AttributeName : f2 != null ? f2.ProductName : null,
                                       ProductType = b.ProductType,
                                       Quantity = (decimal)a.Quantity,
                                       PoCount = a.Quantity.ToString(),
                                       RateConversion = 1,
                                       RateLoss = 1,
                                       Unit = b.Unit,
                                       UnitName = g2.ValueSet,
                                   }).ToList();

                listProductGroup = listProduct.GroupBy(x => x.ProductCode).Select(p => new RequestImpProductDetail
                {
                    ProductCode = p.LastOrDefault().ProductCode,
                    ProductName = p.LastOrDefault().ProductName,
                    ProductType = p.LastOrDefault().ProductType,
                    Quantity = p.LastOrDefault().Quantity,
                    PoCount = p.LastOrDefault().PoCount,
                    RateConversion = p.LastOrDefault().RateConversion,
                    RateLoss = p.LastOrDefault().RateLoss,
                    Unit = p.LastOrDefault().Unit,
                    UnitName = p.LastOrDefault().UnitName,
                }).ToList();
            }
            return listProductGroup;
        }
        [HttpPost]
        public JMessage InsertDetail([FromBody]RequestImpProductHeader obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                if (obj.ListProductDetail.Count > 0)
                {
                    foreach (var item in obj.ListProductDetail)
                    {
                        var data = _context.RequestImpProductDetails.FirstOrDefault(x => !x.IsDeleted && x.ReqCode.Equals(obj.ReqCode) && x.ProductCode.ToLower() == item.ProductCode.ToLower());
                        if (data == null)
                        {
                            item.ReqCode = obj.ReqCode;
                            item.IsDeleted = false;
                            item.CreatedBy = obj.CreatedBy;
                            item.CreatedTime = DateTime.Now;
                            _context.RequestImpProductDetails.Add(item);
                            _context.SaveChanges();
                            msg.Title = "Thêm mới sản phẩm thành công";
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Mã sản phẩm đã tồn tại, không thể thêm mới";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm sản phẩm";
            }
            return msg;
        }
        [HttpPost]
        public object GetDetailProduct(string reqCode)
        {
            //int intBeginFor = (jTablePara.CurrentPage - 1) * jTablePara.Length;

            var query = (from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted && x.ReqCode.Equals(reqCode))
                         join b in _context.SubProducts on a.ProductCode equals b.ProductQrCode into b1
                         from b2 in b1.DefaultIfEmpty()
                         join c in _context.MaterialProducts on a.ProductCode equals c.ProductCode into c1
                         from c2 in c1.DefaultIfEmpty()
                         join d in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Unit equals d.CodeSet into d1
                         from d2 in d1.DefaultIfEmpty()
                         where a.ReqCode.Equals(reqCode)
                         select new
                         {
                             a.Id,
                             a.ReqCode,
                             ProductName = b2 != null ? b2.AttributeName : c2.ProductName,
                             a.ProductCode,
                             a.Quantity,
                             a.Unit,
                             UnitName = d2.ValueSet,
                             a.PoCount,
                             a.RateConversion,
                             a.RateLoss,
                             ProductTypeName = b2 != null ? "Nguyên liệu" : "Thành phẩm",
                         }).ToList();

            //var count = query.Count();
            //var data = query.OrderUsingSortExpression(jTablePara.QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
            //var jdata = JTableHelper.JObjectTable(data, jTablePara.Draw, count, "Id", "ReqCode", "ProductCode", "ProductName", "Quantity", "Unit", "UnitName", "PoCount", "RateConverison", "RateLoss", "ProductTypeName");
            return Json(query);
        }
        public class JTableModelReqImpProduct : JTableModel
        {
            public Boolean Error { get; set; }
            public string Title { get; set; }
            public string Object { get; set; }
            public string reqCode { get; set; }
            public string fromDatePara { get; set; }
            public string toDatePara { get; set; }
            public int CurrentPagePara { get; set; }

        }
        [HttpPost]
        public object GetListReqImpProduct(JTableModelReqImpProduct jTablePara)
        {
            int intBeginFor = (jTablePara.CurrentPagePara - 1) * jTablePara.Length;
            JMessage msg = new JMessage() { Error = false };
            try
            {
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.fromDatePara) ? DateTime.ParseExact(jTablePara.fromDatePara, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.toDatePara) ? DateTime.ParseExact(jTablePara.toDatePara, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = (from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted)
                             join b in _context.PoSaleHeaders.Where(x => !x.IsDeleted) on a.PoCode equals b.ContractCode
                             join c in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals c.CusCode
                             join d in _context.Users.Where(x => x.Active) on a.CreatedBy equals d.UserName into d1
                             from d2 in d1.DefaultIfEmpty()
                             where ((a.IsDeleted == false) &&
                                   ((fromDate == null) || (a.CreatedTime >= fromDate)) &&
                                   ((toDate == null) || (a.CreatedTime <= toDate)) &&
                                   (string.IsNullOrEmpty(jTablePara.reqCode) || a.ReqCode.ToLower().Contains(jTablePara.reqCode.ToLower())))
                             select new
                             {
                                 a.Id,
                                 a.ReqCode,
                                 a.Title,
                                 a.PoCode,
                                 b.CusCode,
                                 a.Status,
                                 c.CusName,
                                 CreatedBy = d2.GivenName,
                                 a.CreatedTime,
                                 PoName = b.Title + "(" + _context.RequestImpProductDetails.Where(x => !x.IsDeleted && x.ReqCode.Equals(a.ReqCode)).Sum(x => int.Parse(x.PoCount)) + ")"
                             });
                var count = query.Count();
                var QueryOrderBy = "Id DESC";
                msg.Object = new
                {
                    data = query.OrderUsingSortExpression(QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                    total = count
                };
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm sản phẩm";
            }

            return Json(msg);
        }
        [HttpPost]
        public object LogActivityUser(string cardCode, string userId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var activityExceptUser = (from a in _context.CardUserActivitys
                                          join b in _context.Users on a.UserId equals b.Id
                                          where a.CardCode == cardCode && (a.Action == "REVIEW" || a.Action == "REJECT" || a.Action == "ACCEPT")
                                          && a.UserId != userId
                                          select new
                                          {
                                              a.Id,
                                              a.UserId,
                                              b.GivenName,
                                              b.Picture,
                                              a.Action,
                                              ActionName = (a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review) ? CardAction.Review.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Reject) ? CardAction.Reject.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Accept) ? CardAction.Accept.DescriptionAttr() : ""),
                                              a.IdObject,
                                              CreatedTime = a.CreatedTime.ToString("dd/MM/yyyy HH:mm:ss"),
                                              a.IsCheck,
                                              a.ChangeDetails
                                          }).OrderByDescending(x => x.Id);
                var activityCurrentUser = (from a in _context.CardUserActivitys
                                           join b in _context.Users on a.UserId equals b.Id
                                           where a.CardCode == cardCode && (a.Action == "REVIEW" || a.Action == "REJECT" || a.Action == "ACCEPT")
                                           && a.UserId == userId
                                           select new
                                           {
                                               a.Id,
                                               a.UserId,
                                               b.GivenName,
                                               b.Picture,
                                               a.Action,
                                               ActionName = (a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review) ? CardAction.Review.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Reject) ? CardAction.Reject.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Accept) ? CardAction.Accept.DescriptionAttr() : ""),
                                               a.IdObject,
                                               CreatedTime = a.CreatedTime.ToString("dd/MM/yyyy HH:mm:ss"),
                                               a.IsCheck,
                                               a.ChangeDetails
                                           }).OrderByDescending(x => x.Id);
                var query = activityCurrentUser.Concat(activityExceptUser);

                var allActivity = (from a in _context.CardUserActivitys
                                   join b in _context.Users on a.UserId equals b.Id
                                   where a.CardCode == cardCode && (a.Action == "REVIEW" || a.Action == "REJECT" || a.Action == "ACCEPT")
                                   select new
                                   {
                                       a.Id,
                                       a.UserId,
                                       b.GivenName,
                                       b.Picture,
                                       a.Action,
                                       ActionName = (a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Review) ? CardAction.Review.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Reject) ? CardAction.Reject.DescriptionAttr() :
                                              a.Action == EnumHelper<CardAction>.GetDisplayValue(CardAction.Accept) ? CardAction.Accept.DescriptionAttr() : ""),
                                       a.IdObject,
                                       CreatedTime = a.CreatedTime.ToString("dd/MM/yyyy HH:mm:ss"),
                                       a.IsCheck,
                                       a.ChangeDetails
                                   }).DistinctBy(x => new { x.Action, x.UserId });


                var countView = allActivity.Where(x => x.Action == "REVIEW");
                var countReject = allActivity.Where(x => x.Action == "REJECT");
                var countAccept = allActivity.Where(x => x.Action == "ACCEPT");
                msg.Object = new
                {
                    Log = query,
                    CountView = countView.Count(),
                    CountReject = countReject.Count(),
                    CountAccept = countAccept.Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        #endregion

        #region Phân quyền
        //check phân quyền
        [HttpPost]
        public JsonResult CheckDecentralized(string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.Users.Where(x => x.UserName == userName).FirstOrDefault();
                if (data == null)
                {
                    msg.Title = "User không xác định";
                }
                else
                {
                    if (data.TypeStaff == 1)
                    {
                        msg.ID = 1;
                        msg.Title = "bạn là giám đốc";
                    }
                    else
                    {
                        msg.ID = 0;
                        msg.Title = "bạn là nhân viên";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult CheckDecentralizedAPI(string appCode, string funtionCode, string userName)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.Users.Where(x => x.UserName == userName).FirstOrDefault();
                if (data == null)
                {
                    msg.Title = "User không xác định";
                    msg.Error = true;
                }
                else
                {
                    var check = _context.AdPermissions.FirstOrDefault(x => x.ApplicationCode == appCode && x.FunctionCode == funtionCode && x.UserId == data.Id);
                    if (check == null)
                    {
                        msg.Error = true;
                        msg.Title = "Có lỗi khi gọi chức năng";
                    }
                    else
                    {
                        var query = _context.AdResources.FirstOrDefault(x => !x.Status && x.ResourceCode == check.ResourceCode);
                        msg.Object = query;

                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        #endregion

        #region Font-end FACCO
        [HttpPost]
        public JsonResult GetCatalogues()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var query = from a in _context.MaterialProducts.Where(x => x.IsDeleted == false && x.TypeCode == "SUB_PRODUCT")
                            select new
                            {
                                a.Id,
                                a.ProductCode,
                                a.ProductName
                            };
                msg.Object = query.ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetProductInCatalogue(string catalogueCode, string product, int page, int length)
        {
            int intBeginFor = (page - 1) * length;
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var catalogue = _context.MaterialProducts.FirstOrDefault(x => x.IsDeleted == false && x.ProductCode == catalogueCode);
                if (catalogue != null)
                {
                    var query = _context.SubProducts.Where(x => x.IsDeleted == false && x.ProductCode == catalogueCode
                    && (string.IsNullOrEmpty(product) || (x.AttributeCode.ToLower().Contains(product.ToLower()) || x.AttributeName.ToLower().Contains(product.ToLower())))
                    ).OrderByDescending(x => x.Id);
                    List<SubProduct> list = new List<SubProduct>();
                    if (page < 1)
                    {
                        list = query.ToList();
                    }
                    else
                    {
                        list = query.Skip(intBeginFor).Take(length).ToList();
                    }
                    msg.Object = list;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Catalogue không tồn tại hoặc đã bị xóa, vui lòng làm mới trang";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult SearchProduct(SearchProduct obj)
        {
            int intBeginFor = (obj.Page - 1) * obj.Length;
            List<ProductSearch> list = null;
            var prices = FunctionProductPrice();
            JMessage3 msg = new JMessage3() { Error = false };
            try
            {

                var rs = from b in _context.SubProducts.Where(x => !x.IsDeleted)
                         join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                         from c2 in c1.DefaultIfEmpty()
                         where (string.IsNullOrEmpty(obj.Product) || (b.AttributeCode.ToLower().Contains(obj.Product.ToLower()) || b.AttributeName.ToLower().Contains(obj.Product.ToLower())))
                         select new ProductSearch
                         {
                             ProductID = b.Id,
                             ProductCode = b.ProductQrCode,
                             ProductName = b.AttributeName,
                             PathImg = b.Image,
                             Cost = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             Unit = b.Unit,
                             UnitName = c2.ValueSet,
                             AttributeCode = b.AttributeCode,
                             AttributeName = b.AttributeName,
                             ProductType = "SUB_PRODUCT",
                             PricePerM = b.PricePerM,
                             PricePerM2 = b.PricePerM2,
                             PriceCostCatelogue = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceCostAirline = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceCostSea = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                             PriceRetailBuild = (b.PriceRetailBuild != null ? b.PriceRetailBuild : 0),
                             PriceRetailBuildAirline = (b.PriceRetailBuildAirline != null ? b.PriceRetailBuildAirline : 0),
                             PriceRetailBuildSea = (b.PriceRetailBuildSea != null ? b.PriceRetailBuildSea : 0),
                             PriceRetailNoBuild = (b.PriceRetailNoBuild != null ? b.PriceRetailNoBuild : 0),
                             PriceRetailNoBuildAirline = (b.PriceRetailNoBuildAirline != null ? b.PriceRetailNoBuildAirline : 0),
                             PriceRetailNoBuildSea = (b.PriceRetailNoBuildSea != null ? b.PriceRetailNoBuildSea : 0),
                             Type = b.Type,
                             Value = b.Value
                         };

                var rs1 = from b in _context.MaterialProducts.Where(x => !x.IsDeleted && x.TypeCode == "FINISHED_PRODUCT")
                          join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                          from c2 in c1.DefaultIfEmpty()
                          where (string.IsNullOrEmpty(obj.Product) || (b.ProductCode.ToLower().Contains(obj.Product.ToLower()) || b.ProductCode.ToLower().Contains(obj.Product.ToLower())))
                          orderby b.Id descending
                          select new ProductSearch
                          {
                              ProductID = b.Id,
                              ProductCode = b.ProductCode,
                              ProductName = string.Format("Thành phẩm_{0}-{1}", b.ProductName, b.ProductCode),
                              PathImg = b.Image,
                              Cost = b.PriceCostCatelogue,
                              Unit = b.Unit,
                              UnitName = c2.ValueSet,
                              AttributeCode = "",
                              AttributeName = "",
                              ProductType = "FINISHED_PRODUCT",
                              PricePerM = b.PricePerM,
                              PricePerM2 = b.PricePerM2,
                              PriceCostCatelogue = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                              PriceCostAirline = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                              PriceCostSea = (b.PriceCostCatelogue != null ? b.PriceCostCatelogue : 0),
                              PriceRetailBuild = (b.PriceRetailBuild != null ? b.PriceRetailBuild : 0),
                              PriceRetailBuildAirline = (b.PriceRetailBuildAirline != null ? b.PriceRetailBuildAirline : 0),
                              PriceRetailBuildSea = (b.PriceRetailBuildSea != null ? b.PriceRetailBuildSea : 0),
                              PriceRetailNoBuild = (b.PriceRetailNoBuild != null ? b.PriceRetailNoBuild : 0),
                              PriceRetailNoBuildAirline = (b.PriceRetailNoBuildAirline != null ? b.PriceRetailNoBuildAirline : 0),
                              PriceRetailNoBuildSea = (b.PriceRetailNoBuildSea != null ? b.PriceRetailNoBuildSea : 0),
                          };
                IQueryable<ProductSearch> query = null;
                //if (obj.Category == "all_product")
                //    query = rs1.Concat(rs);
                //else if (obj.Category == "finished_product")
                //    query = rs1;
                //else if(obj.Category=="sub_product")
                //    query = rs;

                query = rs1.Concat(rs);

                var pagging = query;
                var paginq = pagging.Where(x => string.IsNullOrEmpty(x.ProductCode)).Count();
                var query1 = from a in pagging
                             join b in prices on a.ProductCode equals b.ProductCode into b2
                             from b in b2.DefaultIfEmpty()
                             where (obj.Category.Equals("all_product") || (!obj.Category.Equals("all_product") && a.ProductType.ToLower() == obj.Category))
                             select new ProductSearch
                             {

                                 ProductCode = a.ProductCode,
                                 ProductName = a.ProductName,
                                 PathImg = a.PathImg,
                                 Cost = 0,
                                 Unit = a.Unit,
                                 UnitName = a.UnitName,
                                 AttributeCode = "",
                                 AttributeName = "",
                                 ProductType = a.ProductType,
                                 PricePerM = a.PricePerM,
                                 PriceCostCatelogue = (b != null ? b.PriceCostCatelogue : a.PriceCostCatelogue),
                                 PriceCostAirline = (b != null ? b.PriceCostAirline : a.PriceCostAirline),
                                 PriceCostSea = (b != null ? b.PriceCostSea : a.PriceCostSea),
                                 PriceRetailBuild = (b != null ? b.PriceRetailBuild : a.PriceRetailBuild),
                                 PriceRetailBuildAirline = (b != null ? b.PriceRetailBuildAirline : a.PriceRetailBuildAirline),
                                 PriceRetailBuildSea = (b != null ? b.PriceRetailBuildSea : a.PriceRetailBuildSea),
                                 PriceRetailNoBuild = (b != null ? b.PriceRetailNoBuild : a.PriceRetailNoBuild),
                                 PriceRetailNoBuildAirline = (b != null ? b.PriceRetailNoBuildAirline : a.PriceRetailNoBuildAirline),
                                 PriceRetailNoBuildSea = (b != null ? b.PriceRetailNoBuildSea : a.PriceRetailNoBuildSea),
                                 Type = a.Type,
                                 Value = a.Value
                             };
                var count = query1.Count();
                var cnt = prices.Count();
                list = query1.OrderByDescending(x => x.ProductID).Skip(intBeginFor).Take(obj.Length).ToList();
                foreach (var item in list)
                {
                    item.Cost = item.PriceRetailBuild != null ? item.PriceRetailBuild : 0;
                }
                msg.Object = list;
                msg.MaxLength = count;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public IEnumerable<ProductPrice> FunctionProductPrice()
        {
            var currentTime = DateTime.Now;
            var query = from a in _context.ProductCostHeaders.Where(x => x.IsDeleted == false)
                        join b in _context.ProductCostDetails.Where(x => x.IsDeleted == false)
                        on a.HeaderCode equals b.HeaderCode
                        where
                        a.EffectiveDate != null && a.ExpiryDate != null &&
                        a.EffectiveDate.Date <= currentTime.Date && currentTime.Date <= a.ExpiryDate.Date
                        select new ProductPrice
                        {
                            HeaderCode = a.HeaderCode,
                            ProductCode = b.ProductCode,
                            PriceCostCatelogue = b.PriceCostCatelogue,
                            PriceCostAirline = b.PriceCostAirline,
                            PriceCostSea = b.PriceCostSea,

                            PriceRetailBuild = b.PriceRetailBuild,
                            PriceRetailBuildAirline = b.PriceRetailBuildAirline,
                            PriceRetailBuildSea = b.PriceRetailBuildSea,

                            PriceRetailNoBuild = b.PriceRetailNoBuild,
                            PriceRetailNoBuildAirline = b.PriceRetailNoBuildAirline,
                            PriceRetailNoBuildSea = b.PriceRetailNoBuildSea,
                            Tax = b.Tax
                        };
            return query;

        }
        #endregion

        #region FreeBusy
        public bool GetUserAppointment(string userId, string startTime, string endTime)
        {
            //Busy : true
            // Free: false
            var timeStart = DateTime.ParseExact(startTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            var timeEnd = DateTime.ParseExact(endTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
            var checkUserBusyOrFree = _context.UserDeclareBusyOrFrees.FirstOrDefault(x => x.UserId == userId && x.IsFree == EnumHelper<UserBusyOrFreeEnum>.GetDisplayValue(UserBusyOrFreeEnum.Busy) && !x.IsDeleted && x.StartTime <= timeStart && x.EndTime >= timeEnd);
            if (checkUserBusyOrFree != null)
            {
                return true;
            }
            else
            {

                var checkUserLate = _context.WorkShiftCheckInOuts.Where(x => x.UserId == userId && !x.IsDeleted
                && (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.NoWork) && x.ActionTime >= timeStart && x.ActionTime <= timeEnd)
                && (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.GoLate) && x.ActionTime >= timeStart && x.ActionTime <= timeEnd)
                && (x.Action == EnumHelper<StaffStauts>.GetDisplayValue(StaffStauts.QuitWork) && x.ActionTime >= timeStart && x.ActionTime <= timeEnd)).ToList();
                if (checkUserLate.Count == 0)
                {
                    var uName = _context.Users.FirstOrDefault(x => x.Id == userId);
                    var ids = _context.WORKItemSessionResults.Where(x => x.CreatedBy.Equals(uName.UserName) && !x.IsDeleted).ToList();
                    if (ids.Count != 0)
                    {
                        var id = ids.Max(x => x.Id);
                        var progress = _context.WORKItemSessionResults.FirstOrDefault(x => x.Id == id);
                        if (progress.ProgressFromLeader < 100)
                        {
                            return true;
                        }
                    }

                }
            }
            return false;
        }
        #endregion

        #region Biêu đồ
        // HD mua
        [HttpPost]
        public JsonResult AmchartCountBuy()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {

                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.PoBuyerHeaders
                              where !a.IsDeleted && a.CreatedTime.Value.Year == timeNowYear
                              group a by a.CreatedTime.Value.Month into grp
                              select new
                              {
                                  month = grp.First().CreatedTime.Value.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // HD Ban
        [HttpPost]
        public JsonResult AmchartCountSale()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.PoSaleHeaders
                              where !a.IsDeleted && a.CreatedTime.Value.Year == timeNowYear
                              group a by a.CreatedTime.Value.Month into grp
                              select new
                              {
                                  month = grp.First().CreatedTime.Value.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public class TimePieModel
        {
            public string TimePieBuy { get; set; }
        }
        // TThai HD mua
        [HttpPost]
        public JsonResult AmchartPieBuy(string TimeRequest)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var searchTime = !string.IsNullOrEmpty(TimeRequest) ? DateTime.ParseExact(TimeRequest, "MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = (from a in _context.PoBuyerHeaders
                              where !a.IsDeleted
                                 && (searchTime == null || ((a.CreatedTime.Value.Month == searchTime.Value.Month) && (a.CreatedTime.Value.Year == searchTime.Value.Year)))
                              group a by a.Status into grp
                              select new
                              {
                                  status = grp.First().Status,
                                  country = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == grp.First().Status).ValueSet,
                                  litres = grp.Count()
                              }).OrderBy(x => x.status);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // TThai HD ban
        [HttpPost]
        public JsonResult AmchartPieSale(string TimeRequest)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var searchTime = !string.IsNullOrEmpty(TimeRequest) ? DateTime.ParseExact(TimeRequest, "MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = (from a in _context.PoSaleHeaders
                              where !a.IsDeleted
                                 && (searchTime == null || ((a.CreatedTime.Value.Month == searchTime.Value.Month) && (a.CreatedTime.Value.Year == searchTime.Value.Year)))
                              group a by a.Status into grp
                              select new
                              {
                                  status = grp.First().Status,
                                  country = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == grp.First().Status).ValueSet,
                                  litres = grp.Count()
                              }).OrderBy(x => x.status);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // K-Hang
        [HttpPost]
        public JsonResult AmchartCountCustomers()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.Customerss
                              where a.IsDeleted == false && a.CreatedTime.Value.Year == timeNowYear
                              group a by a.CreatedTime.Value.Month into grp
                              select new
                              {
                                  month = grp.First().CreatedTime.Value.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // NCC
        [HttpPost]
        public JsonResult AmchartCountSupplier()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.Suppliers
                              where a.IsDeleted == false && a.CreatedTime.Value.Year == timeNowYear
                              group a by a.CreatedTime.Value.Month into grp
                              select new
                              {
                                  month = grp.First().CreatedTime.Value.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        //TThai K-Hang
        [HttpPost]
        public JsonResult AmchartPieCustomers(string TimeRequest)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var searchTime = !string.IsNullOrEmpty(TimeRequest) ? DateTime.ParseExact(TimeRequest, "MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = (from a in _context.Customerss
                              where !a.IsDeleted
                                 && (searchTime == null || ((a.CreatedTime.Value.Month == searchTime.Value.Month) && (a.CreatedTime.Value.Year == searchTime.Value.Year)))
                              group a by a.ActivityStatus into grp
                              select new
                              {
                                  ActivityStatus = grp.First().ActivityStatus,
                                  country = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == grp.First().ActivityStatus).ValueSet ?? "Không xác định",
                                  litres = grp.Count()
                              }).OrderBy(x => x.ActivityStatus);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // TThai NCC
        [HttpPost]
        public JsonResult AmchartPieSupplier(string TimeRequest)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var searchTime = !string.IsNullOrEmpty(TimeRequest) ? DateTime.ParseExact(TimeRequest, "MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = (from a in _context.Suppliers
                              where !a.IsDeleted
                                 && (searchTime == null || ((a.CreatedTime.Value.Month == searchTime.Value.Month) && (a.CreatedTime.Value.Year == searchTime.Value.Year)))
                              group a by a.Status into grp
                              select new
                              {
                                  status = grp.First().Status,
                                  country = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == grp.First().Status).ValueSet ?? "Không xác định",
                                  litres = grp.Count()
                              }).OrderBy(x => x.status);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // Du an - goi thau
        [HttpPost]
        public JsonResult AmchartCountProject()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.Projects
                              where !a.FlagDeleted && a.StartTime.Year == timeNowYear
                              group a by a.StartTime.Month into grp
                              select new
                              {
                                  month = grp.First().StartTime.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // TT Du an - goi thau
        [HttpPost]
        public JsonResult AmchartPieProject(string TimeRequest)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var searchTime = !string.IsNullOrEmpty(TimeRequest) ? DateTime.ParseExact(TimeRequest, "MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                msg.Object = (from a in _context.Projects
                              where !a.FlagDeleted
                                 && (searchTime == null || ((a.StartTime.Month == searchTime.Value.Month) && (a.StartTime.Year == searchTime.Value.Year)))
                              group a by a.Status into grp
                              select new
                              {
                                  Status = grp.First().Status,
                                  country = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == grp.First().Status).ValueSet ?? "Không xác định",
                                  litres = grp.Count()
                              }).OrderBy(x => x.Status);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // Nhan su
        [HttpPost]
        public JsonResult AmchartCountEmployees()
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var timeNowYear = DateTime.Now.Year;
                msg.Object = (from a in _context.HREmployees
                              where a.flag == 1 && a.createtime.Value.Year == timeNowYear
                              group a by a.createtime.Value.Month into grp
                              select new
                              {
                                  month = grp.First().createtime.Value.Month,
                                  income = grp.Count()
                              }).OrderBy(x => x.month);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        //  quy
        [HttpPost]
        public JsonResult HighchartFunds()
        {
            var year = DateTime.Now.Year;
            var query = _context.FundAccEntrys.Where(x => !x.IsDeleted && x.CreatedTime.Value.Year.Equals(year) && _context.FundCatReptExpss.Any(p => !p.IsDeleted && p.CatCode.Equals(x.CatCode)))
                .Select(p => new { p.AetType, p.Total, Month = p.CreatedTime.Value.Month }).OrderBy(p => p.Month).GroupBy(x => new { x.AetType })
                .Select(p => new
                {
                    name = p.First().AetType.Equals("Receipt") ? "Thu" : "Chi",
                    data = p.Where(x => x.AetType.Equals(p.First().AetType)).GroupBy(i => i.Month).Select(z => new { month = z.First().Month, value = z.Sum(i => i.Total) })
                }).ToList();

            return Json(query);
        }
        [HttpPost]
        public JsonResult HighchartAssets(string Type, string Department, string Year, string PieYear)
        {
            var year = DateTime.Now.Year;
            year = !string.IsNullOrEmpty(Year) ? int.Parse(Year) : year;
            if (!string.IsNullOrEmpty(Department))
            {
                var assetAllow = (from a in _context.AssetAllocateHeaders.Where(x => !x.IsDeleted)
                                  join b in _context.AssetAllocateDetails.Where(x => !x.IsDeleted) on a.TicketCode equals b.TicketCode
                                  join c in _context.AssetMains.Where(x => !x.IsDeleted) on b.AssetCode equals c.AssetCode
                                  join d in _context.AssetTypes.Where(x => !x.IsDeleted) on c.AssetType equals d.CatCode
                                  where (string.IsNullOrEmpty(Department) || a.DepartmentReceive.Equals(Department))
                                  select new
                                  {
                                      d.CatCode
                                  });
                var query = (from a in _context.AssetTypes.Where(x => !x.IsDeleted)
                             join b in _context.AssetMains.Where(x => !x.IsDeleted && x.BuyedTime.HasValue && x.BuyedTime.Value.Year == year) on a.CatCode equals b.AssetType into b1
                             from b2 in b1.DefaultIfEmpty()
                             join c in assetAllow on a.CatCode equals c.CatCode
                             where (string.IsNullOrEmpty(Type) || a.CatCode.Equals(Type))
                             select new
                             {
                                 a.CatCode,
                                 a.CatName,
                                 Cost = b2.Cost != null ? b2.Cost : 0,
                                 b2.BuyedTime,
                             }).ToList();

                var rs = query.GroupBy(x => x.CatCode).Select(p => new
                {
                    name = p.First().CatName,
                    data = p.Where(k => k.BuyedTime != null).OrderBy(n => n.BuyedTime).GroupBy(i => i.BuyedTime.Value.Month).Select(y => new { month = y.First().BuyedTime.Value.Month, value = y.Sum(m => m.Cost) }),
                    //data = p.Where(k => k.BuyedTime != null).OrderBy(n => n.BuyedTime).GroupBy(i => i.BuyedTime.Value.Month).Select(y => y.Sum(m => m.Cost)),
                });

                if (rs.Where(x => x.data.Count() == 0).Count() == rs.Count())
                {
                    return Json(new List<object>());
                }
                else
                {
                    return Json(rs);
                }
            }
            else
            {
                var query = (from a in _context.AssetTypes.Where(x => !x.IsDeleted)
                             join b in _context.AssetMains.Where(x => !x.IsDeleted && x.BuyedTime.HasValue && x.BuyedTime.Value.Year == year) on a.CatCode equals b.AssetType into b1
                             from b2 in b1.DefaultIfEmpty()
                             where (string.IsNullOrEmpty(Type) || a.CatCode.Equals(Type))
                             select new
                             {
                                 a.CatCode,
                                 a.CatName,
                                 Cost = b2.Cost!=null ? b2.Cost : 0,
                                 b2.BuyedTime,
                             }).ToList();

                var rs = query.GroupBy(x => x.CatCode).Select(p => new
                {
                    name = p.First().CatName,
                    data = p.Where(k => k.BuyedTime != null).OrderBy(n => n.BuyedTime).GroupBy(i => i.BuyedTime.Value.Month).Select(y => new { month = y.First().BuyedTime.Value.Month, value = y.Sum(m => m.Cost) }),
                    //data = p.Where(k => k.BuyedTime != null).OrderBy(n => n.BuyedTime).GroupBy(i => i.BuyedTime.Value.Month).Select(y => y.Sum(m => m.Cost)),
                });

                if (rs.Where(x => x.data.Count() == 0).Count() == rs.Count())
                {
                    return Json(new List<object>());
                }
                else
                {
                    return Json(rs);
                }
            }
        }

        [HttpPost]
        public JsonResult HighchartPieAssets(string Type, string Department, string Year, string PieYear)
        {
            var year = DateTime.Now.Year;
            year = !string.IsNullOrEmpty(PieYear) ? int.Parse(PieYear) : year;

            var assetUsed = (from a in _context.AssetAllocateDetails.Where(x => !x.IsDeleted && x.CreatedTime.Value.Year.Equals(year))
                             join b in _context.AssetMains.Where(x => !x.IsDeleted) on a.AssetCode equals b.AssetCode
                             select new
                             {
                                 a.Quantity
                             }).Sum(x => x.Quantity);

            var assetCancel = (from a in _context.AssetCancelDetails.Where(x => !x.IsDeleted && x.CreatedTime.Value.Year.Equals(year))
                               join b in _context.AssetMains.Where(x => !x.IsDeleted) on a.AssetName equals b.AssetCode
                               select new
                               {
                                   a.QuantityAsset
                               }).Sum(x => x.QuantityAsset);

            var assetRepair = (from a in _context.AssetMaintenanceDetailss.Where(x => !x.IsDeleted && x.CreatedTime.Value.Year.Equals(year))
                               join b in _context.AssetMains.Where(x => !x.IsDeleted) on a.AssetCode equals b.AssetCode
                               select new
                               {
                                   a.AssetQuantity
                               }).Sum(x => x.AssetQuantity);

            var total = assetUsed + assetCancel + assetRepair;
            double percentAssetUsed = Math.Round(((double)assetUsed / (double)total) * 100, 1);
            double percentAssetCancel = Math.Round(((double)assetCancel / (double)total) * 100, 1);
            double percentAssetRepair = Math.Round(((double)assetRepair / (double)total) * 100, 1);

            var item1 = new
            {
                name = "Tài sản đang sử dụng",
                y = percentAssetUsed
            };
            var item2 = new
            {
                name = "Tài sản hủy",
                y = percentAssetCancel
            };
            var item3 = new
            {
                name = "Tài sản sửa chữa",
                y = percentAssetRepair
            };

            var list = new List<object>()
            {
                item1,
                item2,
                item3
            };

            if (total == 0)
                list = new List<object>();

            return Json(list);
        }

        [HttpPost]
        public JsonResult GetCardInBoard()
        {
            var year = DateTime.Now.Year;
            var listWeight = (from a in _context.ProgressTrackings
                              join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                              where !b.IsDeleted && b.Status != "TRASH"
                              select new
                              {
                                  a.CardCode,
                                  b.WeightNum,
                                  a.UpdatedTime,
                                  a.Progress
                              }).OrderByDescending(x => x.UpdatedTime);
            var query = (from a in _context.WORKOSBoards
                         join b in _context.WfObjects on a.BoardCode equals b.WfObjCode
                         where a.IsDeleted == false && b.WfObjType == "BOARD"
                         group a by new { a.BoardCode } into grp
                         select new
                         {
                             name = grp.First().BoardName,
                             data = (from k in _context.WORKOSLists
                                     join i in _context.WORKOSCards on k.ListCode equals i.ListCode
                                     join o in listWeight on i.CardCode equals o.CardCode
                                     join l in _context.JcObjectIdRelatives on i.CardCode equals l.CardCode into l1
                                     from l2 in l1.DefaultIfEmpty()
                                     where !k.IsDeleted && !i.IsDeleted && k.BoardCode == grp.First().BoardCode && i.CreatedDate.Year == year && i.Status != "TRASH" && i.Status != "CANCLED"
                                     group o by new { o.UpdatedTime.Month, o.CardCode } into grpCard
                                     select new
                                     {
                                         Month = grpCard.Key.Month,
                                         Progress = grpCard.First().Progress,
                                         WeighNum = grpCard.First().WeightNum
                                     }).GroupBy(x => x.Month)
                         });
            return Json(query);
        }
        [HttpPost]
        public JsonResult HighchartProds()
        {
            var year = DateTime.Now.Year;
            var queryImport = _context.ProdReceivedDetails.Where(x => !x.IsDeleted && x.CreatedTime.Year.Equals(year))
                .Select(p => new { p.Quantity, p.QuantityIsSet, Month = p.CreatedTime.Month }).GroupBy(x => new { x.Month })
                .Select(p => new
                {
                    Type = "Import",
                    Month = p.First().Month,
                    Total = p.Sum(y => y.Quantity),
                }).OrderBy(p => p.Month).ToList();

            var queryExport = _context.ProdDeliveryDetails.Where(x => !x.IsDeleted && x.CreatedTime.Year.Equals(year))
                .Select(p => new { p.Quantity, Month = p.CreatedTime.Month }).GroupBy(x => new { x.Month })
                .Select(p => new
                {
                    Type = "Export",
                    Month = p.First().Month,
                    Total = p.Sum(y => y.Quantity),
                }).OrderBy(p => p.Month).ToList();

            var query = queryImport.Union(queryExport);

            var rs = query.GroupBy(x => x.Type).Select(p => new
            {
                name = p.First().Type.Equals("Import") ? "Nhập" : "Xuất",
                data = p.Where(x => x.Type.Equals(p.First().Type)).GroupBy(i => i.Month).Select(z => new { month = z.First().Month, value = z.Sum(i => i.Total) })
            });

            return Json(rs);
        }
        [HttpPost]
        public JsonResult GetWorkFlow()
        {
            var query = (from a in _context.WORKOSBoards
                         join b in _context.WfObjects on a.BoardCode equals b.WfObjCode
                         where a.IsDeleted == false && b.WfObjType == "BOARD"
                         group a by new { a.BoardType } into grp
                         orderby grp.Key.BoardType descending
                         select new
                         {
                             BoardType = grp.FirstOrDefault(),
                             BoardTypeText = _context.CommonSettings.FirstOrDefault(x => x.CodeSet == grp.First().BoardType).ValueSet ?? "",
                             ListBoard = grp.Select(x => new
                             {
                                 x.BoardID,
                                 x.BoardCode,
                                 x.BoardName,
                                 Completed = x.Completed + "%",
                                 count = (from a in _context.WORKOSBoards
                                          join b in _context.WORKOSLists on a.BoardCode equals b.BoardCode
                                          join c in _context.WORKOSCards on b.ListCode equals c.ListCode
                                          where a.BoardCode == x.BoardCode
                                          && a.IsDeleted == false && b.IsDeleted == false && c.IsDeleted == false && c.Status != "TRASH"
                                          select new { }).Count(),
                             })
                         });
            return Json(query);
        }
        #endregion

        #region nhân sự
        public class JTableModelCustom : JTableModel
        {
            public string FullName { get; set; }
            public string Phone { get; set; }
            public string Permanentresidence { get; set; }
            public string EmployeeType { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public int? EmployeeId { get; set; }
            public string Unit { get; set; }
            public string Position { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
            //
            public string Gender { get; set; }
            public string NumberOfYears { get; set; }
            public string YearsOfWork { get; set; }
            public string Wage { get; set; }
            public string EducationalLevel { get; set; }
        }
        [HttpPost]
        public JsonResult GetListEmployess(JTableModelCustom jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var toDay = DateTime.Now;
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var query = (from a in _context.HREmployees
                             join b in _context.Roles on a.position equals b.Id into b1
                             from b2 in b1.DefaultIfEmpty()
                             join c in _context.AdDepartments on a.unit equals c.DepartmentCode into c1
                             from c2 in c1.DefaultIfEmpty()
                             join d in _context.Users.Where(x => x.Active) on a.Id.ToString() equals d.EmployeeCode into d1
                             from d2 in d1.DefaultIfEmpty()
                             where a.flag == 1
                             && (string.IsNullOrEmpty(jTablePara.FullName) || a.fullname.ToLower().Contains(jTablePara.FullName.ToLower()))
                             && (string.IsNullOrEmpty(jTablePara.Phone) || a.phone.ToLower().Contains(jTablePara.Phone.ToLower()))
                             && (string.IsNullOrEmpty(jTablePara.Permanentresidence) || a.permanentresidence.ToLower().Contains(jTablePara.Permanentresidence.ToLower()))
                             && (string.IsNullOrEmpty(jTablePara.EmployeeType) || a.employeetype.Equals(jTablePara.EmployeeType))
                             && (string.IsNullOrEmpty(jTablePara.Unit) || a.unit.Equals(jTablePara.Unit))
                             && (string.IsNullOrEmpty(jTablePara.Position) || a.position.Equals(jTablePara.Position))
                             && (string.IsNullOrEmpty(jTablePara.BranchId) || d2.BranchId.Equals(jTablePara.BranchId))
                             && ((fromDate == null || (a.createtime >= fromDate)) && (toDate == null || (a.createtime <= toDate)))

                            && (string.IsNullOrEmpty(jTablePara.Gender) || a.gender.ToString() == jTablePara.Gender)
                            && (string.IsNullOrEmpty(jTablePara.NumberOfYears) || (a.birthday.HasValue) && ((toDay.Year - a.birthday.Value.Year) == int.Parse(jTablePara.NumberOfYears)))
                            && (string.IsNullOrEmpty(jTablePara.YearsOfWork) || (a.work_from.HasValue) && ((toDay.Year - a.work_from.Value.Year) == int.Parse(jTablePara.YearsOfWork)))
                            && (string.IsNullOrEmpty(jTablePara.Wage) || a.wage.ToString() == jTablePara.Wage)
                            && ((string.IsNullOrEmpty(jTablePara.EducationalLevel)) || a.educationallevel.ToLower().Contains(jTablePara.EducationalLevel.ToLower()))
                             select new
                             {
                                 a.Id,
                                 a.fullname,
                                 gender = a.gender == 1 ? "Nam" : "Nữ",
                                 a.phone,
                                 a.permanentresidence,
                                 employeetype = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.employeetype).ValueSet ?? "",
                                 a.picture,
                                 a.birthofplace,
                                 a.unit,
                                 a.position,
                                 unitName = c2.Title,
                                 positionName = b2.Title,
                                 emailuser = a.emailuser,
                             });
                msg.Object = new
                {
                    data = query.OrderBy(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                    count = query.Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //kieu nhan vien
        [HttpPost]
        public object GetEmployeeStyle()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.IsDeleted == false && x.Group == EnumHelper<EmployeeEnum>.GetDisplayValue(EmployeeEnum.EmployeeStyle)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet }).AsNoTracking();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //phong ban
        [HttpPost]
        public object Gettreedataunit()
        {
            var msg = new JMessage { Error = true };

            try
            {
                var data = _context.AdDepartments.Where(x => !x.IsDeleted && x.IsEnabled).OrderBy(x => x.DepartmentId);
                msg.Object = data;
                msg.Error = false;
            }
            catch (Exception ex)
            {
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }

            return Json(msg);
        }
        //chuc vu
        [HttpPost]
        public object GetPosition()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.Roles.Where(x => x.Status == true).Select(x => new { x.Title, Code = x.Id }).AsParallel();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //don vi
        [HttpPost]
        public JsonResult GetBranch()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.AdOrganizations.Where(x => x.IsEnabled).Select(x => new { Code = x.OrgAddonCode, Name = x.OrgName });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //chi tiet nhan vien
        [HttpPost]
        public JsonResult GetDetailEmployess(int id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.HREmployees.Where(m => m.Id == id).Select(a => new
                {
                    a.Id,
                    a.fullname,
                    gender = a.gender == 1 ? "Nam" : "Nữ",
                    birthdayView = a.birthday != null ? a.birthday.Value.ToString("dd/MM/yyyy") : "",
                    a.identitycard,
                    identitycarddateView = a.identitycarddate != null ? a.identitycarddate.Value.ToString("dd/MM/yyyy") : "",
                    a.unit,
                    unitName = _context.AdDepartments.FirstOrDefault(y => y.DepartmentCode == a.unit).Title,
                    a.position,
                    positionName = _context.Roles.FirstOrDefault(y => y.Id == a.position).Title,
                    a.identitycardplace,
                    a.permanentresidence,
                    a.phone,
                    a.taxcode,
                    a.bank,
                    employeetype = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.employeetype).ValueSet ?? "",
                    a.picture,
                    a.birthofplace,
                    a.emailuser,
                    socialinsurancedateText = a.socialinsurancedate != null ? a.socialinsurancedate.Value.ToString("dd/MM/yyyy") : "",
                    work_from = a.work_from != null ? a.work_from.Value.ToString("dd/MM/yyyy") : "",
                    a.years_of_exp
                });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //liên hê
        [HttpPost]
        public object GetListMoreEmployee(int EmployeeId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var dataContact = from a in _context.HRContacts
                                  where a.flag == 1 && a.Employee_Id == EmployeeId
                                  select new
                                  {
                                      id_lh = a.id,
                                      Name = a.Name,
                                      Relationship = a.Relationship,
                                      Address = a.Address,
                                      Phone1 = a.Phone
                                  };
                var dataFile = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == EmployeeId.ToString() && x.ObjectType == EnumHelper<HrEmployeeEnum>.GetDisplayValue(HrEmployeeEnum.HrEmployeeEnum))
                                 join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                                 join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                                 from f in f1.DefaultIfEmpty()
                                 select new
                                 {
                                     a.Id,
                                     b.FileCode,
                                     b.FileName,
                                     b.FileTypePhysic,
                                     b.Desc,
                                     b.CreatedTime,
                                     b.CloudFileId,
                                     TypeFile = "NO_SHARE",
                                     ReposName = f != null ? f.ReposName : "",
                                     b.Url,
                                     FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,
                                 }).Union(
                  from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == EmployeeId.ToString() && x.ObjectType == EnumHelper<HrEmployeeEnum>.GetDisplayValue(HrEmployeeEnum.HrEmployeeEnum))
                  join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                  join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                  from f in f1.DefaultIfEmpty()
                  select new
                  {
                      Id = b.FileID,
                      b.FileCode,
                      b.FileName,
                      b.FileTypePhysic,
                      b.Desc,
                      b.CreatedTime,
                      b.CloudFileId,
                      TypeFile = "SHARE",
                      ReposName = f != null ? f.ReposName : "",
                      b.Url,
                      FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,

                  })).AsNoTracking();
                msg.Object = new
                {
                    Contact = dataContact,
                    File = dataFile
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        //danh sách cham cong
        public class SStaffTimeKeepingJtableModel
        {
            public string UserName { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
        }
        [HttpPost]
        public JsonResult GetListTimeKeepingEmployee(SStaffTimeKeepingJtableModel jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var today = DateTime.Today;
                var fromTime = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toTime = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var data = (from a in _context.ShiftLogs
                            where ((fromTime == null) || (a.ChkinTime.Value.Date >= fromTime.Value.Date))
                             && ((toTime == null) || (a.ChkinTime.Value.Date <= toTime.Value.Date))
                             && (string.IsNullOrEmpty(jTablePara.UserName) || a.CreatedBy == jTablePara.UserName)
                            select new
                            {
                                a.Id,
                                fullName = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).GivenName,
                                a.FromDevice,
                                ChkInTime = a.ChkinTime.Value.ToString("dd/MM/yyyy HH:mm:ss"),
                                a.ChkinLocationTxt,
                                ChkOutTime = a.ChkoutTime.HasValue ? a.ChkoutTime.Value.ToString("dd/MM/yyyy HH:mm:ss") : "",
                                a.ChkoutLocationTxt,
                                a.ShiftCode,
                                a.Note,
                                a.CreatedBy
                            }).OrderByDescending(x => x.Id);
                var count = data.Count();
                msg.Object = new
                {
                    data = data,
                    count = count
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        // danh sach thoi gian lam viec
        public class TimeWorkingSheetModel : JTableModel
        {
            public int ID { get; set; }
            public string UserName { get; set; }
            public string UserId { get; set; }
            public string TimeWorking { get; set; }
            public string Detail { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
        }
        [HttpPost]
        public JsonResult GetListTimeWorkingSheetEmployee(TimeWorkingSheetModel jTablepara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                //var fromTime = !string.IsNullOrEmpty(jTablepara.FromDate) ? DateTime.ParseExact(jTablepara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                //var toTime = !string.IsNullOrEmpty(jTablepara.ToDate) ? DateTime.ParseExact(jTablepara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                //var data = (from a in _context.ShiftLogs
                //            where (string.IsNullOrEmpty(jTablepara.UserName) || a.CreatedBy.Equals(jTablepara.UserName))
                //             && ((fromTime == null) || (a.ChkinTime.Value.Date >= fromTime.Value.Date))
                //            && ((toTime == null) || ((a.ChkoutTime.HasValue ? a.ChkoutTime.Value.Date : DateTime.Now.Date) <= toTime.Value.Date))
                //            select new
                //            {
                //                a.Id,
                //                fullName = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).GivenName,
                //                a.ShiftCode,
                //                a.CreatedBy,
                //                a.ChkinTime,
                //                a.ChkoutTime
                //            }).GroupBy(x => x.CreatedBy);
                //var listTimeWorking = new List<TimeWorkingSheet>();
                //if (data.Any())
                //{
                //    foreach (var item in data)
                //    {
                //        DateTime timeWorking = new DateTime();
                //        var timeSheet = new TimeWorkingSheet();
                //        var sessionUser = item.DistinctBy(x => x.ShiftCode).ToList();
                //        foreach (var session in sessionUser)
                //        {
                //            timeWorking += (session.ChkoutTime.HasValue ? session.ChkoutTime.Value : DateTime.Now) - session.ChkinTime.Value;
                //            timeSheet.Detail += "[" + session.ShiftCode + (!session.ChkoutTime.HasValue ? ("_" + DateTime.Now.ToString("HHmmssddMMyyyy")) : "") + "], ";
                //        }
                //        timeSheet.ID = item.First().Id;
                //        timeSheet.UserName = item.First().CreatedBy;
                //        timeSheet.FullName = item.First().fullName;
                //        timeSheet.TimeWorking = timeWorking.ToString("HH:mm:ss");
                //        listTimeWorking.Add(timeSheet);
                //    };
                //}
                var today = DateTime.Today;
                var fromTime = !string.IsNullOrEmpty(jTablepara.FromDate) ? DateTime.ParseExact(jTablepara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toTime = !string.IsNullOrEmpty(jTablepara.ToDate) ? DateTime.ParseExact(jTablepara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                if (fromTime == null && toTime == null)
                {
                    fromTime = today;
                    toTime = today;
                }
                var query = (from a in _context.ShiftLogs
                             where (string.IsNullOrEmpty(jTablepara.UserId) || a.CreatedBy.Equals(jTablepara.UserId))
                              && ((fromTime == null) || (a.ChkinTime.Value.Date >= fromTime.Value.Date))
                             && ((toTime == null) || ((a.ChkoutTime.HasValue ? a.ChkoutTime.Value.Date : DateTime.Now.Date) <= toTime.Value.Date))
                             select new
                             {
                                 a.Id,
                                 fullName = _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).GivenName,
                                 a.ShiftCode,
                                 a.CreatedBy,
                                 a.ChkinTime,
                                 a.ChkoutTime
                             }).GroupBy(x => x.CreatedBy);
                var listTimeWorking = new List<TimeWorkingSheet>();
                if (query.Any())
                {
                    foreach (var item in query)
                    {
                        DateTime timeWorking = new DateTime();
                        var timeSheet = new TimeWorkingSheet();
                        var sessionUser = item.DistinctBy(x => x.ShiftCode).ToList();
                        foreach (var session in sessionUser)
                        {
                            if (session.ChkoutTime.HasValue)
                            {
                                timeWorking += (session.ChkoutTime.Value - session.ChkinTime.Value);
                                timeSheet.Detail += "[" + session.ShiftCode + (!session.ChkoutTime.HasValue ? ("_" + DateTime.Now.ToString("HHmmssddMMyyyy")) : "") + "], ";
                            }
                        }
                        timeSheet.ID = item.First().Id;
                        timeSheet.UserName = item.First().CreatedBy;
                        timeSheet.FullName = item.First().fullName;
                        timeSheet.TimeWorking = timeWorking.ToString("HH:mm:ss");
                        listTimeWorking.Add(timeSheet);
                    }
                }
                msg.Object = new
                {
                    data = listTimeWorking,
                    count = listTimeWorking.Count()
                };
                //msg.Object = listTimeWorking;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);

        }
        //lay user
        [HttpPost]
        public object GetListUser()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.Users.Where(x => x.Active == true && x.UserName != "admin").Select(x => new { UserId = x.Id, x.GivenName, x.Picture, x.UserName, GroupUserCode = x.AdUserInGroups.Select(y => y.GroupUserCode).FirstOrDefault() }).AsNoTracking();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region hơph đồng
        public class JTableModelContractSearch : JTableModel
        {
            public string KeyWork { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string Status { get; set; }
            public string BudgetF { get; set; }
            public string BudgetT { get; set; }
            public string CusCode { get; set; }
            public string Currency { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
        }
        public class jTableViewContract
        {
            public int id { get; set; }
            public string Code { get; set; }
            public string Name { get; set; }
            public string cusCode { get; set; }
            public string cusName { get; set; }
            public string contractNo { get; set; }
            public string status { get; set; }
            public string icon { get; set; }
            public string duration { get; set; }
            public DateTime? contractDate { get; set; }
            public decimal? budget { get; set; }
            public decimal? budgetExcludeTax { get; set; }
            public string currency { get; set; }
            public string signer { get; set; }
            public DateTime? sEndDate { get; set; }
            public decimal? ExchangeRate { get; set; }
            public DateTime? CreatedTime { get; set; }
            public decimal Percent { get; set; }
            public string ExpirationDate { get; set; }
            public string RenewalDate { get; set; }
            public string PaymentNextDate { get; set; }

        }
        [HttpPost]
        public object GetListContract(JTableModelContractSearch jTablePara)
        {
            //var session = HttpContext.GetSessionUser();
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                //var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                //var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                //var query = (from a in _context.PoSaleHeaders
                //             join d in _context.Customerss.Where(x => !x.IsDeleted) on a.CusCode equals d.CusCode
                //             join b in _context.CommonSettings on a.Status equals b.CodeSet into b1
                //             from b2 in b1.DefaultIfEmpty()
                //             join c in _context.CommonSettings on a.Currency equals c.CodeSet into c1
                //             from c2 in c1.DefaultIfEmpty()
                //             join f in _context.Users.Where(x => x.Active) on a.CreatedBy equals f.UserName
                //             where ((a.IsDeleted == false) &&
                //                    ((fromDate == null) || (a.ContractDate.HasValue && a.ContractDate.Value.Date >= fromDate)) &&
                //                    ((toDate == null) || (a.ContractDate.HasValue && a.ContractDate.Value.Date <= toDate)) &&
                //                    (string.IsNullOrEmpty(jTablePara.KeyWork) || a.ContractCode.ToLower().Contains(jTablePara.KeyWork.ToLower()) || a.Title.ToLower().Contains(jTablePara.KeyWork.ToLower())) &&
                //                    (string.IsNullOrEmpty(jTablePara.CusCode) || a.CusCode.Equals(jTablePara.CusCode)) &&
                //                    (string.IsNullOrEmpty(jTablePara.BranchId) || f.BranchId.Equals(jTablePara.BranchId)) &&
                //                    (string.IsNullOrEmpty(jTablePara.Status) || a.Status.Contains(jTablePara.Status)) &&
                //                    (string.IsNullOrEmpty(jTablePara.BudgetF) || a.Budget >= Convert.ToDecimal(jTablePara.BudgetF)) &&
                //                    (string.IsNullOrEmpty(jTablePara.BudgetT) || a.Budget <= Convert.ToDecimal(jTablePara.BudgetT)) &&
                //                    (string.IsNullOrEmpty(jTablePara.Currency) || a.Currency.Contains(jTablePara.Currency))
                //                    )
                //             //Điều kiện phân quyền dữ liệu
                //             //&& (session.IsAllData
                //             //|| (!session.IsAllData && session.IsBranch && session.RoleCode.Equals(EnumHelper<Role>.GetDisplayValue(Role.Giamdoc)) && session.ListUserOfBranch.Any(x => x == a.CreatedBy))
                //             //|| (!session.IsAllData && !session.IsBranch && session.IsUser && session.UserName == a.CreatedBy))
                //             select new jTableViewContrack
                //             {
                //                 id = a.ContractHeaderID,
                //                 Code = a.ContractCode,
                //                 Name = a.Title,
                //                 cusCode = a.CusCode,
                //                 cusName = d.CusName,
                //                 contractNo = a.ContractNo,
                //                 status = b2.ValueSet,
                //                 icon = b2.Logo,
                //                 duration = a.Duration,
                //                 contractDate = a.ContractDate,
                //                 budget = a.Budget,
                //                 budgetExcludeTax = a.BudgetExcludeTax,
                //                 currency = c2.ValueSet,
                //                 signer = a.Signer,
                //                 sEndDate = a.EndDate,
                //                 ExchangeRate = a.ExchangeRate,
                //                 CreatedTime = a.CreatedTime,
                //                 Percent = 0,
                //             });

                //var count = query.Count();
                //var data = query.OrderByDescending(x => x.CreatedTime).ThenBy(x => x.Name).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                //for (var i = 0; i < data.Count(); i++)
                //{
                //    data[i].Percent = _cardService.GetPercentJCObject("CONTRACT", data[i].Code);
                //    data[i].ExpirationDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].Code)).AttrValue : "";
                //    data[i].RenewalDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.Attrcode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)).AttrValue : "";
                //    data[i].PaymentNextDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)).AttrValue : "";
                //}
                //var data = query.OrderByDescending(x => x.CreatedTime).ThenBy(x => x.Name).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = (from a in _context.PoSaleHeaders
                             join d in _context.Customerss.Where(x => !x.IsDeleted) on a.CusCode equals d.CusCode
                             join b in _context.CommonSettings on a.Status equals b.CodeSet into b1
                             from b2 in b1.DefaultIfEmpty()
                             join c in _context.CommonSettings on a.Currency equals c.CodeSet into c1
                             from c2 in c1.DefaultIfEmpty()
                             join f in _context.Users.Where(x => x.Active) on a.CreatedBy equals f.UserName
                             where ((a.IsDeleted == false) &&
                                    ((fromDate == null) || (a.ContractDate.HasValue && a.ContractDate.Value.Date >= fromDate)) &&
                                    ((toDate == null) || (a.ContractDate.HasValue && a.ContractDate.Value.Date <= toDate)) &&
                                    (string.IsNullOrEmpty(jTablePara.KeyWork) || a.ContractCode.ToLower().Contains(jTablePara.KeyWork.ToLower()) || a.Title.ToLower().Contains(jTablePara.KeyWork.ToLower())) &&
                                    (string.IsNullOrEmpty(jTablePara.CusCode) || a.CusCode.Equals(jTablePara.CusCode)) &&
                                    (string.IsNullOrEmpty(jTablePara.BranchId) || f.BranchId.Equals(jTablePara.BranchId)) &&
                                    (string.IsNullOrEmpty(jTablePara.Status) || a.Status.Contains(jTablePara.Status)) &&
                                    (string.IsNullOrEmpty(jTablePara.BudgetF) || a.Budget >= Convert.ToDecimal(jTablePara.BudgetF)) &&
                                    (string.IsNullOrEmpty(jTablePara.BudgetT) || a.Budget <= Convert.ToDecimal(jTablePara.BudgetT)) &&
                                    (string.IsNullOrEmpty(jTablePara.Currency) || a.Currency.Contains(jTablePara.Currency)))

                             select new jTableViewContract
                             {
                                 id = a.ContractHeaderID,
                                 Code = a.ContractCode,
                                 Name = a.Title,
                                 cusCode = a.CusCode,
                                 cusName = d.CusName,
                                 contractNo = a.ContractNo,
                                 status = b2.ValueSet,
                                 icon = b2.Logo,
                                 duration = a.Duration,
                                 contractDate = a.ContractDate,
                                 budget = a.Budget,
                                 budgetExcludeTax = a.BudgetExcludeTax,
                                 currency = c2.ValueSet,
                                 signer = a.Signer,
                                 sEndDate = a.EndDate,
                                 ExchangeRate = a.ExchangeRate,
                                 CreatedTime = a.CreatedTime,
                                 Percent = 0,
                             });

                var count = query.Count();
                var data = query.OrderByDescending(x => x.CreatedTime).ThenBy(x => x.Name).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                for (var i = 0; i < data.Count(); i++)
                {
                    data[i].Percent = _cardService.GetPercentJCObject("CONTRACT", data[i].Code);
                    data[i].ExpirationDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].Code)).AttrValue : null;
                    data[i].RenewalDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)).AttrValue : null;
                    data[i].PaymentNextDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].Code)).AttrValue : null;
                }
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetCustomers()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.Customerss.Where(y => y.IsDeleted == false).OrderByDescending(x => x.CusID).Select(x => new { Code = x.CusCode, Name = x.CusName, Role = x.Role, x.Address, x.ZipCode, x.MobilePhone, x.PersonInCharge, x.Email }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetStatusPOCus()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.ContractStatusPoCus)).OrderBy(x => x.SettingID).Select(x => new { Code = x.CodeSet, Name = x.ValueSet, Icon = x.Logo });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetContractDetail(int id, string userId)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractHeaderID == id);
                data.ListUserView += ";" + userId;
                msg.Object = _context.PoSaleHeaders.Select(x => new
                {
                    ContractHeaderID = x.ContractHeaderID,
                    ContractCode = x.ContractCode,
                    Title = x.Title,
                    ContractType = x.ContractType,
                    ContractName = _context.CommonSettings.FirstOrDefault(y => !y.IsDeleted && y.CodeSet == x.ContractType).ValueSet,
                    ContractDate = x.ContractDate,
                    ContractNo = x.ContractNo,
                    Duration = x.Duration,
                    Version = x.Version,
                    Status = x.Status,
                    StatusName = _context.CommonSettings.FirstOrDefault(y => !y.IsDeleted && y.CodeSet == x.Status).ValueSet,
                    Signer = x.Signer,
                    MainService = x.MainService,
                    Budget = x.Budget,
                    Currency = x.Currency,
                    LocationHardCopy = x.LocationHardCopy,
                    Describe = x.Describe,
                    CusCode = x.CusCode,
                    ContractRelative = x.ContractRelative,
                    Tags = x.Tags,
                    CreatedBy = x.CreatedBy,
                    CreatedTime = x.CreatedTime,
                    UpdatedBy = x.UpdatedBy,
                    UpdatedTime = x.UpdatedTime,
                    DeletedBy = x.DeletedBy,
                    DeletedTime = x.DeletedTime,
                    IsDeleted = x.IsDeleted,
                    EffectiveDate = x.EffectiveDate,
                    EndDate = x.EndDate,
                    RealBudget = x.RealBudget,
                    Confirm = x.Confirm,
                    EstimateTime = x.EstimateTime,
                    PrjName = _context.Projects.FirstOrDefault(y => !y.FlagDeleted && y.ProjectCode == x.PrjCode).ProjectTitle,
                    PrjCode = x.PrjCode,
                    BudgetExcludeTax = x.BudgetExcludeTax,
                    TaxAmount = x.TaxAmount,
                    ExchangeRate = x.ExchangeRate,
                    AcceptanceTime = x.AcceptanceTime,
                    Maintenance = x.Maintenance,
                    Discount = x.Discount,
                    Commission = x.Commission,
                    LastBudget = x.LastBudget,
                    IsChangeProduct = x.IsChangeProduct,
                }).Where(x => x.ContractHeaderID == id && x.IsDeleted == false).MaxBy(x => x.Version);
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetListMoreContract(string ContractCode, string CusCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var dataContact = _context.Contacts.Where(x => !x.IsDeleted && x.CusCode.Equals(CusCode))
                    .Select(x => new
                    {
                        ContactId = x.CusId,
                        ContactName = x.ContactName,
                        ContactPhone = x.MobilePhone,
                        ContactEmail = x.Email,
                    });

                var dataFile = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == ContractCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract))
                                 join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                                 join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                                 from f in f1.DefaultIfEmpty()
                                 select new
                                 {
                                     a.Id,
                                     b.FileCode,
                                     b.FileName,
                                     b.FileTypePhysic,
                                     b.Desc,
                                     b.CreatedTime,
                                     b.CloudFileId,
                                     TypeFile = "NO_SHARE",
                                     ReposName = f != null ? f.ReposName : "",
                                     b.Url,
                                     FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,
                                 }).Union(
                from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == ContractCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract))
                join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                from f in f1.DefaultIfEmpty()
                select new
                {
                    Id = b.FileID,
                    b.FileCode,
                    b.FileName,
                    b.FileTypePhysic,
                    Desc = b.Desc != null ? b.Desc : "",
                    b.CreatedTime,
                    b.CloudFileId,
                    TypeFile = "SHARE",
                    ReposName = f != null ? f.ReposName : "",
                    b.Url,
                    FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,
                })).AsNoTracking();
                msg.Object = new
                {
                    Contact = dataContact,
                    File = dataFile
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class JTableModelContractPo : JTableModel
        {
            public string Key { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string PoSupCode { get; set; }
            public string Status { get; set; }
            public string BudgetF { get; set; }
            public string BudgetT { get; set; }
            public string Signer { get; set; }
            public string Currency { get; set; }
            public string ProjectCode { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
        }
        public class jTableViewContractPo
        {
            public int Id { get; set; }
            public string PoSupCode { get; set; }
            public string PoTitle { get; set; }
            public string OrderBy { get; set; }
            public string Consigner { get; set; }
            public string Mobile { get; set; }
            public string Buyer { get; set; }
            public string BuyerCode { get; set; }
            public string SupCode { get; set; }
            public string SupName { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string Status { get; set; }
            public string Icon { get; set; }
            public string Type { get; set; }
            public string ExpirationDate { get; set; }
            public string RenewalDate { get; set; }
            public string PaymentNextDate { get; set; }
        }
        [HttpPost]
        public object GetListCotractPo(JTableModelContractPo jTablePara)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                string poSupCode = jTablePara.PoSupCode;
                string status = jTablePara.Status;

                if (string.IsNullOrEmpty(jTablePara.ContractCode) && string.IsNullOrEmpty(jTablePara.ProjectCode))
                {
                    var query = from a in _context.PoBuyerHeaderPayments.Where(x => !x.IsDeleted).Where
                            (x => !x.IsDeleted && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate)) &&
                                  ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate)) &&
                                  (string.IsNullOrEmpty(jTablePara.PoSupCode) || x.PoSupCode.ToLower().Contains(poSupCode.ToLower()) || (x.PoTitle.ToLower().Contains(poSupCode.ToLower()))) &&
                                  (string.IsNullOrEmpty(jTablePara.Status) || x.Status.Equals(status)))
                                join b in _context.Customerss.Where(x => !x.IsDeleted) on a.BuyerCode equals b.CusCode into b1
                                from b2 in b1.DefaultIfEmpty()
                                join c in _context.Suppliers.Where(x => !x.IsDeleted) on a.SupCode equals c.SupCode into c1
                                from c2 in c1.DefaultIfEmpty()
                                join d in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Status equals d.CodeSet into d1
                                from d2 in d1.DefaultIfEmpty()
                                join k in _context.Users.Where(x => x.Active) on a.CreatedBy equals k.UserName
                                where (string.IsNullOrEmpty(jTablePara.BranchId) || k.BranchId.Equals(jTablePara.BranchId))

                                select new jTableViewContractPo
                                {
                                    Id = a.Id,
                                    PoSupCode = a.PoSupCode,
                                    PoTitle = a.PoTitle,
                                    OrderBy = a.OrderBy,
                                    Consigner = a.Consigner,
                                    Mobile = a.Mobile,
                                    Buyer = a.Buyer,
                                    BuyerCode = a.BuyerCode + " - " + b2.CusName,
                                    SupCode = a.SupCode,
                                    SupName = c2.SupName,
                                    CreatedBy = a.CreatedBy,
                                    CreatedTime = a.CreatedTime,
                                    Status = d2.ValueSet,
                                    Icon = d2.Logo,
                                    Type = a.Type == "STORAGE" ? "Lưu kho" : "Đơn hàng theo khách hàng",
                                    ExpirationDate = "",
                                    RenewalDate = "",
                                    PaymentNextDate = "",
                                };
                    var count = query.Count();
                    var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                    for (var i = 0; i < data.Count(); i++)
                    {
                        data[i].ExpirationDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                        data[i].RenewalDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                        data[i].PaymentNextDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                    }
                    msg.Object = new
                    {
                        count = count,
                        data = data
                    };
                }
                else
                {
                    var query = (from a in _context.PoBuyerHeaderPayments
                            .Where(x => !x.IsDeleted && ((fromDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date >= fromDate)) &&
                                  ((toDate == null) || (x.CreatedTime.HasValue && x.CreatedTime.Value.Date <= toDate)) &&
                                  (string.IsNullOrEmpty(jTablePara.PoSupCode) || x.PoSupCode.ToLower().Contains(poSupCode.ToLower()) || (x.PoTitle.ToLower().Contains(poSupCode.ToLower()))) &&
                                  (string.IsNullOrEmpty(jTablePara.Status) || x.Status.Equals(status)))
                                 join b in _context.Customerss.Where(x => !x.IsDeleted) on a.BuyerCode equals b.CusCode
                                 join c in _context.Suppliers.Where(x => !x.IsDeleted) on a.SupCode equals c.SupCode
                                 join d in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Status equals d.CodeSet into d1
                                 from d2 in d1.DefaultIfEmpty()
                                 from e in _context.PoBuyerDetails.Where(x => x.PoSupCode == a.PoSupCode && x.Type == "REQUEST")
                                 join f in _context.RequestImpProductHeaders on e.ReqCode equals f.ReqCode
                                 join k in _context.Users.Where(x => x.Active) on a.CreatedBy equals k.UserName
                                 where (string.IsNullOrEmpty(jTablePara.ContractCode) || f.PoCode == jTablePara.ContractCode)
                                 && (string.IsNullOrEmpty(jTablePara.ProjectCode) || f.ProjectCode == jTablePara.ProjectCode)
                                 && (string.IsNullOrEmpty(jTablePara.BranchId) || k.BranchId.Equals(jTablePara.BranchId))

                                 select new jTableViewContractPo
                                 {
                                     Id = a.Id,
                                     PoSupCode = a.PoSupCode,
                                     PoTitle = a.PoTitle,
                                     OrderBy = a.OrderBy,
                                     Consigner = a.Consigner,
                                     Mobile = a.Mobile,
                                     Buyer = a.Buyer,
                                     BuyerCode = a.BuyerCode + " - " + b.CusName,
                                     SupCode = a.SupCode,
                                     SupName = c.SupName,
                                     CreatedBy = a.CreatedBy,
                                     CreatedTime = a.CreatedTime,
                                     Status = d2.ValueSet,
                                     Icon = d2.Logo,
                                     Type = a.Type,
                                     ExpirationDate = "",
                                     RenewalDate = "",
                                     PaymentNextDate = "",
                                 }).Distinct();
                    var count = query.Count();
                    var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                    for (var i = 0; i < data.Count(); i++)
                    {
                        data[i].ExpirationDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                        data[i].RenewalDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                        data[i].PaymentNextDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(data[i].PoSupCode)).AttrValue : "";
                    }
                    msg.Object = new
                    {
                        count = count,
                        data = data
                    };
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetStatusPOSup()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.ContractStatusPoSup)).OrderBy(x => x.SettingID).Select(x => new { Code = x.CodeSet, Name = x.ValueSet, Icon = x.Logo });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetContract()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.PoSaleHeaders.Where(x => !x.IsDeleted).OrderByDescending(x => x.ContractHeaderID).Select(x => new { x.ContractNo, Code = x.ContractCode, Name = x.Title });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetListProjectSearch()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = (from a in _context.Projects.Where(x => !x.FlagDeleted)
                              orderby a.Id descending
                              select new
                              {
                                  Code = a.ProjectCode,
                                  Name = a.ProjectTitle,
                                  CusCode = a.CustomerCode,
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class JTableModelRequestPrice : JTableModel
        {
            public string Key { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ReqCode { get; set; }
            public string Status { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public object GetListRequestPrice(JTableModelRequestPrice jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                string status = jTablePara.Status;

                var query = from a in _context.RequestPriceHeaders.Where(x => !x.IsDeleted)
                            join d in _context.Users.Where(x => x.Active) on a.CreatedBy equals d.UserName into d1
                            from d2 in d1.DefaultIfEmpty()
                            join e in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Status equals e.CodeSet into e1
                            from e2 in e1.DefaultIfEmpty()
                            join f in _context.Users.Where(x => x.Active) on a.CreatedBy equals f.UserName
                            where ((a.IsDeleted == false) &&
                                  ((fromDate == null) || (a.CreatedTime.Date >= fromDate)) &&
                                  ((toDate == null) || (a.CreatedTime.Date <= toDate)) &&
                                  (string.IsNullOrEmpty(jTablePara.BranchId) || f.BranchId.Equals(jTablePara.BranchId)) &&
                                  (string.IsNullOrEmpty(jTablePara.Key) || a.ReqCode.ToLower().Contains(jTablePara.Key.ToLower()) || a.Title.ToLower().Contains(jTablePara.Key.ToLower())) &&
                                  (string.IsNullOrEmpty(jTablePara.Status) || a.Status.Equals(status)))
                            select new
                            {
                                a.Id,
                                a.ReqCode,
                                a.Title,
                                CreatedBy = d2.GivenName,
                                a.CreatedTime,
                                Status = e2.ValueSet,
                                Icon = e2.Logo
                            };

                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListStatusRequestPrice()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<WarehouseEnum>.GetDisplayValue(WarehouseEnum.PriceStatus)).OrderBy(x => x.Priority).Select(x => new { Code = x.CodeSet, Name = x.ValueSet, Icon = x.Logo });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetRequestPrice(int Id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.RequestPriceHeaders.FirstOrDefault(x => x.Id == Id);
                if (data != null)
                    data.sExpectedDate = data.ExpectedDate.HasValue ? data.ExpectedDate.Value.ToString("dd/MM/yyyy") : null;
                data.Status = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == data.Status).ValueSet;
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetListMoreRequestPrice(string RequestCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {

                var dataFile = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == RequestCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.RequestWorkPrice))
                                 join b in _context.EDMSFiles.Where(x => !x.IsDeleted && x.IsFileMaster == null || x.IsFileMaster == true) on a.FileCode equals b.FileCode
                                 join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                                 from f in f1.DefaultIfEmpty()
                                 select new
                                 {
                                     a.Id,
                                     b.FileCode,
                                     b.FileName,
                                     b.FileTypePhysic,
                                     b.Desc,
                                     b.CreatedTime,
                                     b.CloudFileId,
                                     TypeFile = "NO_SHARE",
                                     ReposName = f != null ? f.ReposName : "",
                                     b.IsFileMaster,
                                     b.EditedFileBy,
                                     b.EditedFileTime,
                                     b.FileID,
                                     b.Url,
                                     FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,
                                 }).Union(
                 from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == RequestCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.RequestWorkPrice))
                 join b in _context.EDMSFiles.Where(x => !x.IsDeleted && (x.IsFileMaster == null || x.IsFileMaster == true)) on a.FileCode equals b.FileCode
                 join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                 from f in f1.DefaultIfEmpty()
                 select new
                 {
                     Id = b.FileID,
                     b.FileCode,
                     b.FileName,
                     b.FileTypePhysic,
                     Desc = b.Desc != null ? b.Desc : "",
                     b.CreatedTime,
                     b.CloudFileId,
                     TypeFile = "SHARE",
                     ReposName = f != null ? f.ReposName : "",
                     b.IsFileMaster,
                     b.EditedFileBy,
                     b.EditedFileTime,
                     b.FileID,
                     b.Url,
                     FileType = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == b.FileCode).FileTypePhysic,
                 })).AsNoTracking();
                msg.Object = new
                {
                    File = dataFile
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class JTableModelRequestImpProductHeaders : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string ReqCode { get; set; }
            public string Status { get; set; }
            public string ProjectCode { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public object GetListRequestImpProduct(JTableModelRequestImpProductHeaders jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                string status = jTablePara.Status;

                var query = from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted)
                            join c in _context.Customerss.Where(x => !x.IsDeleted) on a.CusCode equals c.CusCode
                            join d in _context.Users.Where(x => x.Active) on a.CreatedBy equals d.UserName into d1
                            from d2 in d1.DefaultIfEmpty()
                            join e in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Status equals e.CodeSet into e1
                            from e2 in e1.DefaultIfEmpty()
                            join f in _context.Users.Where(x => x.Active) on a.CreatedBy equals f.UserName
                            where ((a.IsDeleted == false) &&
                                  ((fromDate == null) || (a.CreatedTime.Date >= fromDate)) &&
                                  ((toDate == null) || (a.CreatedTime.Date <= toDate)) &&
                                  (string.IsNullOrEmpty(jTablePara.BranchId) || f.BranchId.Equals(jTablePara.BranchId)) &&
                                  (string.IsNullOrEmpty(jTablePara.ReqCode) || a.ReqCode.ToLower().Contains(jTablePara.ReqCode.ToLower())) &&
                                  (string.IsNullOrEmpty(jTablePara.ContractCode) || (a.PoCode.ToLower().Equals(jTablePara.ContractCode.ToLower()))) &&
                                  (string.IsNullOrEmpty(jTablePara.ProjectCode) || (a.ProjectCode.ToLower().Equals(jTablePara.ProjectCode.ToLower()))) &&
                                  (string.IsNullOrEmpty(jTablePara.Status) || a.Status.Equals(status)))
                            select new
                            {
                                a.Id,
                                a.ReqCode,
                                a.Title,
                                a.PoCode,
                                a.CusCode,
                                c.CusName,
                                CreatedBy = d2.GivenName,
                                a.CreatedTime,
                                Status = e2.ValueSet,
                                Icon = e2.Logo
                            };

                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetDetailRequestImpProduct(int Id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.RequestImpProductHeaders.FirstOrDefault(x => x.Id == Id);
                data.Status = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == data.Status).ValueSet;
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetDetailCustomers(string CusCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.Customerss.FirstOrDefault(x => x.IsDeleted == false && x.CusCode == CusCode);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetMoreRequestImpProduct(string RequestCode)
        {

            JMessage msg = new JMessage { Error = false };
            try
            {
                var dataFile = (from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == RequestCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.RequestImportProduct))
                                join b in _context.EDMSFiles.Where(x => !x.IsDeleted) on a.FileCode equals b.FileCode
                                join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                                from f in f1.DefaultIfEmpty()
                                select new
                                {
                                    a.Id,
                                    b.FileCode,
                                    b.FileName,
                                    b.FileTypePhysic,
                                    b.Desc,
                                    b.CreatedTime,
                                    b.CloudFileId,
                                    TypeFile = "NO_SHARE",
                                    //ReposName = f != null ? f.ReposName : "",                          
                                    b.IsFileMaster,
                                    EditedFileBy = _context.Users.FirstOrDefault(x => x.UserName.Equals(b.EditedFileBy)) != null ? _context.Users.FirstOrDefault(x => x.UserName.Equals(b.EditedFileBy)).GivenName : "",
                                    b.EditedFileTime,
                                    Url = b.Url,
                                    FileType = b.FileTypePhysic,
                                }).AsNoTracking();
                msg.Object = new
                {
                    File = dataFile
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class JTableModelReportSendRequestImportProduc : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string PoSupCode { get; set; }
            public string ProductCode { get; set; }
            public string Title { get; set; }
            public string SupCode { get; set; }
            public string ReqCode { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public object GetListReportSendRequestImportProduct(JTableModelReportSendRequestImportProduc jTablePara, int userType = 0)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted)
                            join b in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                            join c in _context.PoSaleHeaders.Where(x => !x.IsDeleted) on b.PoCode equals c.ContractCode
                            join d in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals d.CusCode into d1
                            from d2 in d1.DefaultIfEmpty()
                            join e in _context.Suppliers.Where(x => !x.IsDeleted) on a.SupCode equals e.SupCode into e1
                            from e2 in e1.DefaultIfEmpty()
                            join f in _context.Users.Where(x => x.Active) on a.CreatedBy equals f.UserName into f1
                            from f2 in f1.DefaultIfEmpty()
                            join g in _context.SubProducts.Where(x => !x.IsDeleted) on a.ProductCode equals g.ProductQrCode into g1
                            from g2 in g1.DefaultIfEmpty()
                            join h in _context.MaterialProducts.Where(x => !x.IsDeleted) on a.ProductCode equals h.ProductCode into h1
                            from h2 in h1.DefaultIfEmpty()
                            join i in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Unit equals i.CodeSet into i1
                            from i2 in i1.DefaultIfEmpty()
                            where ((fromDate == null) || (a.CreatedTime >= fromDate)) &&
                                  ((toDate == null) || (a.CreatedTime <= toDate)) &&
                                  (string.IsNullOrEmpty(jTablePara.ReqCode) || a.ReqCode.ToLower().Contains(jTablePara.ReqCode.ToLower())) &&
                                  (string.IsNullOrEmpty(jTablePara.SupCode) || a.SupCode.Equals(jTablePara.SupCode)) &&
                                  (string.IsNullOrEmpty(jTablePara.Title) || b.Title.ToLower().Contains(jTablePara.Title.ToLower())) &&
                                  (string.IsNullOrEmpty(jTablePara.ContractCode) || (c.ContractCode.ToLower().Equals(jTablePara.ContractCode.ToLower()))) &&
                                  (string.IsNullOrEmpty(jTablePara.ProductCode) || a.ProductCode.Equals(jTablePara.ProductCode))
                            select new
                            {
                                a.Id,
                                a.ReqCode,
                                b.Title,
                                a.ProductCode,
                                ProductName = g2 != null ? g2.AttributeName : h2.ProductName,
                                a.ProductType,
                                b.CusCode,
                                d2.CusName,
                                a.ExpectedDate,
                                a.SupCode,
                                e2.SupName,
                                CreatedBy = f2.GivenName,
                                a.CreatedTime,
                                a.PoCount,
                                a.Quantity,
                                a.RateConversion,
                                a.RateLoss,
                                Unit = i2.ValueSet,
                                a.Note
                            };

                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetSuppliers()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = (from a in _context.Suppliers.Where(x => !x.IsDeleted)
                              select new
                              {
                                  Id = a.SupID,
                                  Code = a.SupCode,
                                  Name = a.SupName,
                                  Group = a.SupGroup,
                                  Address = a.Address,
                                  MobilePhone = a.Mobile,
                                  Email = a.Email,
                                  ListExtend = _context.SupplierExtends.Where(x => x.isdeleted == false && (x.ext_code.ToLower() == "zip_code" || x.ext_code.ToLower() == "person_in_charge") && x.supplier_code == a.SupID).ToList()
                              }).ToList(); ;

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetItemContractPo(int Id, string UserId)
        {
            var data = _context.PoBuyerHeaders.FirstOrDefault(x => x.Id == Id);
            data.ListUserView += ";" + UserId;
            _context.SaveChanges();
            data.sEstimateTime = data.EstimateTime.HasValue ? data.EstimateTime.Value.ToString("dd/MM/yyyy") : null;
            data.Confirm = GetConfirmText(data.Confirm);
            data.Status = _context.CommonSettings.FirstOrDefault(x => x.CodeSet == data.Status && !x.IsDeleted).ValueSet;
            data.Type = _context.CommonSettings.FirstOrDefault(x => x.CodeSet == data.Type && !x.IsDeleted).ValueSet;
            // data.PoSupCode = _context.PoBuyerDetails.FirstOrDefault(x => x.PoSupCode == data.PoSupCode && !x.IsDeleted);
            JMessage msg = new JMessage();
            var Buyer = _context.Customerss.FirstOrDefault(x => x.CusCode == data.BuyerCode && !x.IsDeleted);
            var Supplier = _context.Suppliers.FirstOrDefault(x => x.SupCode == data.SupCode && !x.IsDeleted);
            msg.Object = new
            {
                PoBuyerHeaders = data,
                Customers = Buyer,
                Supplier = Supplier
            };
            return Json(msg);
        }
        [HttpPost]
        public string GetConfirmText(string confirmInDB)
        {
            var data = string.Empty;
            try
            {
                if (!string.IsNullOrEmpty(confirmInDB))
                {
                    var listConfirm = JsonConvert.DeserializeObject<List<ConfirmText>>(confirmInDB);
                    if (listConfirm.Count > 0)
                    {
                        var obj = listConfirm.LastOrDefault(x => x.UserName.Equals(User.Identity.Name));
                        if (obj != null)
                            data = obj.Body;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return data;
        }

        [HttpPost]
        public JsonResult GetListProjectAdd(string prjCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                if (string.IsNullOrEmpty(prjCode))
                {
                    var data = _context.Projects.Where(x => !x.FlagDeleted).Select(x => new
                    {
                        Code = x.ProjectCode,
                        Name = x.ProjectTitle
                    });
                    msg.Object = data;
                    return Json(msg);
                }
                else
                {
                    var data = (from a in _context.Projects.Where(x => !x.FlagDeleted)
                                join b1 in _context.PoSaleHeaders.Where(x => !x.IsDeleted) on a.ProjectCode equals b1.PrjCode into b2
                                from b in b2.DefaultIfEmpty()
                                where b == null || (b != null && b.PrjCode == prjCode)
                                orderby a.Id descending
                                select new
                                {
                                    Code = a.ProjectCode,
                                    Name = a.ProjectTitle
                                });
                    msg.Object = data;
                    return Json(msg);
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCommon()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var list = _context.CommonSettings.OrderBy(x => x.SettingID).Where(x => x.IsDeleted == false && x.Group == "CONTRACT_TYPE").Select(x => new { Code = x.CodeSet, Name = x.ValueSet }).AsNoTracking();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetStatusContract()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.ContractStatusPoCus)).OrderBy(x => x.SettingID).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        public class ContractHeaderModel
        {
            public int ContractHeaderID { get; set; }
            public string ContractCode { get; set; }
            public string ContractDate { get; set; }
            public string ContractNo { get; set; }
            public string ContractType { get; set; }
            public string Currency { get; set; }
            public string CusCode { get; set; }
            public string Describe { get; set; }
            public string Duration { get; set; }
            public string LocationHardCopy { get; set; }
            public string MainService { get; set; }
            public string Signer { get; set; }
            public string Status { get; set; }
            public string Tags { get; set; }
            public string Title { get; set; }
            public int Version { get; set; }
            public string sEffectiveDate { get; set; }
            public string sEndDate { get; set; }
            public decimal? RealBudget { get; set; }
            public decimal? Budget { get; set; }
            public decimal? BudgetExcludeTax { get; set; }
            public decimal? TaxAmount { get; set; }
            public string Confirm { get; set; }
            public string PrjCode { get; set; }
            public decimal? ExchangeRate { get; set; }
            public string AcceptanceTime { get; set; }
            public int? Maintenance { get; set; }
            public string ContactName { get; set; }
            public string ContactPhone { get; set; }
            public string ContactEmail { get; set; }
            public string CreatedBy { get; set; }
            public string UpdateBy { get; set; }
            public string ListUserView { get; set; }
            public decimal? Discount { get; set; }
            public decimal? Commission { get; set; }
            public bool? IsLoadProject { get; set; }
        }
        [HttpPost]
        public JsonResult GetContactCode()
        {
            var msg = new JMessage() { Error = false, Title = "" };
            var dt = "HD";
            var rs = "";
            DateTime now = DateTime.Now;
            var count = 0;
            var chkCode = "." + dt + "_";
            count = _context.PoSaleHeaders.Where(x => x.ContractCode.Contains(chkCode) && x.Version == 0).Count();

            if (count < 9)
            {
                rs = "T" + now.Month + "." + now.Year + "." + dt + "_0" + (count + 1);
            }
            else
            {
                rs = "T" + now.Month + "." + now.Year + "." + dt + "_" + (count + 1);
            }
            msg.Object = rs;
            return Json(msg);

        }

        [HttpPost]
        public async Task<JsonResult> InsertContract(ContractHeaderModel obj)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                using (await userLock.LockAsync(obj.ContractCode.ToLower()))
                {
                    var checkExist = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode.ToLower() == obj.ContractCode.ToLower() && !x.IsDeleted);
                    if (checkExist == null)
                    {
                        DateTime? ctdate = !string.IsNullOrEmpty(obj.ContractDate) ? DateTime.ParseExact(obj.ContractDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                        DateTime? effective = !string.IsNullOrEmpty(obj.sEffectiveDate) ? DateTime.ParseExact(obj.sEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                        DateTime? end = !string.IsNullOrEmpty(obj.sEndDate) ? DateTime.ParseExact(obj.sEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                        DateTime? acceptanceTime = !string.IsNullOrEmpty(obj.AcceptanceTime) ? DateTime.ParseExact(obj.AcceptanceTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                        var data = new PoSaleHeader()
                        {
                            ContractCode = obj.ContractCode,
                            ContractDate = ctdate,
                            ContractNo = obj.ContractNo,
                            ContractType = obj.ContractType,
                            Currency = obj.Currency,
                            CusCode = obj.CusCode,
                            PrjCode = obj.PrjCode,
                            Describe = obj.Describe,
                            Duration = obj.Duration,
                            LocationHardCopy = obj.LocationHardCopy,
                            MainService = obj.MainService,
                            Signer = obj.Signer,
                            Status = obj.Status,
                            Tags = obj.Tags,
                            Title = obj.Title,
                            Version = 0,  //Fix khi thêm mới version = 0
                            CreatedBy = obj.CreatedBy,
                            CreatedTime = DateTime.Now,
                            EffectiveDate = effective,
                            RealBudget = obj.RealBudget,
                            Budget = obj.Budget,
                            BudgetExcludeTax = obj.BudgetExcludeTax,
                            TaxAmount = obj.TaxAmount ?? 0,
                            EndDate = end,
                            ExchangeRate = obj.ExchangeRate,
                            AcceptanceTime = acceptanceTime,
                            Maintenance = obj.Maintenance,
                            Discount = obj.Discount ?? 0,
                            Commission = obj.Commission ?? 0,
                            ListUserView = obj.ListUserView,
                        };

                        data.LastBudget = data.RealBudget * (1 - data.Discount / 100 - data.Commission / 100);

                        if (data.EffectiveDate != null && data.Duration != null)
                        {
                            data.EstimateTime = data.EffectiveDate.Value.AddDays(Int32.Parse(data.Duration));
                        }
                        _context.PoSaleHeaders.Add(data);
                        _context.SaveChanges();
                        InsertPOCusTracking(data);
                        msg.Title = "Thêm hợp đồng thành công!";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_CODE_HAVE";
                    }
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }
        public class PoSaleHeaderModel
        {
            public int ContractHeaderID { get; set; }
            public string ContractCode { get; set; }
            public string Title { get; set; }
            public string ContractType { get; set; }
            public DateTime? ContractDate { get; set; }
            public string ContractNo { get; set; }
            public string Duration { get; set; }
            public int Version { get; set; }
            public string Status { get; set; }
            public string Signer { get; set; }
            public string MainService { get; set; }
            public string Currency { get; set; }
            public string LocationHardCopy { get; set; }
            public string Describe { get; set; }
            public string CusCode { get; set; }
            public string ContractRelative { get; set; }
            public string Tags { get; set; }
            public decimal? Budget { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public DateTime? EffectiveDate { get; set; }
            public DateTime? EndDate { get; set; }
            public string sEffectiveDate { get; set; }
            public string sEndDate { get; set; }
            public decimal? RealBudget { get; set; }
            public string Confirm { get; set; }
            public DateTime? EstimateTime { get; set; }
            public string LogProductDetail { get; set; }
            public string PrjCode { get; set; }
            public decimal? BudgetExcludeTax { get; set; }
            public decimal? TaxAmount { get; set; }
            public decimal? ExchangeRate { get; set; }
            public DateTime? AcceptanceTime { get; set; }
            public int? Maintenance { get; set; }
            public string LogData { get; set; }
            public decimal? Commission { get; set; }
            public decimal? Discount { get; set; }
            public decimal? LastBudget { get; set; }
            public bool? IsChangeProduct { get; set; }
            public string ListUserView { get; set; }

        }
        [NonAction]
        public object InsertPOCusTracking(PoSaleHeader obj1)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var poHeader = obj1;
                var contractActivitys = _context.ContractActivitys.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractAttributes = _context.ContractAttributes.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractFiles = _context.ContractFiles.Where(x => x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractMemberTags = _context.ContractMemberTags.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractPeopleTags = _context.ContractPeopleTags.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractProductDetails = _context.PoSaleProductDetails.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractServiceDetails = _context.ContractServiceDetails.Where(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var contractPayments = _context.MaterialPaymentTickets.Where(x => x.PayObjId.Equals(obj1.ContractCode) && x.PayType.Equals("PAYMENT_CONTRACT")).ToList();
                var contractNotes = _context.ContactNotes.Where(x => x.ContractCode.Equals(obj1.ContractCode)).ToList();
                var LogProductDetailOld = poHeader.LogProductDetail;
                var jsonData = new
                {
                    Header = poHeader,
                    Detail = new
                    {
                        ServiceDetail = contractServiceDetails,
                        ProductDetail = contractProductDetails,
                        File = contractFiles,
                        Attribute = contractAttributes,
                        MemberTag = contractMemberTags,
                        //Activity = contractActivitys,
                        Payment = contractPayments,
                        Note = contractNotes
                    }
                };

                var json = JsonConvert.SerializeObject(jsonData);
                var obj = new PoCusUpdateTracking
                {
                    Status = obj1.Status,
                    PoCusCode = obj1.ContractCode,
                    CreatedBy = User.Identity.Name,
                    CreatedTime = DateTime.Now,
                    IsDeleted = false,
                    UpdateContent = json
                };

                _context.PoCusUpdateTrackings.Add(obj);

                //Thêm field LogData trong bảng Header
                var listLogData = new List<object>();
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj1.ContractCode));
                if (!string.IsNullOrEmpty(contract.LogData))
                {
                    listLogData = JsonConvert.DeserializeObject<List<object>>(contract.LogData);
                    jsonData.Header.LogData = null;
                    jsonData.Header.LogProductDetail = null;
                    listLogData.Add(jsonData);
                    contract.LogData = JsonConvert.SerializeObject(listLogData);
                    contract.LogProductDetail = LogProductDetailOld;
                    _context.PoSaleHeaders.Update(contract);
                }
                else
                {
                    listLogData.Add(jsonData);

                    contract.LogData = JsonConvert.SerializeObject(listLogData);

                    _context.PoSaleHeaders.Update(contract);
                }

                _context.SaveChanges();

                msg.Title = "Thêm log thành công";
            }
            catch (Exception ex)
            {
                throw;
            }

            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteContract(int id, string user)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractHeaderID == id);
                if (data != null)
                {
                    //Check hợp đồng đã được đưa vào Yêu cầu đặt hàng
                    var chkUsingReqImp = _context.RequestImpProductHeaders.Any(x => !x.IsDeleted && x.PoCode == data.ContractCode);
                    if (chkUsingReqImp)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_DELETED_ERR";
                        return Json(msg);
                    }

                    //Check hợp đồng đã được xuất kho (trả hàng)
                    var chkUsingImpTicket = _context.ProdDeliveryHeaders.Any(x => !x.IsDeleted && x.LotProductCode == data.ContractCode);
                    if (chkUsingImpTicket)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_DELETED_ERR_EX";
                        return Json(msg);
                    }

                    data.DeletedTime = DateTime.Now.Date;
                    data.DeletedBy = user;
                    data.IsDeleted = true;
                    _context.Update(data);
                    _context.SaveChanges();

                    msg.Title = "Xóa thành công";

                    var list = _context.PoSaleProductDetails.Where(x => x.IsDeleted == false && x.ContractCode == data.ContractCode).ToList();
                    foreach (var item in list)
                    {
                        string[] param = new string[] { "@ProductCode", "@OldQuantity", "@NewQuantity", "@ProductType", "@EstimateDate" };
                        object[] val = new object[] { item.ProductCode, item.Quantity, 0, item.ProductType, data.EstimateTime.Value.Date };
                        _repositoryService.CallProc("PR_UPDATE_CONTRACT_DETAIL", param, val);
                    }

                    //Xóa các bảng chi tiết
                    list.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.PoSaleProductDetails.UpdateRange(list);

                    var listContact = _context.ContractDetails.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode).ToList();
                    listContact.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ContractDetails.UpdateRange(listContact);

                    var listContractMemberTags = _context.ContractMemberTags.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode).ToList();
                    listContractMemberTags.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ContractMemberTags.UpdateRange(listContractMemberTags);

                    var listContactNotes = _context.ContactNotes.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode).ToList();
                    listContactNotes.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ContactNotes.UpdateRange(listContactNotes);

                    var listEDMSRepoCatFiles = _context.EDMSRepoCatFiles.Where(x => x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract) && x.ObjectCode == data.ContractCode).ToList();
                    _context.EDMSRepoCatFiles.RemoveRange(listEDMSRepoCatFiles);

                    var listContractAttributes = _context.ContractAttributes.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode).ToList();
                    listContractAttributes.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ContractAttributes.UpdateRange(listContractAttributes);

                    var listContractServiceDetails = _context.ContractServiceDetails.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode).ToList();
                    listContractServiceDetails.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ContractServiceDetails.UpdateRange(listContractServiceDetails);

                    _context.SaveChanges();
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_DELETED_ERR_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_ContractPO_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetItemContract(int id, string user)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.IsDeleted == false && x.ContractHeaderID == id);
                contract.ListUserView += ";" + user;
                _context.SaveChanges();
                var data = _context.PoSaleHeaders.Select(x => new PoSaleHeader
                {
                    ContractHeaderID = x.ContractHeaderID,
                    ContractCode = x.ContractCode,
                    Title = x.Title,
                    ContractType = x.ContractType,
                    ContractDate = x.ContractDate,
                    ContractNo = x.ContractNo,
                    Duration = x.Duration,
                    Version = x.Version,
                    Status = x.Status,
                    Signer = x.Signer,
                    MainService = x.MainService,
                    Budget = x.Budget,
                    Currency = x.Currency,
                    LocationHardCopy = x.LocationHardCopy,
                    Describe = x.Describe,
                    CusCode = x.CusCode,
                    ContractRelative = x.ContractRelative,
                    Tags = x.Tags,
                    CreatedBy = x.CreatedBy,
                    CreatedTime = x.CreatedTime,
                    UpdatedBy = x.UpdatedBy,
                    UpdatedTime = x.UpdatedTime,
                    DeletedBy = x.DeletedBy,
                    DeletedTime = x.DeletedTime,
                    IsDeleted = x.IsDeleted,
                    EffectiveDate = x.EffectiveDate,
                    EndDate = x.EndDate,
                    RealBudget = x.RealBudget,
                    Confirm = x.Confirm,
                    EstimateTime = x.EstimateTime,
                    //LogProductDetail = x.LogProductDetail,
                    PrjCode = x.PrjCode,
                    BudgetExcludeTax = x.BudgetExcludeTax,
                    TaxAmount = x.TaxAmount,
                    ExchangeRate = x.ExchangeRate,
                    AcceptanceTime = x.AcceptanceTime,
                    Maintenance = x.Maintenance,
                    Discount = x.Discount,
                    Commission = x.Commission,
                    LastBudget = x.LastBudget,
                    IsChangeProduct = x.IsChangeProduct,
                    //LogData = x.LogData,
                }).Where(x => x.ContractCode == contract.ContractCode && x.IsDeleted == false).MaxBy(x => x.Version);


                data.Confirm = GetConfirmText(data.Confirm);
                if (data != null)
                {
                    msg.Object = data;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tồn tại dữ liệu!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetCustommerContactInfo(string cusCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            var contact = _context.Contacts.FirstOrDefault(x => !x.IsDeleted && x.CusCode.Equals(cusCode));
            msg.Object = contact;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateContract(ContractHeaderModel obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                DateTime? ctdate = !string.IsNullOrEmpty(obj.ContractDate) ? DateTime.ParseExact(obj.ContractDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? effective = !string.IsNullOrEmpty(obj.sEffectiveDate) ? DateTime.ParseExact(obj.sEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? end = !string.IsNullOrEmpty(obj.sEndDate) ? DateTime.ParseExact(obj.sEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? acceptanceTime = !string.IsNullOrEmpty(obj.AcceptanceTime) ? DateTime.ParseExact(obj.AcceptanceTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int dem = 0;
                var contractCode = "";
                foreach (var c in obj.ContractCode)
                {
                    if (c == '_')
                    {
                        dem++;
                    }
                }
                if (dem > 1)
                {
                    var idx = obj.ContractCode.LastIndexOf("_");
                    contractCode = obj.ContractCode.Substring(0, idx);
                }
                else
                {
                    contractCode = obj.ContractCode;
                }
                var data = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == contractCode && x.IsDeleted == false);
                var versionBase = data.Version;
                var contractCodeBase = data.ContractCode;

                //Nếu tạo phụ lục => đưa hợp đồng hiện tại vào các bảng history
                if (data.Version != obj.Version)
                {
                    PoSaleHeader contractHis = new PoSaleHeader();
                    contractHis.IsDeleted = data.IsDeleted;
                    contractHis.IsChangeProduct = data.IsChangeProduct;
                    contractHis.AcceptanceTime = data.AcceptanceTime;
                    contractHis.ContractDate = data.ContractDate;
                    contractHis.CreatedTime = data.CreatedTime;
                    contractHis.DeletedTime = data.DeletedTime;
                    contractHis.EffectiveDate = data.EffectiveDate;
                    contractHis.EndDate = data.EndDate;
                    contractHis.EstimateTime = data.EstimateTime;
                    contractHis.UpdatedTime = data.UpdatedTime;
                    contractHis.Budget = data.Budget;
                    contractHis.BudgetExcludeTax = data.BudgetExcludeTax;
                    contractHis.Commission = data.Commission;
                    contractHis.Discount = data.Discount;
                    contractHis.ExchangeRate = data.ExchangeRate;
                    contractHis.LastBudget = data.LastBudget;
                    contractHis.RealBudget = data.RealBudget;
                    contractHis.TaxAmount = data.TaxAmount;
                    contractHis.Maintenance = data.Maintenance;
                    contractHis.Confirm = data.Confirm;
                    contractHis.ContractCode = data.ContractCode;
                    contractHis.ContractNo = data.ContractNo;

                    contractHis.ContractRelative = data.ContractRelative;

                    contractHis.ContractType = data.ContractType;
                    contractHis.CreatedBy = data.CreatedBy;
                    contractHis.Currency = data.Currency;
                    contractHis.CusCode = data.CusCode;
                    contractHis.DeletedBy = data.DeletedBy;
                    contractHis.Describe = data.Describe;
                    contractHis.Duration = data.Duration;
                    contractHis.LocationHardCopy = data.LocationHardCopy;
                    contractHis.LogData = data.LogData;
                    contractHis.LogProductDetail = data.LogProductDetail;
                    contractHis.MainService = data.MainService;
                    contractHis.PrjCode = data.PrjCode;
                    //contractHis.sEffectiveDate = data.sEffectiveDate;
                    //contractHis.sEndDate = data.sEndDate;
                    contractHis.Signer = data.Signer;
                    contractHis.Status = data.Status;
                    contractHis.Tags = data.Tags;
                    contractHis.Title = data.Title;
                    contractHis.UpdatedBy = data.UpdatedBy;
                    contractHis.Version = data.Version;
                    //contractHis.ContractHeaderID = data.ContractHeaderID;

                    _context.PoSaleHeaders.Add(contractHis);

                    //Tạo các bản ghi tăng version cho các bảng chi tiết
                    var contractProductHis = _context.PoSaleProductDetails.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode && x.ContractVersion == data.Version)
                                                     .Select(x => new PoSaleProductDetail
                                                     {
                                                         Commission = x.Commission,
                                                         Cost = x.Cost,
                                                         CreatedBy = x.CreatedBy,
                                                         CreatedTime = x.CreatedTime,
                                                         CustomFee = x.CustomFee,
                                                         DeletedBy = x.DeletedBy,
                                                         DeletedTime = x.DeletedTime,
                                                         Discount = x.Discount,
                                                         //Id = x.Id,
                                                         IsDeleted = x.IsDeleted,
                                                         Note = x.Note,
                                                         PriceType = x.PriceType,
                                                         ProductCode = x.ProductCode,
                                                         ProductName = x.ProductName,
                                                         ProductType = x.ProductType,
                                                         Quantity = x.Quantity,
                                                         QuantityNeedExport = x.QuantityNeedExport,
                                                         Tax = x.Tax,
                                                         Unit = x.Unit,
                                                         UpdatedBy = x.UpdatedBy,
                                                         UpdatedTime = x.UpdatedTime,
                                                         ContractCode = obj.ContractCode,
                                                         ContractVersion = obj.Version,
                                                     })
                                                    .ToList();
                    _context.PoSaleProductDetails.AddRange(contractProductHis);

                    var contractServiceHis = _context.ContractServiceDetails.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode && x.ContractVersion == data.Version)
                                                     .Select(x => new ContractServiceDetail
                                                     {
                                                         Commission = x.Commission,
                                                         Cost = x.Cost,
                                                         CreatedBy = x.CreatedBy,
                                                         CreatedTime = x.CreatedTime,
                                                         Currency = x.Currency,
                                                         CustomFee = x.CustomFee,
                                                         DeletedBy = x.DeletedBy,
                                                         DeletedTime = x.DeletedTime,
                                                         Discount = x.Discount,
                                                         //Id = x.Id,
                                                         IsDeleted = x.IsDeleted,
                                                         Note = x.Note,
                                                         Quantity = x.Quantity,
                                                         ServiceCode = x.ServiceCode,
                                                         ServiceName = x.ServiceName,
                                                         Tax = x.Tax,
                                                         Unit = x.Unit,
                                                         UpdatedBy = x.UpdatedBy,
                                                         UpdatedTime = x.UpdatedTime,
                                                         ContractCode = obj.ContractCode,
                                                         ContractVersion = obj.Version,
                                                     })
                                                    .ToList();
                    _context.ContractServiceDetails.AddRange(contractServiceHis);

                    var contractAttributeHis = _context.ContractAttributes.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode && x.ContractVersion == data.Version)
                                                     .Select(x => new ContractAttribute
                                                     {
                                                         AttrCode = x.AttrCode,
                                                         AttrGroup = x.AttrGroup,
                                                         AttrValue = x.AttrValue,
                                                         //ContractAttributeID = x.ContractAttributeID,
                                                         CreatedBy = x.CreatedBy,
                                                         CreatedTime = x.CreatedTime,
                                                         DeletedBy = x.DeletedBy,
                                                         DeletedTime = x.DeletedTime,
                                                         IsDeleted = x.IsDeleted,
                                                         Note = x.Note,
                                                         UpdatedBy = x.UpdatedBy,
                                                         UpdatedTime = x.UpdatedTime,
                                                         ContractCode = obj.ContractCode,
                                                         ContractVersion = obj.Version,
                                                     })
                                                    .ToList();
                    _context.ContractAttributes.AddRange(contractAttributeHis);

                    var contractSchedulePayHis = _context.ContractSchedulePays.Where(x => !x.IsDeleted && x.ContractCode == data.ContractCode && x.ContractVersion == data.Version)
                                                     .Select(x => new ContractSchedulePay
                                                     {
                                                         Condition = x.Condition,
                                                         CreatedBy = x.CreatedBy,
                                                         CreatedTime = x.CreatedTime,
                                                         DeletedBy = x.DeletedBy,
                                                         DeletedTime = x.DeletedTime,
                                                         EstimateTime = x.EstimateTime,
                                                         //Id = x.Id,
                                                         IsDeleted = x.IsDeleted,
                                                         Money = x.Money,
                                                         Note = x.Note,
                                                         PayTimes = x.PayTimes,
                                                         Percentage = x.Percentage,
                                                         Quantity = x.Quantity,
                                                         UpdatedBy = x.UpdatedBy,
                                                         UpdatedTime = x.UpdatedTime,
                                                         ContractCode = obj.ContractCode,
                                                         ContractVersion = obj.Version,
                                                     })
                                                    .ToList();
                    _context.ContractSchedulePays.AddRange(contractSchedulePayHis);
                }

                DateTime? oldEtimateTime = data.EstimateTime;
                data.ContractCode = obj.ContractCode;
                data.ContractDate = ctdate;
                data.ContractNo = obj.ContractNo;
                data.ContractType = obj.ContractType;
                data.Currency = obj.Currency;
                data.CusCode = obj.CusCode;
                data.PrjCode = obj.PrjCode;
                data.Describe = obj.Describe;
                data.Duration = obj.Duration;
                data.LocationHardCopy = obj.LocationHardCopy;
                data.MainService = obj.MainService;
                data.Signer = obj.Signer;
                data.Status = obj.Status;
                data.Tags = obj.Tags;
                data.Title = obj.Title;
                data.Version = obj.Version;
                if (obj.IsLoadProject == true)
                {
                    data.CreatedBy = obj.UpdateBy;
                    data.CreatedTime = DateTime.Now.Date;
                }
                else
                {
                    data.UpdatedBy = obj.UpdateBy;
                    data.UpdatedTime = DateTime.Now.Date;
                }
                data.EffectiveDate = effective;
                data.EndDate = end;
                data.RealBudget = obj.RealBudget;
                data.Budget = obj.Budget;
                data.BudgetExcludeTax = obj.BudgetExcludeTax;
                data.ExchangeRate = obj.ExchangeRate;
                data.AcceptanceTime = acceptanceTime;
                data.Maintenance = obj.Maintenance;
                data.TaxAmount = obj.TaxAmount ?? 0;
                data.Discount = obj.Discount ?? 0;
                data.Commission = obj.Commission ?? 0;
                data.LastBudget = data.RealBudget * (1 - data.Discount / 100 - data.Commission / 100);
                data.ListUserView = ";" + obj.ListUserView;
                //if (!string.IsNullOrEmpty(obj.Confirm))
                //{
                //    if (string.IsNullOrEmpty(data.Confirm))
                //    {
                //        data.Confirm = InsertConfirmText(obj.Confirm);
                //    }
                //    else if (GetConfirmText(data.Confirm).ToLower() != obj.Confirm.ToLower())
                //    {
                //        data.Confirm = UpdateConfirmText(data.Confirm, obj.Confirm);
                //    }
                //}
                if (data.EffectiveDate != null && data.Duration != null)
                {
                    data.EstimateTime = data.EffectiveDate.Value.AddDays(Int32.Parse(data.Duration));
                }
                if (oldEtimateTime.Value.Date != data.EstimateTime.Value.Date)
                {
                    string[] param = new string[] { "@ContractCode", "@OldEstimateDate", "@EstimateDate" };
                    object[] val = new object[] { data.ContractCode, oldEtimateTime.Value.Date, data.EstimateTime.Value.Date };
                    _repositoryService.CallProc("PR_UPDATE_PO_SALE_HEADER", param, val);
                    var list = (from a in _context.PoSaleProductDetails.Where(x => x.IsDeleted == false && x.ContractCode == data.ContractCode)
                                join b in _context.ForecastProductInStocks on a.ProductCode equals b.ProductCode
                                where a.ProductType == b.ProductType && b.ForecastDate.Value.Date == data.EstimateTime.Value.Date
                                select new Compare
                                {
                                    ProductCode = a.ProductCode,
                                    ProductType = a.ProductType,
                                    Quantity = a.Quantity,
                                    CntForecast = (b.CntForecast == null ? 0 : b.CntForecast.Value)
                                }).ToList();
                    string log = UpdateLog(data.LogProductDetail, list);
                    data.LogProductDetail = log;
                }

                _context.PoSaleHeaders.Update(data);
                _context.SaveChanges();

                //Nếu tạo phụ lục => thêm relative
                if (versionBase != obj.Version)
                {
                    RelativeModel objRelative = new RelativeModel();
                    objRelative.ContractCode = obj.ContractCode;
                    objRelative.ContractRelative = new ContractRelativeModel();
                    objRelative.ContractRelative.ContractCode = contractCodeBase;
                    objRelative.ContractRelative.Relative = "CONTRACT_RELATIVE_APPENDIX";
                    InsertRelative(objRelative);
                }

                InsertPOCusTracking(data);
                msg.Title = "Cập nhật hợp đồng thành công!";

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi cập nhập hợp đồng !:" + ex.Message;
            }
            return Json(msg);
        }

        public class Compare
        {
            public string ProductCode { get; set; }
            public string ProductType { get; set; }
            public decimal Quantity { get; set; }
            public int CntForecast { get; set; }
        }

        [NonAction]
        private string UpdateLog(string log, List<Compare> list)
        {
            List<LogProductDetail> listLog = new List<LogProductDetail>();
            if (!string.IsNullOrEmpty(log))
            {
                listLog = JsonConvert.DeserializeObject<List<LogProductDetail>>(log);
                foreach (var item in listLog)
                {
                    foreach (var item1 in list)
                    {
                        if (item.ProductCode == item1.ProductCode && item.ProductType == item1.ProductType)
                        {
                            if (item1.Quantity + item1.CntForecast > 0)
                            {
                                item.ImpQuantity = item1.CntForecast;
                            }
                            else
                            {
                                item.ImpQuantity = -1 * (double)item1.Quantity;
                            }
                        }
                    }
                }
            }
            log = JsonConvert.SerializeObject(listLog);
            return log;
        }

        public class ContractRelativeModel
        {
            public int? Id { get; set; }
            public string ContractCode { get; set; }
            public string Relative { get; set; }
            public string CreatedBy { get; set; }
            public DateTime CreatedTime { get; set; }
        }
        public class RelativeModel
        {
            public int Id { get; set; }
            public string ContractCode { get; set; }
            public string ContractOrther { get; set; }
            public string Relative { get; set; }
            public string User { get; set; }
            public ContractRelativeModel ContractRelative { get; set; }

        }
        [HttpPost]
        public JsonResult InsertRelative(RelativeModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == obj.ContractCode && x.IsDeleted == false);
                if (contract != null)
                {
                    obj.ContractRelative.CreatedBy = ESEIM.AppContext.UserName;
                    obj.ContractRelative.CreatedTime = DateTime.Now;
                    var listContractRelative = !string.IsNullOrEmpty(contract.ContractRelative) ? JsonConvert.DeserializeObject<List<ContractRelativeModel>>(contract.ContractRelative) : new List<ContractRelativeModel>();
                    obj.ContractRelative.Id = listContractRelative.Any() ? listContractRelative.Max(x => x.Id) + 1 : 1;
                    var checkExistRelative = listContractRelative.FirstOrDefault(x => x.ContractCode == obj.ContractRelative.ContractCode);
                    if (checkExistRelative == null)
                    {
                        listContractRelative.Add(obj.ContractRelative);
                        contract.ContractRelative = JsonConvert.SerializeObject(listContractRelative);
                        _context.PoSaleHeaders.Update(contract);
                        _context.SaveChanges();
                        msg.Title = "Lưu thành công";

                        //Update fiel log
                        InsertPOCusTracking(contract);
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Không tìm thấy dữ liệu";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy dữ liệu";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi xảy ra!";
            };
            return Json(msg);
        }

        [HttpPost]
        public object UpdateCustommerContactInfo(CustommerContactInfo contact)
        {
            var msg = new JMessage() { Error = false };

            try
            {
                var check = _context.Contacts.FirstOrDefault(x => !x.IsDeleted && x.Id.Equals(contact.ContactId));
                if (check != null)
                {
                    check.ContactName = contact.ContactName;
                    check.MobilePhone = contact.ContactPhone;
                    check.Email = contact.ContactEmail;
                    check.UpdateTime = DateTime.Now;

                    _context.Contacts.Update(check);
                    _context.SaveChanges();
                }
                else
                {
                    if (!string.IsNullOrEmpty(contact.ContactName))
                    {
                        var obj = new Contact
                        {
                            CusCode = contact.CusCode,
                            ContactName = contact.ContactName,
                            MobilePhone = contact.ContactPhone,
                            Email = contact.ContactEmail,
                            CreateTime = DateTime.Now,
                        };

                        _context.Contacts.Add(obj);
                        _context.SaveChanges();
                    }
                }

                msg.Title = "Cập nhật thông tin khách hàng thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi cập nhật thông tin khách hàng!";
                throw ex;
            }

            return Json(msg);
        }

        //tab Product
        [HttpPost]
        public JsonResult GetProductCost()
        {
            var msg = new JMessage() { Error = false };
            var prices = FunctionProductPrice();
            var products = FunctionProducts();
            var query = from a in products
                        join b in prices on a.Code equals b.ProductCode into b2
                        from b in b2.DefaultIfEmpty()
                        select new ProductPrices
                        {
                            HeaderCode = a.HeaderCode,
                            Code = a.Code,
                            Name = a.Name,
                            Unit = a.Unit,
                            UnitName = a.UnitName,
                            AttributeCode = a.AttributeCode,
                            AttributeName = a.AttributeName,
                            ProductType = a.ProductType,
                            PricePerM = a.PricePerM,
                            PriceCostCatelogue = (b != null ? b.PriceCostCatelogue : (a.PriceCostCatelogue)),
                            PriceCostAirline = (b != null ? b.PriceCostAirline : (a.PriceCostAirline)),
                            PriceCostSea = (b != null ? b.PriceCostSea : (a.PriceCostSea)),
                            PriceRetailBuild = (b != null ? b.PriceRetailBuild : (a.PriceRetailBuild)),
                            PriceRetailBuildAirline = (b != null ? b.PriceRetailBuildAirline : (a.PriceRetailBuildAirline)),
                            PriceRetailBuildSea = (b != null ? b.PriceRetailBuildSea : (a.PriceRetailBuildSea)),
                            PriceRetailNoBuild = (b != null ? b.PriceRetailNoBuild : (a.PriceRetailNoBuild)),
                            PriceRetailNoBuildAirline = (b != null ? b.PriceRetailNoBuildAirline : (a.PriceRetailNoBuildAirline)),
                            PriceRetailNoBuildSea = (b != null ? b.PriceRetailNoBuildSea : (a.PriceRetailNoBuildSea)),
                            Tax = (b != null ? b.Tax : (a.Tax))
                        };
            msg.Object = query;
            return Json(msg);
        }
        //[NonAction]
        //public IEnumerable<ProductPrice> FunctionProductPrice()
        //{
        //    var currentTime = DateTime.Now;
        //    var query = from a in _context.ProductCostHeaders.Where(x => x.IsDeleted == false)
        //                join b in _context.ProductCostDetails.Where(x => x.IsDeleted == false)
        //                on a.HeaderCode equals b.HeaderCode
        //                where
        //                a.EffectiveDate != null && a.ExpiryDate != null &&
        //                a.EffectiveDate.Date <= currentTime.Date && currentTime.Date <= a.ExpiryDate.Date
        //                select new ProductPrice
        //                {
        //                    HeaderCode = a.HeaderCode,
        //                    ProductCode = b.ProductCode,
        //                    PriceCostCatelogue = b.PriceCostCatelogue,
        //                    PriceCostAirline = b.PriceCostAirline,
        //                    PriceCostSea = b.PriceCostSea,

        //                    PriceRetailBuild = b.PriceRetailBuild,
        //                    PriceRetailBuildAirline = b.PriceRetailBuildAirline,
        //                    PriceRetailBuildSea = b.PriceRetailBuildSea,

        //                    PriceRetailNoBuild = b.PriceRetailNoBuild,
        //                    PriceRetailNoBuildAirline = b.PriceRetailNoBuildAirline,
        //                    PriceRetailNoBuildSea = b.PriceRetailNoBuildSea,
        //                    Tax = b.Tax
        //                };
        //    return query;

        //}

        [NonAction]
        public IEnumerable<ProductPrices> FunctionProducts()
        {
            var currentTime = DateTime.Now;
            var rs = from b in _context.SubProducts.Where(x => !x.IsDeleted)
                     join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                     from c2 in c1.DefaultIfEmpty()
                     orderby b.ProductCode
                     select new ProductPrices
                     {
                         Code = b.ProductQrCode,
                         Name = b.AttributeName,
                         Unit = b.Unit,
                         UnitName = c2.ValueSet,
                         AttributeCode = b.AttributeCode,
                         AttributeName = b.AttributeName,
                         ProductType = "SUB_PRODUCT",
                         //PricePerM = b.Value.Split("*", StringSplitOptions.None)[2],
                         PriceCostCatelogue = b.PriceCostCatelogue,
                         PriceCostAirline = b.PriceCostAirline,
                         PriceCostSea = b.PriceCostSea,
                         PriceRetailBuild = b.PriceRetailBuild,
                         PriceRetailBuildAirline = b.PriceRetailBuildAirline,
                         PriceRetailBuildSea = b.PriceRetailBuildSea,
                         PriceRetailNoBuild = b.PriceRetailNoBuild,
                         PriceRetailNoBuildAirline = b.PriceRetailNoBuildAirline,
                         PriceRetailNoBuildSea = b.PriceRetailNoBuildSea,
                         Tax = 0
                     };

            var rs1 = from b in _context.MaterialProducts.Where(x => !x.IsDeleted && x.TypeCode == "FINISHED_PRODUCT")
                      join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                      from c2 in c1.DefaultIfEmpty()
                      orderby b.ProductCode
                      select new ProductPrices
                      {
                          Code = b.ProductCode,
                          Name = string.Format("Thành phẩm_{0}-{1}", b.ProductName, b.ProductCode),
                          Unit = b.Unit,
                          UnitName = c2.ValueSet,
                          AttributeCode = "",
                          AttributeName = "",
                          ProductType = "FINISHED_PRODUCT",
                          PricePerM = b.PricePerM != null ? b.PricePerM.ToString() : null,
                          PriceCostCatelogue = b.PriceCostCatelogue,
                          PriceCostAirline = b.PriceCostAirline,
                          PriceCostSea = b.PriceCostSea,
                          PriceRetailBuild = b.PriceRetailBuild,
                          PriceRetailBuildAirline = b.PriceRetailBuildAirline,
                          PriceRetailBuildSea = b.PriceRetailBuildSea,
                          PriceRetailNoBuild = b.PriceRetailNoBuild,
                          PriceRetailNoBuildAirline = b.PriceRetailNoBuildAirline,
                          PriceRetailNoBuildSea = b.PriceRetailNoBuildSea,
                          Tax = 0
                      };

            var query = rs1.Concat(rs);
            return query;

        }
        [HttpPost]
        public JsonResult GetTableProductForContract(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var queryPoSup = from a in _context.PoBuyerDetails.Where(x => !x.IsDeleted)
                             join b1 in _context.PoBuyerHeaders.Where(x => !x.IsDeleted) on a.PoSupCode equals b1.PoSupCode into b2
                             from b in b2.DefaultIfEmpty()
                             join c1 in _context.CommonSettings on b.Status equals c1.CodeSet into c2
                             from c in c2.DefaultIfEmpty()
                             select new
                             {
                                 b.Status,
                                 StatusName = c.ValueSet,
                                 a.ReqCode,
                                 a.ProductCode,
                                 a.ProductType
                             };

            var queryReq = from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted)
                           join b1 in _context.RequestImpProductDetails.Where(x => !x.IsDeleted) on a.ReqCode equals b1.ReqCode into b2
                           from b in b2.DefaultIfEmpty()
                           select new
                           {
                               a.PoCode,
                               a.ReqCode,
                               b.ProductCode,
                               b.ProductType
                           };

            var queryJoin = from a in queryReq
                            join b1 in queryPoSup on new { a.ReqCode, a.ProductCode, a.ProductType } equals new { b1.ReqCode, b1.ProductCode, b1.ProductType } into b2
                            from b in b2.DefaultIfEmpty()
                            select new
                            {
                                a.PoCode,
                                a.ProductCode,
                                a.ProductType,
                                b.StatusName
                            };

            var queryDistinct = queryJoin.DistinctBy(p => new { p.PoCode, p.ProductCode, p.ProductType }).Select(x => new
            {
                PoCode = x.PoCode,
                ProductCode = x.ProductCode,
                ProductType = x.ProductType,
                StatusName = x.StatusName
            });

            var query = from a in _context.PoSaleProductDetails.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.ContractCode) && x.ContractCode.Equals(ContractCode))
                        join b1 in _context.CommonSettings on a.Unit equals b1.CodeSet into b2
                        from b in b2.DefaultIfEmpty()
                        join c1 in queryJoin on new { a.ContractCode, a.ProductCode, a.ProductType } equals new { ContractCode = c1.PoCode, c1.ProductCode, c1.ProductType } into c2
                        from c in c2.DefaultIfEmpty()
                        select new
                        {
                            Id = a.Id,
                            ProductCode = a.ProductCode,
                            ProductName = _context.VProductAllTables.FirstOrDefault(zz => zz.ProductCode == a.ProductCode).ProductName,
                            a.Quantity,
                            Cost = a.Cost,
                            a.Unit,
                            a.Tax,
                            a.Note,
                            sUnit = (b != null ? b.ValueSet : ""),
                            PriceType = a.PriceType,
                            a.ProductType,
                            StatusName = c != null && !string.IsNullOrEmpty(c.StatusName) ? c.StatusName : "Chưa đặt hàng",
                            UnitName = a.Unit != null ? _context.CommonSettings.FirstOrDefault(yy => !yy.IsDeleted && yy.CodeSet == a.Unit).ValueSet : "",
                        };

            msg.Object = query;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetItemProductInContract(string contractCode, string productCode, string productType)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var query = (from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted && x.ProductCode == productCode && x.ProductType == productType)
                             join b in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted && x.PoCode == contractCode) on a.ReqCode equals b.ReqCode
                             join c1 in _context.CommonSettings.Where(x => !x.IsDeleted) on a.Unit equals c1.CodeSet into c2
                             from c in c2.DefaultIfEmpty()
                             join d1 in _context.Suppliers.Where(x => !x.IsDeleted) on a.SupCode equals d1.SupCode into d2
                             from d in d2.DefaultIfEmpty()
                             join e1 in _context.PoBuyerDetails.Where(x => !x.IsDeleted && x.ProductCode == productCode && x.ProductType == productType) on a.ReqCode equals e1.ReqCode into e2
                             from e in e2.DefaultIfEmpty()
                             select new
                             {
                                 SupName = d != null ? d.SupName : "",
                                 Quantity = a.Quantity,
                                 UnitName = c != null ? c.ValueSet : "",
                                 Status = e != null ? "Đã đặt hàng" : "Chưa đặt hàng",
                                 UnitPrice = e != null ? e.UnitPrice : null,
                                 Currency = e != null ? "VNĐ" : null,
                             });
                msg.Object = query;
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
                msg.Object = ex;
                return Json(msg);
            }
        }
        [NonAction]
        private bool IsLockDetail(string contractCode)
        {
            var data = _context.RequestImpProductHeaders.FirstOrDefault(x => x.PoCode == contractCode && x.IsDeleted == false);
            if (data != null)
            {
                if (data.Status != "APPROVED")
                    return false;
                return true;
            }
            else
            {
                return false;
            }
        }
        [NonAction]
        private void UpdateRequestImpDetail(string contractCode)
        {
            var requestImp = _context.RequestImpProductHeaders.FirstOrDefault(x => x.IsDeleted == false && x.PoCode == contractCode);
            if (requestImp != null)
            {
                var listDetail = _context.RequestImpProductDetails.Where(x => x.IsDeleted == false && x.ReqCode == requestImp.ReqCode);
                foreach (var item in listDetail)
                {
                    item.IsDeleted = true;
                }
                List<RequestImpProductDetail> list = GetListProduct(contractCode);

                foreach (var item1 in list)
                {
                    item1.ReqCode = requestImp.ReqCode;
                    item1.IsDeleted = false;
                    item1.CreatedBy = ESEIM.AppContext.UserName;
                    item1.CreatedTime = DateTime.Now;
                    item1.UpdatedBy = ESEIM.AppContext.UserName;
                    item1.UpdatedTime = DateTime.Now;
                    decimal a1 = decimal.Parse(item1.PoCount);
                    item1.Quantity = a1 * item1.RateLoss.Value / item1.RateConversion.Value;

                    RequestImpProductDetail c = null;
                    foreach (var item in listDetail)
                    {
                        if (item1.ProductCode == item.ProductCode && item1.ProductType == item.ProductType)
                        {
                            c = item;
                        }
                    }
                    if (c != null)
                    {
                        item1.RateConversion = c.RateConversion;
                        item1.RateLoss = c.RateLoss;
                        decimal a = decimal.Parse(item1.PoCount);
                        item1.Quantity = a * item1.RateLoss.Value / item1.RateConversion.Value;
                        item1.CreatedBy = c.CreatedBy;
                    }
                }
                _context.RequestImpProductDetails.RemoveRange(listDetail);
                _context.RequestImpProductDetails.AddRange(list);
                _context.SaveChanges();
            }
        }
        [NonAction]
        private List<RequestImpProductDetail> GetListProduct(string contractCode)
        {
            var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(contractCode));

            var listLogProductDetail = new List<LogProductDetail>();
            var listProductGroup = new List<RequestImpProductDetail>();
            if (contractHeader != null)
            {
                if (!string.IsNullOrEmpty(contractHeader.LogProductDetail))
                    listLogProductDetail.AddRange(JsonConvert.DeserializeObject<List<LogProductDetail>>(contractHeader.LogProductDetail));

                var listProductDetail = listLogProductDetail.Where(x => x.ImpQuantity < 0).GroupBy(p => p.ProductCode).Select(x => new
                {
                    x.FirstOrDefault().ProductCode,
                    x.FirstOrDefault().ContractCode,
                    Quantity = x.FirstOrDefault().ImpQuantity * -1
                });
                var listProduct = (from a in listProductDetail
                                   join b in _context.PoSaleProductDetails.Where(x => !x.IsDeleted) on a.ProductCode equals b.ProductCode
                                   join e in _context.SubProducts.Where(x => !x.IsDeleted) on b.ProductCode equals e.ProductQrCode into e1
                                   from e2 in e1.DefaultIfEmpty()
                                   join f in _context.MaterialProducts.Where(x => !x.IsDeleted) on b.ProductCode equals f.ProductCode into f1
                                   from f2 in f1.DefaultIfEmpty()
                                   join g in _context.CommonSettings.Where(x => !x.IsDeleted) on b.Unit equals g.CodeSet into g1
                                   from g2 in g1.DefaultIfEmpty()
                                   where b.ContractCode.Equals(contractCode)
                                   select new RequestImpProductDetail
                                   {
                                       ProductCode = a.ProductCode,
                                       //ProductName = e2 != null ? string.Format("{0}-{1}_{2}", _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)) != null ? _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b.ProductCode)).ProductName : null, b.ProductCode, e2.AttributeCode) : f2 != null ? string.Format("Thành phẩm_{0}-{1}", f2.ProductName, f2.ProductCode) : null,
                                       ProductName = e2 != null ? e2.AttributeName : f2 != null ? f2.ProductName : null,
                                       ProductType = b.ProductType,
                                       Quantity = (decimal)a.Quantity,
                                       PoCount = a.Quantity.ToString(),
                                       RateConversion = 1,
                                       RateLoss = 1,
                                       Unit = b.Unit,
                                       UnitName = g2.ValueSet,
                                   }).ToList();

                listProductGroup = listProduct.GroupBy(x => x.ProductCode).Select(p => new RequestImpProductDetail
                {
                    ProductCode = p.LastOrDefault().ProductCode,
                    ProductName = p.LastOrDefault().ProductName,
                    ProductType = p.LastOrDefault().ProductType,
                    Quantity = p.LastOrDefault().Quantity,
                    PoCount = p.LastOrDefault().PoCount,
                    RateConversion = p.LastOrDefault().RateConversion,
                    RateLoss = p.LastOrDefault().RateLoss,
                    Unit = p.LastOrDefault().Unit,
                    UnitName = p.LastOrDefault().UnitName,
                }).ToList();
            }
            return listProductGroup;
        }
        [NonAction]
        public bool InsertChangeProductLog(PoSaleHeader contract, string productCode, string productType, decimal impQuantity, DateTime estimate)
        {
            var listLog = new List<LogProductDetail>();
            var json = string.Empty;
            try
            {
                string log = contract.LogProductDetail;
                if (!string.IsNullOrEmpty(log))
                {
                    listLog = JsonConvert.DeserializeObject<List<LogProductDetail>>(log);
                    foreach (var item in listLog)
                    {
                        if (item.ProductCode == productCode && item.ProductType == productType)
                        {
                            listLog.Remove(item);
                            break;
                        }
                    }
                }
                LogProductDetail log1 = new LogProductDetail();
                log1.ContractCode = contract.ContractCode;
                log1.ProductCode = productCode;
                log1.ProductType = productType;
                log1.CreatedTime = DateTime.Now;
                log1.ImpQuantity = (double)impQuantity;
                log1.EstimateDate = estimate;

                listLog.Add(log1);
                json = JsonConvert.SerializeObject(listLog);
                contract.LogProductDetail = json;
                _context.PoSaleHeaders.Update(contract);
                _context.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw ex;
            }
        }
        public class PoSaleProductDetailModel
        {
            public int Id { get; set; }
            public string ProductCode { get; set; }
            public string ProductName { get; set; }
            public decimal Quantity { get; set; }
            public string Unit { get; set; }
            public decimal Cost { get; set; }
            public int? ContractHeaderID { get; set; }
            public string ContractCode { get; set; }
            public int? ContractVersion { get; set; }
            public string Note { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public double Tax { get; set; }
            public double Commission { get; set; }
            public double CustomFee { get; set; }
            public double Discount { get; set; }
            public string PriceType { get; set; }
            public string ProductType { get; set; }
            public string UserName { get; set; }
            public decimal QuantityNeedExport { get; set; }
        }
        [HttpPost]
        public async Task<object> InsertProductForContract(PoSaleProductDetailModel obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                using (await userLock.LockAsync(obj.ProductCode.ToLower()))
                {
                    var isLockDetail = IsLockDetail(obj.ContractCode);
                    if (isLockDetail == false)
                    {
                        var checkInReqImp = (from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted)
                                             join b in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                                             where b.PoCode.Equals(obj.ContractCode)
                                             select new
                                             {
                                                 a.ProductCode
                                             }).ToList();

                        if (checkInReqImp.Count > 0)
                        {
                            msg.Error = true;
                            msg.Title = "HTML_Contract_MSG_PO_NOT_ADD_EDIT_DELETE";
                            return Json(msg);
                        }


                        var data = _context.PoSaleProductDetails.FirstOrDefault(x => x.IsDeleted == false && x.ProductCode == obj.ProductCode && x.ContractCode == obj.ContractCode);
                        if (data == null)
                        {
                            PoSaleProductDetail detail = new PoSaleProductDetail();
                            detail.ContractCode = obj.ContractCode;
                            detail.ProductCode = obj.ProductCode;
                            detail.ProductName = obj.ProductName;
                            detail.CreatedBy = obj.UserName;
                            detail.CreatedTime = DateTime.Now;
                            detail.IsDeleted = false;
                            detail.Unit = obj.Unit;
                            detail.Tax = obj.Tax;
                            detail.Cost = obj.Cost;
                            detail.Quantity = obj.Quantity;
                            detail.QuantityNeedExport = obj.Quantity;
                            detail.PriceType = obj.PriceType;
                            detail.ProductType = obj.ProductType;
                            //detail.Commission = obj.Commission;
                            //detail.CustomFee = obj.CustomFee;
                            //detail.Discount = obj.Discount;
                            detail.Note = obj.Note;
                            _context.PoSaleProductDetails.Add(detail);
                            _context.SaveChanges();
                            msg.Error = false;
                            msg.Title = "Thêm thành công sản phẩm";

                            var contract = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode == obj.ContractCode);

                            if (contract != null)
                            {
                                string[] param = new string[] { "@ProductCode", "@Quantity", "@ProductType", "@ContractCode", "@EstimateDate" };
                                object[] val = new object[] { obj.ProductCode, obj.Quantity, obj.ProductType, obj.ContractCode, contract.EstimateTime.Value.Date };
                                _repositoryService.CallProc("PR_INSERT_PO_SALE_PRODUCT_DETAIL", param, val);

                                int? count = 0;
                                count = _context.ForecastProductInStocks.Where(x => x.ProductCode == obj.ProductCode && x.ProductType == obj.ProductType && x.ForecastDate.Value.Date == contract.EstimateTime.Value.Date).Sum(x => x.CntForecast);

                                int count1 = (count == null ? 0 : count.Value);
                                if (detail.Quantity + count1 > 0)
                                {
                                    var success = InsertChangeProductLog(contract, obj.ProductCode, obj.ProductType, count1, contract.EstimateTime.Value.Date);
                                }
                                else
                                {
                                    var success = InsertChangeProductLog(contract, obj.ProductCode, obj.ProductType, -1 * detail.Quantity, contract.EstimateTime.Value.Date);
                                }
                                if (count < 0)
                                {
                                    msg.Error = true;
                                    msg.ID = count1;
                                    msg.Title = "HTML_Contract_MSG_ADD_SUC_BUT_QUANTITY";
                                }
                                UpdateRequestImpDetail(obj.ContractCode);
                                var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                                if (contractHeader != null)
                                {
                                    //Sửa tổng giá trị hợp đồng
                                    contractHeader.Budget = contractHeader.Budget + (obj.Cost * obj.Quantity);
                                    contractHeader.RealBudget = contractHeader.RealBudget + (obj.Cost * obj.Quantity) * (1 + (decimal)obj.Tax / 100);
                                    contractHeader.LastBudget = contractHeader.RealBudget * (1 - contractHeader.Discount / 100 - contractHeader.Commission / 100);
                                    //Sửa trạng thái IsChangeProduct nếu hợp đồng đã được duyệt
                                    if (contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REQUEST" && contract.Status != "CONTRACT_STATUS_PO_CUS_FACCO_REJECTED" && contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REJECTED")
                                    {
                                        contract.IsChangeProduct = true;
                                    }
                                    _context.PoSaleHeaders.Update(contractHeader);
                                    msg.Object = new
                                    {
                                        contractHeader.Budget,
                                        contractHeader.RealBudget,
                                        TaxDetail = contractHeader.RealBudget - contractHeader.Budget,
                                        LastBudget = contractHeader.LastBudget
                                    };
                                    _context.SaveChanges();
                                    //Thêm vào Tracking
                                    InsertPOCusTracking(contractHeader);
                                }
                            }
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "HTML_Contract_MSG_PRODUCT_NOT_ADD";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }
        [HttpPost]
        public object UpdateProductInContract(PoSaleProductDetailModel obj)
        {
            JMessage msg = new JMessage() { Error = false };
            decimal oldQuantity = 0;
            try
            {
                var check = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                if (check != null)
                {
                    var isLockDetail = IsLockDetail(check.ContractCode);
                    if (isLockDetail == false)
                    {
                        var data = _context.PoSaleProductDetails.FirstOrDefault(x => x.IsDeleted == false && x.ProductCode == obj.ProductCode && x.ContractCode == obj.ContractCode);
                        if (data != null)
                        {
                            var checkInReqImp = (from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted)
                                                 join b in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                                                 where a.ProductCode.Equals(data.ProductCode) && a.ProductType.Equals(data.ProductType) && b.PoCode.Equals(data.ContractCode)
                                                 select new
                                                 {
                                                     a.ProductCode
                                                 }).ToList();

                            if (checkInReqImp.Count > 0)
                            {
                                msg.Error = true;
                                msg.Title = "HTML_Contract_MSG_PO_NOT_ADD_EDIT_DELETE";
                                return Json(msg);
                            }

                            var oldValue = data.Cost * data.Quantity;
                            var oldValueReal = data.Cost * data.Quantity * (1 + (decimal)data.Tax / 100);

                            oldQuantity = data.Quantity;
                            data.UpdatedBy = ESEIM.AppContext.UserName;
                            data.UpdatedTime = DateTime.Now;
                            data.Unit = obj.Unit;
                            data.Tax = obj.Tax;
                            data.Cost = obj.Cost;
                            data.Quantity = obj.Quantity;
                            data.QuantityNeedExport = obj.Quantity;
                            data.PriceType = obj.PriceType;
                            data.Note = obj.Note;
                            _context.PoSaleProductDetails.Update(data);
                            _context.SaveChanges();
                            msg.Error = false;
                            msg.Title = "Cập nhật thành công sản phẩm";

                            var contract = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode == obj.ContractCode);
                            if (contract != null && oldQuantity != obj.Quantity)
                            {
                                string[] param = new string[] { "@ProductCode", "@OldQuantity", "@NewQuantity", "@ProductType", "@EstimateDate" };
                                object[] val = new object[] { obj.ProductCode, oldQuantity, obj.Quantity, data.ProductType, contract.EstimateTime.Value.Date };
                                _repositoryService.CallProc("PR_UPDATE_CONTRACT_DETAIL", param, val);

                                //var success = InsertChangeProductLog(contract, obj.ProductCode, obj.ProductType, data.Quantity, contract.EstimateTime.Value.Date);
                                UpdateChangeProductLog(contract, obj.ProductCode, data.ProductType, oldQuantity, obj.Quantity, contract.EstimateTime.Value.Date);
                                int? count = 0;
                                var it = _context.ForecastProductInStocks.Where(x => x.ProductCode == obj.ProductCode && x.ProductType == data.ProductType && x.ForecastDate.Value.Date == contract.EstimateTime.Value.Date).ToList();

                                count = _context.ForecastProductInStocks.Where(x => x.ProductCode == obj.ProductCode && x.ProductType == data.ProductType && x.ForecastDate.Value.Date == contract.EstimateTime.Value.Date).Sum(x => x.CntForecast);

                                if (count < 0)
                                {
                                    msg.Error = true;
                                    msg.ID = count ?? 0;
                                    msg.Title = "HTML_Contract_MSG_UPDATE_SUC_BUT_QUANTITY";
                                }
                                UpdateRequestImpDetail(obj.ContractCode);
                            }
                            if (contract != null)
                            {
                                //Sửa tổng giá trị hợp đồng
                                contract.Budget = contract.Budget + (obj.Cost * obj.Quantity) - oldValue;
                                contract.RealBudget = contract.RealBudget + (obj.Cost * obj.Quantity) * (1 + (decimal)obj.Tax / 100) - oldValueReal;
                                contract.LastBudget = contract.RealBudget * (1 - contract.Discount / 100 - contract.Commission / 100);
                                //Sửa trạng thái IsChangeProduct nếu hợp đồng đã được duyệt
                                if (contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REQUEST" && contract.Status != "CONTRACT_STATUS_PO_CUS_FACCO_REJECTED" && contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REJECTED")
                                {
                                    contract.IsChangeProduct = true;
                                }
                                _context.PoSaleHeaders.Update(contract);
                                _context.SaveChanges();
                                msg.Object = new
                                {
                                    contract.Budget,
                                    contract.RealBudget,
                                    TaxDetail = contract.RealBudget - contract.Budget,
                                    contract.LastBudget,
                                };

                                //Thêm vào field log
                                InsertPOCusTracking(contract);
                            }
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "HTML_Contract_MSG_PRODUCT_UNDEFIND";
                        }
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_TICKET_ACCEPTED_NOTE_UPDATE";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_Contract_undefind";
                }


            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }
        [NonAction]
        public bool UpdateChangeProductLog(PoSaleHeader contract, string productCode, string productType, decimal oldQuantity, decimal newQuantity, DateTime estimate)
        {
            decimal impQuantity = oldQuantity - newQuantity;
            // impQuantity: Chêch lệch giữa 2 lần sửa đổi
            var listLog = new List<LogProductDetail>();
            var json = string.Empty;
            try
            {
                string log = contract.LogProductDetail;
                LogProductDetail item1 = null;
                if (!string.IsNullOrEmpty(log))
                {
                    listLog = JsonConvert.DeserializeObject<List<LogProductDetail>>(log);
                    foreach (var item in listLog)
                    {
                        if (item.ProductCode == productCode && item.ProductType == productType)
                        {
                            item1 = item;
                            listLog.Remove(item);
                            break;
                        }
                    }
                }
                if (item1 != null)
                {
                    item1.ImpQuantity = item1.ImpQuantity + (double)impQuantity;
                    listLog.Add(item1);
                }
                else
                {
                    LogProductDetail log1 = new LogProductDetail();
                    log1.ContractCode = contract.ContractCode;
                    log1.ProductCode = productCode;
                    log1.ProductType = productType;
                    log1.CreatedTime = DateTime.Now;
                    log1.ImpQuantity = (double)impQuantity;
                    log1.EstimateDate = estimate;
                    listLog.Add(log1);
                }

                json = JsonConvert.SerializeObject(listLog);
                contract.LogProductDetail = json;
                _context.PoSaleHeaders.Update(contract);
                _context.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw ex;
            }
        }
        [HttpPost]
        public object DeleteProductInContract(int Id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.PoSaleProductDetails.FirstOrDefault(x => x.IsDeleted == false && x.Id == Id);
                if (data != null)
                {
                    var checkInReqImp = (from a in _context.RequestImpProductDetails.Where(x => !x.IsDeleted)
                                         join b in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                                         where a.ProductCode.Equals(data.ProductCode) && a.ProductType.Equals(data.ProductType) && b.PoCode.Equals(data.ContractCode)
                                         select new
                                         {
                                             a.ProductCode
                                         }).ToList();

                    if (checkInReqImp.Count > 0)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_PRODUCT_NOT_ADD_EDIT_DELETE";
                        return Json(msg);
                    }

                    var isLockDetail = IsLockDetail(data.ContractCode);
                    if (isLockDetail == false)
                    {
                        data.IsDeleted = true;
                        data.DeletedBy = ESEIM.AppContext.UserName;
                        data.DeletedTime = DateTime.Now;
                        _context.PoSaleProductDetails.Update(data);
                        _context.SaveChanges();
                        msg.Title = "Xóa sản phẩm thành công";
                        var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == data.ContractCode);
                        if (contract != null)
                        {
                            string[] param = new string[] { "@ProductCode", "@OldQuantity", "@NewQuantity", "@ProductType", "@EstimateDate" };
                            object[] val = new object[] { data.ProductCode, data.Quantity, 0, data.ProductType, contract.EstimateTime.Value.Date };
                            _repositoryService.CallProc("PR_UPDATE_CONTRACT_DETAIL", param, val);
                            DeleteItemProductLog(contract, data.ProductCode, data.ProductType);
                            UpdateRequestImpDetail(data.ContractCode);

                            //Sửa tổng giá trị hợp đồng
                            contract.Budget = contract.Budget - (data.Cost * data.Quantity);
                            contract.RealBudget = contract.RealBudget - (data.Cost * data.Quantity) * (1 + (decimal)data.Tax / 100);
                            contract.LastBudget = contract.RealBudget * (1 - contract.Discount / 100 - contract.Commission / 100);
                            //Sửa trạng thái IsChangeProduct nếu hợp đồng đã được duyệt
                            if (contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REQUEST" && contract.Status != "CONTRACT_STATUS_PO_CUS_FACCO_REJECTED" && contract.Status != "CONTRACT_STATUS_PO_CUS_CUS_REJECTED")
                            {
                                contract.IsChangeProduct = true;
                            }
                            _context.PoSaleHeaders.Update(contract);
                            _context.SaveChanges();
                            msg.Object = new
                            {
                                contract.Budget,
                                contract.RealBudget,
                                TaxDetail = contract.RealBudget - contract.Budget,
                                contract.LastBudget,
                            };

                            //Thêm vào field log
                            InsertPOCusTracking(contract);
                        }
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_PRODUCT_ACCEPTED_NOT_ADD_EDIT_DELETE";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_PRODUCT_UNDEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }
        [NonAction]
        public bool DeleteItemProductLog(PoSaleHeader contract, string productCode, string productType)
        {
            var listLog = new List<LogProductDetail>();
            var json = string.Empty;
            try
            {
                string log = contract.LogProductDetail;
                if (!string.IsNullOrEmpty(log))
                {
                    listLog = JsonConvert.DeserializeObject<List<LogProductDetail>>(log);
                    foreach (var item in listLog)
                    {
                        if (item.ProductCode == productCode && item.ProductType == productType)
                        {
                            listLog.Remove(item);
                            break;
                        }
                    }
                }
                json = JsonConvert.SerializeObject(listLog);
                contract.LogProductDetail = json;
                _context.PoSaleHeaders.Update(contract);
                _context.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw ex;
            }
        }

        //tab service
        [HttpPost]
        public JsonResult GetService()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var list = (from a in _context.ServiceCategorys
                            where a.IsDeleted == false
                            && a.ServiceCode != "DV_000"
                            select new
                            {
                                Code = a.ServiceCode,
                                Name = a.ServiceName,
                                Unit = a.Unit,
                                Type = a.ServiceType,
                                ServiceGroup = a.ServiceGroup,

                            }).ToList();
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetServiceCondition()
        {
            JMessage msg = new JMessage { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == "SERVICE_CONDITION").Select(x => new { Code = x.CodeSet, Name = x.ValueSet, Priority = x.Priority });
            msg.Object = data;
            return Json(msg);
        }
        [NonAction]
        public IEnumerable<GetCostModel> GetServiceConditionPrice()
        {
            DateTime now = DateTime.Now;
            var query = from a in _context.ServiceCategoryCostHeaders.Where(x => x.IsDeleted == false)
                        join b in _context.ServiceCategoryCostConditions.Where(x => x.IsDeleted == false) on a.HeaderCode equals b.HeaderCode
                        join c in _context.CommonSettings on b.ObjectCode equals c.CodeSet into c2
                        from c in c2.DefaultIfEmpty()
                        where (a.EffectiveDate != null && a.EffectiveDate.Date <= now.Date)
                        && (a.ExpiryDate == null || (a.ExpiryDate != null && now.Date < a.ExpiryDate.Date))
                        && c.Group == "SERVICE_CONDITION"
                        select new GetCostModel
                        {
                            ServiceCode = b.ServiceCatCode,
                            Condition = b.ObjectCode,
                            Price = b.Price,
                            ConditionName = (c != null ? c.ValueSet : ""),
                            ConditionRange = (b.ObjFromValue + " -> " + b.ObjToValue)
                        };
            return query;
        }
        [HttpPost]
        public JsonResult GetCostByServiceAndCondition()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var query1 = GetServiceConditionPrice();
                var lisst = query1.ToList();
                if (query1 != null)
                {
                    var query = from a in _context.ServiceCategorys.Where(x => x.IsDeleted == false)
                                join b in lisst on a.ServiceCode equals b.ServiceCode into b2
                                from b1 in b2.DefaultIfEmpty()
                                select new GetCostModel
                                {
                                    ServiceCode = a.ServiceCode,
                                    Condition = (b1 != null ? b1.Condition : ""),
                                    Price = (b1 != null ? b1.Price : -1),
                                    ConditionName = (b1 != null ? b1.ConditionName : "Không xác định"),
                                    ConditionRange = (b1 != null ? b1.ConditionRange : "Không xác định")
                                };
                    msg.Object = query;
                    return Json(msg);
                }
                else
                {
                    var query = from a in _context.ServiceCategorys.Where(x => x.IsDeleted == false)
                                select new GetCostModel
                                {
                                    ServiceCode = a.ServiceCode,
                                    Condition = "",
                                    Price = -999,
                                    ConditionName = "Không xác định",
                                    ConditionRange = "Không xác định"
                                };

                    msg.Object = query;
                    return Json(msg);
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        [HttpPost]
        public JsonResult GetListServiceUnitForContract()
        {
            var msg = new JMessage() { Error = false };
            var list = (from a in _context.CommonSettings
                        where a.IsDeleted == false
                        && a.Group == EnumHelper<ServiceEnum>.GetDisplayValue(ServiceEnum.ServiceUnit)
                        select new
                        {
                            Code = a.CodeSet,
                            Name = a.ValueSet
                        });
            msg.Object = list;
            return Json(msg);
        }

        public class ContractServiceDetailModel
        {
            public int Id { get; set; }
            public string ServiceCode { get; set; }
            public string ServiceName { get; set; }
            public decimal Quantity { get; set; }
            public string Unit { get; set; }
            public decimal Cost { get; set; }
            public string ContractCode { get; set; }
            public int? ContractVersion { get; set; }
            public string Note { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public double Tax { get; set; }
            public double Commission { get; set; }
            public double CustomFee { get; set; }
            public double Discount { get; set; }
            public string Currency { get; set; }
            public string UserName { get; set; }
        }
        [HttpPost]
        public object InsertServiceForContract(ContractServiceDetailModel obj)
        {
            JMessage msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ContractServiceDetails.FirstOrDefault(x => x.IsDeleted == false && x.ServiceCode == obj.ServiceCode && x.ContractCode == obj.ContractCode);
                if (data == null)
                {
                    var service = _context.ServiceCategorys.FirstOrDefault(x => x.IsDeleted == false && x.ServiceCode == obj.ServiceCode);
                    ContractServiceDetail detail = new ContractServiceDetail();
                    detail.ContractCode = obj.ContractCode;
                    detail.ServiceCode = obj.ServiceCode;
                    detail.ServiceName = obj.ServiceName;
                    detail.CreatedBy = obj.UserName;
                    detail.CreatedTime = DateTime.Now;
                    detail.IsDeleted = false;
                    detail.Unit = obj.Unit;
                    detail.Tax = obj.Tax;
                    detail.Cost = obj.Cost;
                    detail.Quantity = obj.Quantity;
                    detail.Note = obj.Note;


                    var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                    if (contractHeader != null)
                    {
                        //Sửa tổng giá trị hợp đồng
                        contractHeader.Budget = contractHeader.Budget + (obj.Cost * obj.Quantity);
                        contractHeader.RealBudget = contractHeader.RealBudget + (obj.Cost * obj.Quantity) * (1 + (decimal)obj.Tax / 100);
                        contractHeader.LastBudget = contractHeader.RealBudget * (1 - contractHeader.Discount / 100 - contractHeader.Commission / 100);
                        _context.PoSaleHeaders.Update(contractHeader);
                        msg.Object = new
                        {
                            contractHeader.Budget,
                            contractHeader.RealBudget,
                            TaxDetail = contractHeader.RealBudget - contractHeader.Budget,
                            contractHeader.LastBudget
                        };

                        //Thêm fiel đồng tiền thanh toán của detail
                        detail.Currency = contractHeader.Currency;
                    }

                    _context.ContractServiceDetails.Add(detail);

                    _context.SaveChanges();
                    msg.Title = "Thêm thành công dịch vụ";

                    if (contractHeader != null)
                    {
                        //Thêm vào Tracking - Thêm sau khi DB đã được lưu
                        InsertPOCusTracking(contractHeader);
                    }

                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_SERVICE_DEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }
        [HttpPost]
        public object UpdateServiceForContract(ContractServiceDetailModel obj)
        {
            JMessage msg = new JMessage { Error = false, Title = "" };
            try
            {
                var currenrt = _context.ContractServiceDetails.FirstOrDefault(x => x.IsDeleted == false && x.Id == obj.Id);
                var data = _context.ContractServiceDetails.FirstOrDefault(x => x.IsDeleted == false && x.ServiceCode == obj.ServiceCode && x.ContractCode == obj.ContractCode);
                if (currenrt != null)
                {
                    if (data == null || data != null && data.Id == currenrt.Id)
                    {
                        var oldValue = currenrt.Cost * currenrt.Quantity;
                        var oldValueReal = currenrt.Cost * currenrt.Quantity * (1 + (decimal)currenrt.Tax / 100);

                        currenrt.ContractCode = obj.ContractCode;
                        currenrt.ServiceCode = obj.ServiceCode;
                        currenrt.Quantity = obj.Quantity;
                        currenrt.Note = obj.Note;
                        currenrt.Cost = obj.Cost;
                        currenrt.Tax = obj.Tax;
                        currenrt.Unit = obj.Unit;
                        currenrt.Currency = obj.Currency;
                        currenrt.UpdatedBy = obj.UserName;
                        currenrt.UpdatedTime = DateTime.Now;

                        var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                        if (contractHeader != null)
                        {
                            //Sửa tổng giá trị hợp đồng
                            contractHeader.Budget = contractHeader.Budget + (obj.Cost * obj.Quantity) - oldValue;
                            contractHeader.RealBudget = contractHeader.RealBudget + (obj.Cost * obj.Quantity) * (1 + (decimal)obj.Tax / 100) - oldValueReal;
                            contractHeader.LastBudget = contractHeader.RealBudget * (1 - contractHeader.Discount / 100 - contractHeader.Commission / 100);
                            _context.PoSaleHeaders.Update(contractHeader);
                            msg.Object = new
                            {
                                contractHeader.Budget,
                                contractHeader.RealBudget,
                                TaxDetail = contractHeader.RealBudget - contractHeader.Budget,
                                contractHeader.LastBudget
                            };

                            //Thêm fiel đồng tiền thanh toán của detail
                            currenrt.Currency = contractHeader.Currency;
                        }

                        _context.ContractServiceDetails.Update(currenrt);

                        _context.SaveChanges();
                        msg.Title = "Cập nhật thành công dịch vụ";

                        if (contractHeader != null)
                        {
                            //Thêm vào Tracking - Thêm sau khi DB được lưu
                            InsertPOCusTracking(contractHeader);
                        }
                    }
                    else if (data != null && data.Id != currenrt.Id)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_SERVICE_HAVE_CONTRACT";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_SERVICE_UNDEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTableServiceForContract(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.PoSaleHeaders
                        join b in _context.ContractServiceDetails on a.ContractCode equals b.ContractCode
                        join c in _context.ServiceCategorys on b.ServiceCode equals c.ServiceCode into c2
                        from c in c2.DefaultIfEmpty()
                        where a.IsDeleted == false && b.IsDeleted == false &&
                              a.ContractCode == ContractCode
                        select new
                        {
                            b.Id,
                            b.ServiceCode,
                            ServiceName = (c != null ? c.ServiceName : ""),
                            b.Quantity,
                            Unit = b.Unit,
                            b.Cost,
                            b.Currency,
                            UnitName = _context.CommonSettings.FirstOrDefault(vv => vv.CodeSet == b.Unit).ValueSet,
                            b.Tax,
                            b.Note
                        };
            msg.Object = query;
            return Json(msg);
        }

        [HttpPost]
        public object DeleteServiceDetail(int Id, string user)
        {
            JMessage msg = new JMessage();
            try
            {
                var data = _context.ContractServiceDetails.FirstOrDefault(x => x.IsDeleted == false && x.Id == Id);
                if (data != null)
                {
                    data.IsDeleted = true;
                    data.DeletedBy = user;
                    data.DeletedTime = DateTime.Now;
                    _context.ContractServiceDetails.Update(data);

                    var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(data.ContractCode));
                    if (contractHeader != null)
                    {
                        //Sửa tổng giá trị hợp đồng
                        contractHeader.Budget = contractHeader.Budget - (data.Cost * data.Quantity);
                        contractHeader.RealBudget = contractHeader.RealBudget - (data.Cost * data.Quantity) * (1 + (decimal)data.Tax / 100);
                        contractHeader.LastBudget = contractHeader.RealBudget * (1 - contractHeader.Discount / 100 - contractHeader.Commission / 100);
                        _context.PoSaleHeaders.Update(contractHeader);
                        msg.Object = new
                        {
                            contractHeader.Budget,
                            contractHeader.RealBudget,
                            TaxDetail = contractHeader.RealBudget - contractHeader.Budget,
                            contractHeader.LastBudget
                        };
                    }

                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Xóa thành công dịch vụ";

                    if (contractHeader != null)
                    {
                        //Thêm vào Tracking - Thêm sau khi DB được lưu
                        InsertPOCusTracking(contractHeader);
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_SERVICE_UNDEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }

        //File
        [HttpPost]
        public JsonResult GetTableFileForContract(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == ContractCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract))
                          join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                          join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                          from f in f1.DefaultIfEmpty()
                          select new
                          {
                              a.Id,
                              b.FileCode,
                              b.FileName,
                              b.FileTypePhysic,
                              b.Desc,
                              CreatedTime = b.CreatedTime.Value.ToString("dd/MM/yyyy"),
                              b.CloudFileId,
                              TypeFile = "NO_SHARE",
                              ReposName = f != null ? f.ReposName : "",
                              b.FileID,
                              SizeOfFile = b.FileSize.HasValue ? b.FileSize.Value : 0,
                          }).Union(
                     from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == ContractCode && x.ObjectType == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract))
                     join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                     join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                     from f in f1.DefaultIfEmpty()
                     select new
                     {
                         Id = b.FileID,
                         b.FileCode,
                         b.FileName,
                         b.FileTypePhysic,
                         Desc = b.Desc != null ? b.Desc : "",
                         CreatedTime = b.CreatedTime.Value.ToString("dd/MM/yyyy"),
                         b.CloudFileId,
                         TypeFile = "SHARE",
                         ReposName = f != null ? f.ReposName : "",
                         b.FileID,
                         SizeOfFile = b.FileSize.HasValue ? b.FileSize.Value : 0,
                     })).AsNoTracking();
            msg.Object = query;
            return Json(msg);
        }

        // tab note
        public class ContractTabNoteModel
        {
            public int? Id { get; set; }
            public string ContractCode { get; set; }
            public string Title { get; set; }
            public string Note { get; set; }
            public string UserName { get; set; }
        }

        [HttpPost]
        public JsonResult InsertContractTabNote(ContractTabNoteModel obj)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var contract = _context.ContactNotes.FirstOrDefault(x => x.ContractCode == obj.ContractCode);
                var data = new ContactNote()
                {
                    ContractCode = contract.ContractCode,
                    Title = obj.Title,
                    Note = obj.Note,
                    ContractVersion = contract.ContractVersion,
                    CreatedBy = obj.UserName,
                    CreatedTime = DateTime.Now
                };
                _context.ContactNotes.Add(data);
                _context.SaveChanges();
                msg.Title = "Thêm mới ghi chú thành công";
                var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                if (contractHeader != null)
                    InsertPOCusTracking(contractHeader);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetTableNoteForContract(ContractTabNoteModel obj)
        {
            var msg = new JMessage() { Error = false };
            var data = _context.ContactNotes.Where(x => x.ContractCode == obj.ContractCode
                    && (string.IsNullOrEmpty(obj.Title) || x.Title.ToLower().Contains(obj.Title.ToLower()))
                    && (string.IsNullOrEmpty(obj.Note) || x.Note.ToLower().Contains(obj.Note.ToLower()))).Select(x => new
                    {
                        Id = x.ContractNoteId,
                        x.Title,
                        x.Note,
                        Name = _context.Users.FirstOrDefault(a => a.UserName == x.CreatedBy).GivenName,
                        x.CreatedBy,
                        CreatedTime = x.CreatedTime != null ? x.CreatedTime.Value.ToString("dd/MM/yyyy HH:mm") : ""
                    });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateContractTabNote(ContractTabNoteModel obj)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var data = _context.ContactNotes.FirstOrDefault(x => x.ContractNoteId == obj.Id);
                data.Title = obj.Title;
                data.Note = obj.Note;
                _context.ContactNotes.Update(data);
                _context.SaveChanges();
                msg.Title = "Cập nhật thành công";
                var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                if (contractHeader != null)
                    InsertPOCusTracking(contractHeader);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteNoteForContract(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ContactNotes.FirstOrDefault(x => x.ContractNoteId == id);
                data.IsDeleted = true;
                _context.ContactNotes.Update(data);
                _context.SaveChanges();
                msg.Error = false;
                msg.Title = "Xóa thành công";
                var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(data.ContractCode));
                if (contractHeader != null)
                    InsertPOCusTracking(contractHeader);
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        //tab project
        [HttpPost]
        public JsonResult GetProjectForContract()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.Projects.Where(x => !x.FlagDeleted).OrderByDescending(x => x.Id).Select(x => new { Code = x.ProjectCode, Name = x.ProjectTitle });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertProjectForContract(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.ObjRootCode == obj.ObjRootCode && x.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale) && x.ObjCode == obj.ObjCode);
                if (checkExist == null)
                {
                    var data = new MappingMain()
                    {
                        ObjType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project),
                        ObjRootType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale),
                        CreatedBy = obj.CreatedBy,
                        CreatedTime = DateTime.Now,
                        ObjCode = obj.ObjCode,
                        ObjRelative = obj.ObjRelative,
                        ObjNote = obj.ObjNote,
                        ObjRootCode = obj.ObjRootCode,
                    };
                    _context.MappingMains.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Lưu thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_PROJECT_DEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateProjectForContract(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.Id == obj.Id);
                if (checkExist != null)
                {
                    checkExist.ObjRelative = obj.ObjRelative;
                    checkExist.ObjNote = obj.ObjNote;
                    checkExist.UpdatedBy = obj.UpdatedBy;
                    checkExist.UpdatedTime = DateTime.Now;
                    _context.MappingMains.Update(checkExist);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteProject(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.MappingMains.FirstOrDefault(x => x.Id == id);
                if (data != null)
                {
                    _context.MappingMains.Remove(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_Contract_MSG_ERR";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTableProjectForContract(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = (from a in _context.MappingMains
                         join b in _context.Projects on a.ObjCode equals b.ProjectCode
                         where a.ObjRootCode == ContractCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project)
                         select new
                         {
                             a.Id,
                             a.ObjCode,
                             b.ProjectTitle,
                             b.Budget,
                             Currency = _context.CommonSettings.FirstOrDefault(y => !y.IsDeleted && y.CodeSet == b.Currency).ValueSet ?? "",
                             StartTime = b.StartTime != null ? b.StartTime.ToString("dd/MM/yyyy") : "",
                             EndTime = b.EndTime != null ? b.EndTime.ToString("dd/MM/yyyy") : "",
                             a.ObjRelative,
                             a.ObjNote
                         }).Union(
                 from a in _context.MappingMains.Where(x => x.ObjRootType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project))
                 join b in _context.Projects on a.ObjRootCode equals b.ProjectCode
                 where a.ObjCode == ContractCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale)
                 select new
                 {
                     a.Id,
                     a.ObjCode,
                     b.ProjectTitle,
                     b.Budget,
                     Currency = _context.CommonSettings.FirstOrDefault(y => !y.IsDeleted && y.CodeSet == b.Currency).ValueSet ?? "",
                     StartTime = b.StartTime != null ? b.StartTime.ToString("dd/MM/yyyy") : "",
                     EndTime = b.EndTime != null ? b.EndTime.ToString("dd/MM/yyyy") : "",
                     a.ObjRelative,
                     a.ObjNote
                 });
            msg.Object = query;
            return Json(msg);
        }

        //tab Related
        [HttpPost]
        public JsonResult GetListContractMemberTable(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.ContractMemberTags
                        where a.ContractCode.Equals(ContractCode) && a.IsDeleted == false
                        select new
                        {
                            id = a.Id,
                            assigner = a.Assigner,
                            time = a.AssignerTime != null ? a.AssignerTime.Value.ToString("dd/MM/yyyy") : "",
                            assignee = a.Assignee,
                            task = a.TaskCode,
                        };
            return Json(msg);
        }
        //tab card job
        [HttpPost]
        public JsonResult GetTableCarJobForContract(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.CardMappings
                        join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                        where b.IsDeleted == false && a.ContractCode.Equals(ContractCode)
                        select b;
            int count = query.Count();
            var data = query.Select(x => new
            {
                x.CardID,
                x.CardCode,
                x.CardName,
                BeginTime = x.BeginTime != null ? x.BeginTime.ToString("dd/MM/yyyy") : "",
                EndTime = x.EndTime != null ? x.EndTime.Value.ToString("dd/MM/yyyy") : "",
                Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Status).ValueSet ?? "",
                x.Completed,
                x.Cost,
                x.LocationText,
                Quantitative = string.Concat(x.Quantitative, _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Unit).ValueSet ?? ""),
                ListName = _context.WORKOSLists.FirstOrDefault(y => y.ListCode == x.ListCode && y.IsDeleted == false).ListName ?? "",
                BoardName = _context.WORKOSBoards.FirstOrDefault(y => y.BoardCode == (_context.WORKOSLists.FirstOrDefault(z => z.ListCode == x.ListCode && z.IsDeleted == false).BoardCode ?? "")).BoardName ?? ""
            }).AsNoTracking();
            msg.Object = data;
            return Json(msg);
        }
        //tab Related
        [HttpPost]
        public JsonResult GetListContractOrther(string contractCode)
        {
            var msg = new JMessage() { Error = false };
            var data = _context.PoSaleHeaders.Where(x => x.ContractCode != contractCode && x.IsDeleted == false).Select(x => new
            {
                Code = x.ContractCode,
                Name = x.Title,
            });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListRelative()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.ContractRelative)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertRelativeForContract(RelativeModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == obj.ContractCode && x.IsDeleted == false);
                if (contract != null)
                {
                    obj.ContractRelative = new ContractRelativeModel();
                    obj.ContractRelative.CreatedBy = obj.User;
                    obj.ContractRelative.CreatedTime = DateTime.Now;
                    obj.ContractRelative.Relative = obj.Relative;
                    obj.ContractRelative.ContractCode = obj.ContractOrther;
                    var listContractRelative = !string.IsNullOrEmpty(contract.ContractRelative) ? JsonConvert.DeserializeObject<List<ContractRelativeModel>>(contract.ContractRelative) : new List<ContractRelativeModel>();
                    obj.ContractRelative.Id = listContractRelative.Any() ? listContractRelative.Max(x => x.Id) + 1 : 1;
                    var checkExistRelative = listContractRelative.FirstOrDefault(x => x.ContractCode == obj.ContractRelative.ContractCode);
                    if (checkExistRelative == null)
                    {
                        listContractRelative.Add(obj.ContractRelative);
                        contract.ContractRelative = JsonConvert.SerializeObject(listContractRelative);
                        _context.PoSaleHeaders.Update(contract);
                        _context.SaveChanges();
                        msg.Title = "Thêm mới thành công";

                        //Update fiel log
                        InsertPOCusTracking(contract);
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_Data_UNDEFIND!";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_Contract_MSG_ERR";
            };
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateRelativeForContract(RelativeModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == obj.ContractCode && x.IsDeleted == false);
                if (contract != null)
                {
                    obj.ContractRelative = new ContractRelativeModel();
                    obj.ContractRelative.Relative = obj.Relative;
                    obj.ContractRelative.Id = obj.Id;
                    obj.ContractRelative.ContractCode = obj.ContractOrther;
                    var listContractRelative = !string.IsNullOrEmpty(contract.ContractRelative) ? JsonConvert.DeserializeObject<List<ContractRelativeModel>>(contract.ContractRelative) : new List<ContractRelativeModel>();
                    var relative = listContractRelative.FirstOrDefault(x => x.Id == obj.ContractRelative.Id);
                    if (relative != null)
                    {
                        var checkExist = listContractRelative.FirstOrDefault(x => x.ContractCode == obj.ContractRelative.ContractCode && x.Id != obj.ContractRelative.Id);
                        if (checkExist == null)
                        {
                            relative.ContractCode = obj.ContractRelative.ContractCode;
                            relative.Relative = obj.ContractRelative.Relative;
                            contract.ContractRelative = JsonConvert.SerializeObject(listContractRelative);
                            _context.PoSaleHeaders.Update(contract);
                            _context.SaveChanges();
                            msg.Title = "Cập nhật thành công";

                            //Update fiel log
                            InsertPOCusTracking(contract);
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                        }
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_Contract_MSG_ERR";
            };
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteRelativeForContract(int id, string contractCode)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == contractCode && x.IsDeleted == false);
                if (contract != null)
                {
                    var listContractRelative = !string.IsNullOrEmpty(contract.ContractRelative) ? JsonConvert.DeserializeObject<List<ContractRelativeModel>>(contract.ContractRelative) : new List<ContractRelativeModel>();
                    var relative = listContractRelative.FirstOrDefault(x => x.Id == id);
                    if (relative != null)
                    {
                        listContractRelative.Remove(relative);
                        contract.ContractRelative = JsonConvert.SerializeObject(listContractRelative);
                        _context.PoSaleHeaders.Update(contract);
                        _context.SaveChanges();
                        msg.Title = "Xóa thành công";

                        //Update fiel log
                        InsertPOCusTracking(contract);
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                    }
                    _context.SaveChanges();
                    msg.Title = "Thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTableContractRelated(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var contract = _context.PoSaleHeaders.FirstOrDefault(x => x.ContractCode == ContractCode);

            var listContractRelative = !string.IsNullOrEmpty(contract.ContractRelative) ? JsonConvert.DeserializeObject<List<ContractRelativeModel>>(contract.ContractRelative) : new List<ContractRelativeModel>();
            var query = (from a in listContractRelative
                         join b in _context.PoSaleHeaders on a.ContractCode equals b.ContractCode
                         select new
                         {
                             a.Id,
                             a.ContractCode,
                             b.Title,
                             a.CreatedBy,
                             CreatedTime = a.CreatedTime != null ? a.CreatedTime.ToString("dd/MM/yyyy") : "",
                             a.Relative,
                             RelativeText = _context.CommonSettings.FirstOrDefault(x => x.CodeSet == a.Relative).ValueSet ?? "",
                         }).AsQueryable();
            msg.Object = query;
            return Json(msg);
        }

        ///tab TabSchedulePay
        ///
        public class ContractSchedulePayModel
        {
            public int Id { get; set; }
            public string ContractCode { get; set; }
            public int PayTimes { get; set; }
            public int? Percentage { get; set; }
            public double? Money { get; set; }
            public string sEstimateTime { get; set; }
            public DateTime? EstimateTime { get; set; }
            public string Note { get; set; }
            public string Condition { get; set; }
            public double? Quantity { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public int ContractVersion { get; set; }
        }
        public JsonResult InsertContractSchedulePay(ContractSchedulePayModel obj)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var checkExist = _context.ContractSchedulePays.FirstOrDefault(x => x.PayTimes == obj.PayTimes && x.ContractCode == obj.ContractCode && !x.IsDeleted);
                if (checkExist != null)
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_NUM_PAY_HAVE";
                }
                else
                {
                    var date = !string.IsNullOrEmpty(obj.sEstimateTime) ? DateTime.ParseExact(obj.sEstimateTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                    var data = new ContractSchedulePay()
                    {
                        ContractCode = obj.ContractCode,
                        PayTimes = obj.PayTimes,
                        Percentage = obj.Percentage,
                        Money = obj.Money,
                        EstimateTime = date,
                        Condition = obj.Condition,
                        Quantity = obj.Quantity,
                        Note = obj.Note,
                    };
                    data.CreatedBy = obj.CreatedBy;
                    data.CreatedTime = DateTime.Now;
                    _context.ContractSchedulePays.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Thêm lịch thanh toán thành công";

                    var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                    if (contractHeader != null)
                        InsertPOCusTracking(contractHeader);
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateContractSchedulePay(ContractSchedulePayModel obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.ContractSchedulePays.FirstOrDefault(x => x.Id == obj.Id);
                if (data != null)
                {
                    obj.EstimateTime = !string.IsNullOrEmpty(obj.sEstimateTime) ? DateTime.ParseExact(obj.sEstimateTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                    data.Percentage = obj.Percentage;
                    data.Money = obj.Money;
                    data.EstimateTime = obj.EstimateTime;
                    data.Condition = obj.Condition;
                    data.Quantity = obj.Quantity;
                    data.Note = obj.Note;

                    data.UpdatedBy = obj.UpdatedBy;
                    data.UpdatedTime = DateTime.Now;
                    _context.ContractSchedulePays.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";

                    var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(obj.ContractCode));
                    if (contractHeader != null)
                        InsertPOCusTracking(contractHeader);
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_Contract_MSG_Data_UNDEFIND";
                }
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
                return Json(msg);
            }
        }

        [HttpPost]
        public JsonResult DeleteContractSchedulePay(int id, string user)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var data = _context.ContractSchedulePays.FirstOrDefault(x => x.Id == id);
                data.DeletedBy = user;
                data.DeletedTime = DateTime.Now;
                data.IsDeleted = true;
                _context.ContractSchedulePays.Update(data);
                _context.SaveChanges();
                msg.Title = "Xóa thành công";

                var contractHeader = _context.PoSaleHeaders.FirstOrDefault(x => !x.IsDeleted && x.ContractCode.Equals(data.ContractCode));
                if (contractHeader != null)
                    InsertPOCusTracking(contractHeader);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTableSchedulePay(string ContractCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.ContractSchedulePays.Where(x => !x.IsDeleted && x.ContractCode == ContractCode)
                        select new
                        {
                            Id = a.Id,
                            PayTimes = a.PayTimes,
                            Percentage = a.Percentage,
                            Money = a.Money,
                            EstimateTime = a.EstimateTime,
                            Note = a.Note,
                            Condition = a.Condition,
                            Quantity = a.Quantity,
                            Time = a.EstimateTime != null ? a.EstimateTime.Value.ToString("dd/MM/yyyy") : ""
                        };

            msg.Object = query;
            return Json(msg);
        }
        #endregion

        #region contract po
        [HttpPost]
        public object GetCustomersForPO()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = (from a in _context.Customerss.Where(x => x.IsDeleted == false)
                            select new
                            {
                                Id = a.CusID,
                                Code = a.CusCode,
                                Name = a.CusCode + " - " + a.CusName,
                                Address = a.Address,
                                ZipCode = a.ZipCode,
                                MobilePhone = a.MobilePhone,
                                PersonInCharge = a.PersonInCharge,
                                Email = a.Email
                            }).OrderByDescending(x => x.Id).AsNoTracking();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetListContractProjectReq()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var listContractCode = _context.RequestImpProductHeaders.Where(x => !x.IsDeleted).Select(x => x.PoCode).ToList();
                var listProjectCode = _context.RequestImpProductHeaders.Where(x => !x.IsDeleted && string.IsNullOrEmpty(x.PoCode)).Select(x => x.ProjectCode).ToList();

                var data = (from a in _context.PoSaleHeaders.Where(x => !x.IsDeleted)
                            where listContractCode.Any(x => x == a.ContractCode)
                            orderby a.ContractHeaderID descending
                            select new { Code = a.ContractCode, Name = a.ContractCode + " - " + a.Title, Type = "CONTRACT", NameType = "HĐ" })
                            .Concat(from a in _context.Projects.Where(x => !x.FlagDeleted)
                                    where listProjectCode.Any(x => x == a.ProjectCode)
                                    orderby a.Id descending
                                    select new { Code = a.ProjectCode, Name = a.ProjectCode + " - " + a.ProjectTitle, Type = "PROJECT", NameType = "DA" });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetListSupCodeForPO(string Code, string Type)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                if (Type == "CONTRACT")
                {
                    var data = (from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted && x.PoCode == Code)
                                join b in _context.RequestImpProductDetails.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                                join c in _context.Suppliers.Where(x => !x.IsDeleted) on b.SupCode equals c.SupCode
                                select new { Code = b.SupCode, Name = b.SupCode + " - " + c.SupName });
                    msg.Object = data;
                }
                else
                {
                    var data = (from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted && string.IsNullOrEmpty(x.PoCode) && x.ProjectCode == Code)
                                join b in _context.RequestImpProductDetails.Where(x => !x.IsDeleted) on a.ReqCode equals b.ReqCode
                                join c in _context.Suppliers.Where(x => !x.IsDeleted) on b.SupCode equals c.SupCode
                                select new { Code = b.SupCode, Name = b.SupCode + " - " + c.SupName });
                    msg.Object = data;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetSuppliersForPO()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = (from a in _context.Suppliers.Where(x => x.IsDeleted == false)
                            select new
                            {
                                Id = a.SupID,
                                Code = a.SupCode,
                                Name = a.SupName,
                                Group = a.SupGroup,
                                Address = a.Address,
                                MobilePhone = a.Mobile,
                                Email = a.Email,
                                ListExtend = _context.SupplierExtends.Where(x => x.isdeleted == false && (x.ext_code.ToLower() == "zip_code" || x.ext_code.ToLower() == "person_in_charge") && x.supplier_code == a.SupID).ToList()
                            }).OrderByDescending(x => x.Id).AsNoTracking();
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GenPoSupCode(string supCode)
        {

            var monthNow = DateTime.Now.Month;
            var yearNow = DateTime.Now.Year;
            var poSupCode = string.Empty;
            var no = 1;
            var noText = "01";

            if (!string.IsNullOrEmpty(supCode))
            {
                var data = _context.PoBuyerHeaders.Where(x => x.CreatedTime.Value.Year == yearNow && x.CreatedTime.Value.Month == monthNow).ToList();
                if (data.Count > 0)
                {
                    no = data.Count + 1;
                    if (no < 10)
                    {
                        noText = "0" + no;
                    }
                    else
                    {
                        noText = no.ToString();
                    }
                }

                poSupCode = string.Format("{0}{1}{2}{3}{4}", "PO_", "T" + monthNow + ".", yearNow + "_", noText, "_" + supCode);
            }

            return Json(poSupCode);
        }

        [HttpPost]
        public object GetStatusForPOSup()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.ContractStatusPoSup)).OrderBy(x => x.SettingID).Select(x => new { Code = x.CodeSet, Name = x.ValueSet, Icon = x.Logo });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        public class PoBuyerHeaderModel
        {
            public int Id { get; set; }
            public string BuyerCode { get; set; }
            public string SupCode { get; set; }
            public string PoTitle { get; set; }
            public string PoSupCode { get; set; }
            public DateTime? DateOfOrder { get; set; }
            public string sDateOfOrder { get; set; }
            public string OrderBy { get; set; }
            public string Email { get; set; }
            public string PaymentTerm { get; set; }
            public string ShippingAdd { get; set; }
            public string Consigner { get; set; }
            public string Mobile { get; set; }
            public string Buyer { get; set; }
            public string Noted { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string ApprovedBy { get; set; }
            public DateTime? ApprovedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public string Confirm { get; set; }
            public string Status { get; set; }
            public string Type { get; set; }
            public string sEstimateTime { get; set; }
            public DateTime? EstimateTime { get; set; }
            public string Currency { get; set; }
            public decimal? ExchangeRate { get; set; }
            public string ContractCode { get; set; }
            public string ProjectCode { get; set; }
            public string ListUserView { get; set; }
            public string UserID { get; set; }

        }

        [HttpPost]
        public JsonResult InsertPO(PoBuyerHeaderModel obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                using (userLock.LockAsync(obj.PoSupCode.ToLower()))
                {
                    DateTime? date = !string.IsNullOrEmpty(obj.sDateOfOrder) ? DateTime.ParseExact(obj.sDateOfOrder, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                    DateTime? estimateDate = !string.IsNullOrEmpty(obj.sEstimateTime) ? DateTime.ParseExact(obj.sEstimateTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                    var data = _context.PoBuyerHeaders.FirstOrDefault(x => x.IsDeleted == false && x.PoSupCode.ToLower() == obj.PoSupCode.ToLower());
                    if (data == null)
                    {
                        var datamodel = new PoBuyerHeader()
                        {
                            IsDeleted = false,
                            DateOfOrder = date,
                            CreatedBy = obj.CreatedBy,
                            CreatedTime = DateTime.Now,
                            EstimateTime = estimateDate,
                            PoTitle = obj.PoTitle,
                            ListUserView = obj.UserID,
                            BuyerCode = obj.BuyerCode,
                            ContractCode = obj.ContractCode,
                            ProjectCode = obj.ProjectCode,
                            SupCode = obj.SupCode,
                            Type = obj.Type,
                            Currency = obj.Currency,
                            ExchangeRate = obj.ExchangeRate,
                            OrderBy = obj.OrderBy,
                            Status = obj.Status,
                            Buyer = obj.Buyer,
                            Email = obj.Email,
                            ShippingAdd = obj.ShippingAdd,
                            Consigner = obj.Consigner,
                            Mobile = obj.Mobile,
                            PaymentTerm = obj.PaymentTerm,
                            Noted = obj.Noted,
                            PoSupCode = obj.PoSupCode
                        };

                        _context.PoBuyerHeaders.Add(datamodel);
                        _context.SaveChanges();
                        InsertPOSupTracking(datamodel);
                        msg.Title = "Thêm mới thành công đơn đặt hàng";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_ContractPO_ERR_Have";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_ContractPO_ERR";
            }
            return Json(msg);
        }
        [NonAction]
        public object InsertPOSupTracking(PoBuyerHeader obj1)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                var poHeader = obj1;
                var poDetail = _context.PoBuyerDetails.Where(x => x.PoSupCode.Equals(obj1.PoSupCode)).ToList();
                var jsonData = new UpdateContent
                {
                    Header = poHeader,
                    Detail = poDetail
                };

                var json = JsonConvert.SerializeObject(jsonData);
                var obj = new PoSupUpdateTracking
                {
                    Status = obj1.Status,
                    PoSupCode = obj1.PoSupCode,
                    CreatedBy = User.Identity.Name,
                    CreatedTime = DateTime.Now,
                    IsDeleted = false,
                    UpdateContent = json
                };

                _context.PoSupUpdateTrackings.Add(obj);
                _context.SaveChanges();

                msg.Title = "Thêm log thành công";
            }
            catch (Exception ex)
            {
                throw;
            }

            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailsContractPO(int id, string user)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.PoBuyerHeaders.FirstOrDefault(x => x.Id == id);
                data.ListUserView += ";" + user;
                _context.SaveChanges();
                data.Confirm = GetConfirmText(data.Confirm);
                msg.Object = data; 
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdatePO(PoBuyerHeaderModel obj)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {
                DateTime? date = !string.IsNullOrEmpty(obj.sDateOfOrder) ? DateTime.ParseExact(obj.sDateOfOrder, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? estimateDate = !string.IsNullOrEmpty(obj.sEstimateTime) ? DateTime.ParseExact(obj.sEstimateTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var checkImp = _context.ProdReceivedDetails.FirstOrDefault(x => x.LotProductCode.Equals(obj.PoSupCode));
                //Kiểm tra đơn hàng đã được nhập kho chưa nếu nhập kho rồi thì không được sửa
                if (checkImp != null)
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_Update_ERR";
                }
                else
                {
                    var data = _context.PoBuyerHeaders.FirstOrDefault(x => x.IsDeleted == false && x.Id == obj.Id);
                    var status = data.Status;
                    if (data != null)
                    {
                        var oldEtimateTime = data.EstimateTime;
                        data.PoTitle = obj.PoTitle;
                        data.DateOfOrder = date;
                        data.OrderBy = obj.OrderBy;
                        data.Buyer = obj.Buyer;
                        data.Email = obj.Email;
                        data.Status = obj.Status;
                        data.ShippingAdd = obj.ShippingAdd;
                        data.Consigner = obj.Consigner;
                        data.Mobile = obj.Mobile;
                        data.PaymentTerm = obj.PaymentTerm;
                        data.Noted = obj.Noted;
                        data.BuyerCode = obj.BuyerCode;
                        data.SupCode = obj.SupCode;
                        data.Type = obj.Type;
                        data.EstimateTime = estimateDate;
                        data.Currency = obj.Currency;
                        data.ExchangeRate = obj.ExchangeRate;
                        data.ContractCode = obj.ContractCode;
                        data.ProjectCode = obj.ProjectCode;
                        data.ListUserView = obj.UserID;

                        if (obj.Confirm != null && obj.Confirm != "")
                        {
                            if (obj.Confirm.ToLower() != GetConfirmText(data.Confirm).ToLower())
                                data.Confirm = UpdateConfirmText(data.Confirm, obj.Confirm);
                        }

                        data.UpdatedBy = obj.UpdatedBy;
                        data.UpdatedTime = DateTime.Now;
                        _context.PoBuyerHeaders.Update(data);
                        _context.SaveChanges();
                        InsertPOSupTracking(data);

                        if (oldEtimateTime.Value.Date != data.EstimateTime.Value.Date)
                        {
                            string[] param = new string[] { "@PoSupCode", "@OldEstimateDate", "@EstimateDate" };
                            object[] val = new object[] { data.PoSupCode, oldEtimateTime.Value.Date, data.EstimateTime.Value.Date };
                            _repositoryService.CallProc("PR_UPDATE_PO_BUYER_HEADER", param, val);
                        }

                        msg.Title = "Cập nhật thành công đơn đặt hàng";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_PROJECT_MSG_Update_NULL";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_ContractPO_ERR";
            }
            return Json(msg);
        }

        [HttpPost]
        public string UpdateConfirmText(string confirmInDB, string confirm)
        {
            var json = string.Empty;
            try
            {
                if (!string.IsNullOrEmpty(confirmInDB))
                {
                    var listConfirm = JsonConvert.DeserializeObject<List<ConfirmText>>(confirmInDB);
                    var confirmText = new ConfirmText
                    {
                        Id = Guid.NewGuid().ToString(),
                        Body = confirm,
                        CreateTime = DateTime.Now.ToString("dd/MM/yyyy hh:mm"),
                        UserName = User.Identity.Name
                    };

                    listConfirm.Add(confirmText);

                    json = JsonConvert.SerializeObject(listConfirm);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return json;
        }

        [HttpPost]
        public JsonResult DeleteContractForPO(int id, string user)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.PoBuyerHeaders.FirstOrDefault(x => x.IsDeleted == false && x.Id == id);
                var status = data.Status;
                if (data != null)
                {
                    var checkImp = _context.ProdReceivedDetails.Any(x => !x.IsDeleted && x.LotProductCode.Equals(data.PoSupCode));
                    //Kiểm tra đơn hàng đã được nhập kho chưa nếu nhập kho rồi thì không được sửa
                    if (checkImp)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_ContractPO_DELETED_ERR";
                        return Json(msg);
                    }

                    data.DeletedBy = user;
                    data.DeletedTime = DateTime.Now;
                    data.IsDeleted = true;
                    _context.PoBuyerHeaders.Update(data);
                    _context.SaveChanges();

                    msg.Title = "Xóa thành công đơn đặt hàng";
                    var list = _context.PoBuyerDetails.Where(x => x.IsDeleted == false && x.PoSupCode == data.PoSupCode).ToList();
                    foreach (var item in list)
                    {
                        string[] param = new string[] { "@ProductCode", "@OldQuantity", "@NewQuantity", "@ProductType", "@EstimateDate" };
                        object[] val = new object[] { item.ProductCode, int.Parse(item.Quantity), 0, item.ProductType, data.EstimateTime.Value.Date };
                        _repositoryService.CallProc("PR_UPDATE_PO_BUYER_DETAIL", param, val);
                    }

                    //Xóa các bảng chi tiết
                    list.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.PoBuyerDetails.UpdateRange(list);

                    var listPoSupDetails = _context.PoBuyerDetails.Where(x => !x.IsDeleted && x.PoSupCode == data.PoSupCode).ToList();
                    listPoSupDetails.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.PoBuyerDetails.UpdateRange(listPoSupDetails);

                    var listRequestPoSups = _context.RequestPoSups.Where(x => !x.IsDeleted && x.PoSupCode == data.PoSupCode).ToList();
                    listRequestPoSups.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.RequestPoSups.UpdateRange(listRequestPoSups);

                    var listPoSupAttributes = _context.PoSupAttributes.Where(x => !x.IsDeleted && x.PoSupCode == data.PoSupCode).ToList();
                    listPoSupAttributes.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.PoSupAttributes.UpdateRange(listPoSupAttributes);

                    _context.SaveChanges();
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_ContractPO_DELETED_ERR_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_Contract_MSG_ERR";
                msg.Object = ex;
            }
            return Json(msg);
        }
        #endregion

        #region dự án
        public class JTableModelProject : JTableModel
        {
            public string ProjectCode { get; set; }
            public string ProjectTitle { get; set; }
            public string ProjectType { get; set; }
            public double? BudgetStart { get; set; }
            public double? BudgetEnd { get; set; }
            public string StartTime { get; set; }
            public string EndTime { get; set; }
            public string BranchId { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public object GetListProjectView(JTableModelProject jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var fromDate = !string.IsNullOrEmpty(jTablePara.StartTime) ? DateTime.ParseExact(jTablePara.StartTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.EndTime) ? DateTime.ParseExact(jTablePara.EndTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = new List<Project>();
                if (jTablePara.QueryOrderBy == "SetPriority")
                {
                    query = (from a in _context.Projects
                             join b in _context.Users on a.CreatedBy equals b.UserName
                             where (!a.FlagDeleted)
                             && (string.IsNullOrEmpty(jTablePara.ProjectCode) || (a.ProjectCode.ToLower().Contains(jTablePara.ProjectCode.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectTitle) || (a.ProjectTitle.ToLower().Contains(jTablePara.ProjectTitle.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectType) || (a.PrjType.Equals(jTablePara.ProjectType)))
                             && (string.IsNullOrEmpty(jTablePara.BranchId) || (b.BranchId.Equals(jTablePara.BranchId)))
                             && (fromDate == null || (a.StartTime >= fromDate))
                             && (toDate == null || (a.EndTime <= toDate))
                             && (jTablePara.BudgetStart == null || (a.Budget >= jTablePara.BudgetStart))
                             && (jTablePara.BudgetEnd == null || (a.Budget <= jTablePara.BudgetEnd))
                             select a).OrderByDescending(x => x.SetPriority).GroupBy(x => x.SetPriority).SelectMany(grouping => grouping.OrderByDescending(b => b.CreatedTime)).Skip(intBeginFor).Take(jTablePara.Length).ToList();
                }
                else
                {
                    query = (from a in _context.Projects
                             join b in _context.Users on a.CreatedBy equals b.UserName
                             where (!a.FlagDeleted)
                             && (string.IsNullOrEmpty(jTablePara.ProjectCode) || (a.ProjectCode.ToLower().Contains(jTablePara.ProjectCode.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectTitle) || (a.ProjectTitle.ToLower().Contains(jTablePara.ProjectTitle.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectType) || (a.PrjType.Equals(jTablePara.ProjectType)))
                             && (string.IsNullOrEmpty(jTablePara.BranchId) || (b.BranchId.Equals(jTablePara.BranchId)))
                             && (fromDate == null || (a.StartTime >= fromDate))
                             && (toDate == null || (a.EndTime <= toDate))
                             && (jTablePara.BudgetStart == null || (a.Budget >= jTablePara.BudgetStart))
                             && (jTablePara.BudgetEnd == null || (a.Budget <= jTablePara.BudgetEnd))
                             select a).OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).ToList();
                }
                var count = (from a in _context.Projects
                             where (!a.FlagDeleted)
                             && (string.IsNullOrEmpty(jTablePara.ProjectCode) || (a.ProjectCode.ToLower().Contains(jTablePara.ProjectCode.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectTitle) || (a.ProjectTitle.ToLower().Contains(jTablePara.ProjectTitle.ToLower())))
                             && (string.IsNullOrEmpty(jTablePara.ProjectType) || (a.PrjType.Equals(jTablePara.ProjectType)))
                             && (fromDate == null || (a.StartTime >= fromDate))
                             && (toDate == null || (a.EndTime <= toDate))
                             && (jTablePara.BudgetStart == null || (a.Budget >= jTablePara.BudgetStart))
                             && (jTablePara.BudgetEnd == null || (a.Budget <= jTablePara.BudgetEnd))
                             select a).AsNoTracking().Count();
                var data = query.Select(x => new
                {
                    x.Id,
                    Code = x.ProjectCode,
                    Name = x.ProjectTitle,
                    Currency = _context.CommonSettings.FirstOrDefault(y => !y.IsDeleted && y.CodeSet == x.Currency)?.ValueSet,
                    x.Budget,
                    x.StartTime,
                    x.EndTime,
                    x.SetPriority,
                    x.CustomerCode,
                    Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Status && !y.IsDeleted)?.ValueSet,
                    ExpirationDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(x.ProjectCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_HET_HAN") && p.ObjCode.Equals(x.ProjectCode)).AttrValue : "",
                    RenewalDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(x.ProjectCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_GIA_HAN_TIEP_THEO") && p.ObjCode.Equals(x.ProjectCode)).AttrValue : "",
                    PaymentNextDate = _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(x.ProjectCode)) != null ? _context.AttributeManagerGalaxys.LastOrDefault(p => p.AttrCode.Equals("NGAY_THANH_TOAN_TIEP_THEO") && p.ObjCode.Equals(x.ProjectCode)).AttrValue : "",
                }).ToList();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetProjectType()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.ProType)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetItemProjectView(int id, string userId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.Projects.FirstOrDefault(x => !x.FlagDeleted && x.Id == id);
                data.ListUserView += ";" + userId;
                msg.Object = (from a in _context.Projects
                              where a.Id == id
                              select new
                              {
                                  a.Id,
                                  a.ProjectCode,
                                  a.ProjectTitle,
                                  Currency = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == a.Currency).ValueSet,
                                  a.Budget,
                                  a.PrjMode,
                                  a.SetPriority,
                                  a.CaseWorker,
                                  StartTime = a.StartTime.ToString("dd/MM/yyyy"),
                                  EndTime = a.EndTime.ToString("dd/MM/yyyy"),
                                  a.PrjStatus,
                                  PrjType = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == a.PrjType).ValueSet,
                                  a.GoogleMap,
                                  a.Address,
                                  a.CustomerCode,
                                  CustomerName = _context.Customerss.FirstOrDefault(x => !x.IsDeleted && x.CusCode == a.CustomerCode).CusName,
                                  SupplierCode = _context.Suppliers.FirstOrDefault(x => !x.IsDeleted && x.SupCode == a.SupplierCode).SupName,
                                  Status = _context.CommonSettings.FirstOrDefault(x => !x.IsDeleted && x.CodeSet == a.Status).ValueSet,
                              }).First();
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetMoreProjectView(string ProjectCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var dataFile = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == ProjectCode && x.ObjectType == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project))
                                 join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                                 join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                                 from f in f1.DefaultIfEmpty()
                                 select new
                                 {
                                     a.Id,
                                     b.FileCode,
                                     b.FileName,
                                     b.FileTypePhysic,
                                     b.Desc,
                                     b.CreatedTime,
                                     b.CloudFileId,
                                     TypeFile = "NO_SHARE",
                                     ReposName = f != null ? f.ReposName : "",
                                     b.Url,
                                 }).Union(
                 from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == ProjectCode && x.ObjectType == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project))
                 join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                 join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                 from f in f1.DefaultIfEmpty()
                 select new
                 {
                     Id = b.FileID,
                     b.FileCode,
                     b.FileName,
                     b.FileTypePhysic,
                     b.Desc,
                     b.CreatedTime,
                     b.CloudFileId,
                     TypeFile = "SHARE",
                     ReposName = f != null ? f.ReposName : "",
                     b.Url,
                 })).AsNoTracking();
                msg.Object = new
                {
                    //Contact = dataContact,
                    File = dataFile
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class ProjectManagementJtable : JTableModel
        {
            public string UserId { get; set; }
            public string Code { get; set; }
            public string Name { get; set; }
            public string Status { get; set; }
            public string FromDate { get; set; }
            public int CurrentPageView { get; set; }
            public string ToDate { get; set; }
        }

        [HttpPost]
        public object GetListProjectManagement(ProjectManagementJtable jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var fromDate = !string.IsNullOrEmpty(jTablePara.FromDate) ? DateTime.ParseExact(jTablePara.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(jTablePara.ToDate) ? DateTime.ParseExact(jTablePara.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = (from a in _context.WORKOSCards
                             let listUser = !string.IsNullOrEmpty(a.LstUser) ? a.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                             from c in listUser
                             where a.IsDeleted == false && (string.IsNullOrEmpty(jTablePara.UserId) || c == jTablePara.UserId)
                              && ((string.IsNullOrEmpty(jTablePara.Code)) || (a.CardCode.ToLower().Contains(jTablePara.Code.ToString())))
                              && ((string.IsNullOrEmpty(jTablePara.Name)) || (a.CardName.ToLower().Contains(jTablePara.Name.ToLower())))
                              && ((string.IsNullOrEmpty(jTablePara.Status)) || (a.Status == jTablePara.Status))
                              && ((string.IsNullOrEmpty(jTablePara.FromDate)) || (a.CreatedDate.Date >= fromDate.Value.Date))
                              && ((string.IsNullOrEmpty(jTablePara.ToDate)) || (a.CreatedDate.Date <= toDate.Value.Date))
                               && a.Status != "TRASH"
                             select a)
                             .OrderByDescending(x => x.CardID);
                var data = (from x in query
                            let contractCode = _context.CardMappings.Any(y => !string.IsNullOrEmpty(y.ContractCode) && y.CardCode == x.CardCode)
                                                        ? _context.CardMappings.FirstOrDefault(y => !string.IsNullOrEmpty(y.ContractCode) && y.CardCode == x.CardCode).ContractCode
                                                        : ""
                            let projectCode = _context.CardMappings.Any(y => !string.IsNullOrEmpty(y.ProjectCode) && y.CardCode == x.CardCode)
                                                        ? _context.CardMappings.FirstOrDefault(y => !string.IsNullOrEmpty(y.ProjectCode) && y.CardCode == x.CardCode).ProjectCode
                                                        : ""
                            select new
                            {
                                x.CardID,
                                x.CardCode,
                                x.CardName,
                                Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet.Equals(x.Status)).ValueSet ?? "",
                                StatusCode = x.Status,
                                x.BeginTime,
                                x.EndTime,
                                x.Cost,
                                x.Deadline,
                                x.Completed,
                                Currency = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Currency).ValueSet ?? "",
                                ListName = _context.WORKOSLists.FirstOrDefault(y => y.ListCode == x.ListCode && y.IsDeleted == false).ListName ?? "",
                                x.ListCode,
                                BoardCode = _context.WORKOSBoards.FirstOrDefault(y => y.BoardCode == (_context.WORKOSLists.FirstOrDefault(z => z.ListCode == x.ListCode && z.IsDeleted == false).BoardCode ?? "")).BoardCode ?? "",
                                BoardName = _context.WORKOSBoards.FirstOrDefault(y => y.BoardCode == (_context.WORKOSLists.FirstOrDefault(z => z.ListCode == x.ListCode && z.IsDeleted == false).BoardCode ?? "")).BoardName ?? "",
                                ProjectCode = projectCode,
                                ProjectName = !string.IsNullOrEmpty(projectCode)
                                                    ? _context.Projects.Any(y => !y.FlagDeleted && y.ProjectCode == projectCode)
                                                        ? _context.Projects.FirstOrDefault(y => !y.FlagDeleted && y.ProjectCode == projectCode).ProjectTitle
                                                        : ""
                                                    : "",
                                ContractCode = contractCode,
                                ContractName = !string.IsNullOrEmpty(contractCode)
                                                    ? _context.PoBuyerHeaders.Any(y => !y.IsDeleted && y.ContractCode == contractCode)
                                                        ? _context.PoBuyerHeaders.FirstOrDefault(y => !y.IsDeleted && y.ContractCode == contractCode).PoTitle
                                                        : ""
                                                    : "",
                                x.CardLevel,

                            }).DistinctBy(x => x.CardCode).Skip(intBeginFor).Take(jTablePara.Length).ToList();
                var count = (from a in _context.WORKOSCards
                             let listUser = !string.IsNullOrEmpty(a.LstUser) ? a.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                             from c in listUser
                             where a.IsDeleted == false && (string.IsNullOrEmpty(jTablePara.UserId) || c == jTablePara.UserId)
                              && ((string.IsNullOrEmpty(jTablePara.Code)) || (a.CardCode.ToLower().Contains(jTablePara.Code.ToString())))
                              && ((string.IsNullOrEmpty(jTablePara.Name)) || (a.CardName.ToLower().Contains(jTablePara.Name.ToLower())))
                              && ((string.IsNullOrEmpty(jTablePara.Status)) || (a.Status == jTablePara.Status))
                              && ((string.IsNullOrEmpty(jTablePara.FromDate)) || (a.CreatedDate.Date >= fromDate.Value.Date))
                              && ((string.IsNullOrEmpty(jTablePara.ToDate)) || (a.CreatedDate.Date <= toDate.Value.Date))
                               && a.Status != "TRASH"
                             select a).AsNoTracking().DistinctBy(x => x.CardCode).Count();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetStatusCardJob()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<CardEnum>.GetDisplayValue(CardEnum.Stautus) && x.IsDeleted == false)
                        .Select(x => new { Code = x.CodeSet, Value = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetWorkTypeCardJob()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.AssetCode.Equals("CARDJOB") && x.Group.Equals("OBJ_WORKTYPE") && x.IsDeleted == false)
                        .Select(x => new { Code = x.CodeSet, Value = x.ValueSet }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListUnit()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.CurrencyType)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListStatusPO()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == "PROJECT_STATUS" && !x.IsDeleted).OrderBy(x => x.Priority).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListPrjType()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.ProType)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCustomerPO()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.Customerss.Where(x => !x.IsDeleted).OrderByDescending(x => x.CusID).Select(x => new
            {
                Code = x.CusCode,
                Name = x.CusName,
                Role = x.Role
            });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListSupplierPO()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.Suppliers.Where(x => !x.IsDeleted).Select(x => new
            {
                Code = x.SupCode,
                Name = x.SupName,
            });
            msg.Object = data;
            return Json(msg);
        }

        public class ModelProject
        {
            public string ProjectCode { get; set; }
            public string ProjectTitle { get; set; }
            public string Currency { get; set; }
            public string Budget { get; set; }
            public string StartTime { get; set; }
            public string EndTime { get; set; }
            public string SetPriority { get; set; }
            public string CustomerCode { get; set; }
            public string SupplierCode { get; set; }
            public string PrjType { get; set; }
            public string GoogleMap { get; set; }
            public string Address { get; set; }
            public string Status { get; set; }
            public string UserName { get; set; }
            public string UserID { get; set; }
            public int Id { get; set; }
        }

        [HttpPost]
        public JsonResult InsertProject(ModelProject obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.Projects.FirstOrDefault(x => x.ProjectCode == obj.ProjectCode && !x.FlagDeleted);
                if (checkExist == null)
                {
                    //add project
                    var budget = !string.IsNullOrEmpty(obj.Budget) ? double.Parse(obj.Budget) : (double?)null;
                    var set = !string.IsNullOrEmpty(obj.SetPriority) ? double.Parse(obj.SetPriority) : (double?)null;
                    var fromto = DateTime.ParseExact(obj.StartTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    var dateto = DateTime.ParseExact(obj.EndTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    var data = new Project()
                    {
                        ProjectCode = obj.ProjectCode,
                        ProjectTitle = obj.ProjectTitle,
                        Budget = budget,
                        Currency = obj.Currency,
                        StartTime = fromto,
                        EndTime = dateto,
                        SetPriority = set,
                        PrjStatus = EnumHelper<ProjectStatusEnum>.GetDisplayValue(ProjectStatusEnum.Active),
                        PrjType = obj.PrjType,
                        GoogleMap = obj.GoogleMap,
                        Address = obj.Address,
                        Status = obj.Status,
                        CustomerCode = obj.CustomerCode,
                        SupplierCode = obj.SupplierCode,
                        CreatedBy = obj.UserName,
                        CreatedTime = DateTime.Now,
                        ListUserView = obj.UserID
                    };
                    _context.Projects.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Thêm dự án thành công";
                    msg.Object = data.Id;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetItemProjectUpdate(int id, string userId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.Projects.FirstOrDefault(x => !x.FlagDeleted && x.Id == id);
                data.ListUserView += ";" + userId;
                msg.Object = (from a in _context.Projects
                              where a.Id == id
                              select new
                              {
                                  a.Id,
                                  a.ProjectCode,
                                  a.ProjectTitle,
                                  a.Currency,
                                  a.Budget,
                                  a.PrjMode,
                                  a.SetPriority,
                                  a.CaseWorker,
                                  a.StartTime,
                                  a.EndTime,
                                  a.PrjStatus,
                                  a.PrjType,
                                  a.GoogleMap,
                                  a.Address,
                                  a.CustomerCode,
                                  a.SupplierCode,
                                  a.Status,
                              }).First();
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateProject(ModelProject obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.Projects.FirstOrDefault(x => x.ProjectCode == obj.ProjectCode && !x.FlagDeleted);
                if (checkExist != null)
                {
                    //add project
                    var budget = !string.IsNullOrEmpty(obj.Budget) ? double.Parse(obj.Budget) : (double?)null;
                    var set = !string.IsNullOrEmpty(obj.SetPriority) ? double.Parse(obj.SetPriority) : (double?)null;
                    var fromto = DateTime.ParseExact(obj.StartTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    var dateto = DateTime.ParseExact(obj.EndTime, "dd/MM/yyyy", CultureInfo.InvariantCulture);

                    checkExist.ProjectCode = obj.ProjectCode;
                    checkExist.ProjectTitle = obj.ProjectTitle;
                    checkExist.Budget = budget;
                    checkExist.Currency = obj.Currency;
                    checkExist.StartTime = fromto;
                    checkExist.EndTime = dateto;
                    checkExist.SetPriority = set;
                    checkExist.PrjStatus = EnumHelper<ProjectStatusEnum>.GetDisplayValue(ProjectStatusEnum.Active);
                    checkExist.PrjType = obj.PrjType;
                    checkExist.GoogleMap = obj.GoogleMap;
                    checkExist.Address = obj.Address;
                    checkExist.Status = obj.Status;
                    checkExist.CustomerCode = obj.CustomerCode;
                    checkExist.SupplierCode = obj.SupplierCode;
                    checkExist.CreatedBy = obj.UserName;
                    checkExist.CreatedTime = DateTime.Now;
                    checkExist.ListUserView = obj.UserID;

                    _context.Projects.Update(checkExist);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật dự án thành công";
                    msg.Object = checkExist.Id;
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeletedProject(int Id, string user)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.Projects.FirstOrDefault(x => x.Id == Id);
                if (data != null)
                {
                    //Check dự án đã được đưa vào Hợp đồng
                    var chkUsingInContract = _context.PoSaleHeaders.Any(x => !x.IsDeleted && x.PrjCode == data.ProjectCode);
                    if (chkUsingInContract)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_PROJECT_MSG_CT_TT";
                        return Json(msg);
                    }

                    //Check dự án đã được đưa vào YCĐH
                    var chkUsingReqImp = _context.RequestImpProductHeaders.Any(x => !x.IsDeleted && x.ProjectCode == data.ProjectCode);
                    if (chkUsingReqImp)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_PROJECT_MSG_CT_HAVE_YCDH";
                        return Json(msg);
                    }

                    data.FlagDeleted = true;
                    _context.Projects.Update(data);

                    //Xóa các bảng chi tiết
                    var listProjectCusSups = _context.ProjectCusSups.Where(x => !x.IsDeleted && x.ProjectCode == data.ProjectCode).ToList();
                    listProjectCusSups.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ProjectCusSups.UpdateRange(listProjectCusSups);

                    var listProjectMembers = _context.ProjectMembers.Where(x => !x.FlagDeleted && x.ProjectCode == data.ProjectCode).ToList();
                    listProjectMembers.ForEach(x => { x.FlagDeleted = true; });
                    _context.ProjectMembers.UpdateRange(listProjectMembers);

                    var listProjectProducts = _context.ProjectProducts.Where(x => x.ProjectCode == data.ProjectCode).ToList();
                    _context.ProjectProducts.RemoveRange(listProjectProducts);

                    var listProjectAttributes = _context.ProjectAttributes.Where(x => x.ProjectCode == data.ProjectCode).ToList();
                    _context.ProjectAttributes.RemoveRange(listProjectAttributes);

                    var listEDMSRepoCatFiles = _context.EDMSRepoCatFiles.Where(x => x.ObjectType == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project) && x.ObjectCode == data.ProjectCode).ToList();
                    _context.EDMSRepoCatFiles.RemoveRange(listEDMSRepoCatFiles);

                    var listProjectNotes = _context.ProjectNotes.Where(x => !x.IsDeleted && x.ProjectCode == data.ProjectCode).ToList();
                    listProjectNotes.ForEach(x => { x.IsDeleted = true; x.DeletedBy = user; x.DeletedTime = DateTime.Now.Date; });
                    _context.ProjectNotes.UpdateRange(listProjectNotes);

                    var listProjectTeams = _context.ProjectTeams.Where(x => x.ProjectCode == data.ProjectCode).ToList();
                    _context.ProjectTeams.RemoveRange(listProjectTeams);

                    _context.SaveChanges();
                    msg.Title = "Xóa dự án thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        //Tab Product
        [HttpPost]
        public JsonResult GetListProductForPO()
        {
            var msg = new JMessage() { Error = false };
            var currentTime = DateTime.Now;
            var productCost = (from a in _context.ProductCostHeaders.Where(x => x.IsDeleted == false)
                               join b in _context.ProductCostDetails.Where(x => x.IsDeleted == false) on a.HeaderCode equals b.HeaderCode
                               where a.EffectiveDate != null && a.ExpiryDate != null &&
                               a.EffectiveDate.Date <= currentTime.Date && currentTime.Date <= a.ExpiryDate.Date
                               select new
                               {
                                   HeaderCode = a.HeaderCode,
                                   ProductCode = b.ProductCode,
                               });
            var query = from a in _context.VProductAllTables
                        join b in productCost on a.ProductCode equals b.ProductCode into b2
                        from b in b2.DefaultIfEmpty()
                        orderby a.ProductType
                        select new
                        {
                            Code = a.ProductCode,
                            Name = a.ProductType == "FINISHED_PRODUCT" ? string.Format("Thành phẩm_{0}-{1}", a.ProductName, a.ProductCode) : a.ProductName,
                        };
            msg.Object = query;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListPriceOptionForPO(string customerCode)
        {
            var msg = new JMessage() { Error = false };
            var list = new List<Properties>();
            var check = _context.Customerss.FirstOrDefault(x => x.CusCode == customerCode && !x.IsDeleted);
            if (check != null)
            {
                if (check.Role == EnumHelper<CustomerRoleEnum>.GetDisplayValue(CustomerRoleEnum.Agency))
                {
                    var catelogue = new Properties
                    {
                        Code = EnumHelper<PriceAgency>.GetDisplayValue(PriceAgency.Catelogue),
                        Name = PriceAgency.Catelogue.DescriptionAttr(),
                    };
                    list.Add(catelogue);

                    var airline = new Properties
                    {
                        Code = EnumHelper<PriceAgency>.GetDisplayValue(PriceAgency.Airline),
                        Name = PriceAgency.Airline.DescriptionAttr(),
                    };
                    list.Add(airline);

                    var sea = new Properties
                    {
                        Code = EnumHelper<PriceAgency>.GetDisplayValue(PriceAgency.Sea),
                        Name = PriceAgency.Sea.DescriptionAttr(),
                    };
                    list.Add(sea);
                }
                else
                {
                    var airline = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.Airline),
                        Name = PriceRetail.Airline.DescriptionAttr(),
                    };
                    list.Add(airline);

                    var buid = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.Buid),
                        Name = PriceRetail.Buid.DescriptionAttr(),
                    };
                    list.Add(buid);

                    var noBuid = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.NoBuid),
                        Name = PriceRetail.NoBuid.DescriptionAttr(),
                    };
                    list.Add(noBuid);

                    var noBuidAirline = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.NoBuidAirline),
                        Name = PriceRetail.NoBuidAirline.DescriptionAttr(),
                    };
                    list.Add(noBuidAirline);

                    var noBuidSea = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.NoBuidSea),
                        Name = PriceRetail.NoBuidSea.DescriptionAttr(),
                    };
                    list.Add(noBuidSea);

                    var sea = new Properties
                    {
                        Code = EnumHelper<PriceRetail>.GetDisplayValue(PriceRetail.Sea),
                        Name = PriceRetail.Sea.DescriptionAttr(),
                    };
                    list.Add(sea);
                }

                msg.Object = list;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetProductUnitPO()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        public class ProjectProductModel
        {
            public int Id { get; set; }
            public string ProductCode { get; set; }
            public decimal? Quantity { get; set; }
            public string Unit { get; set; }
            public string ProjectCode { get; set; }
            public decimal Cost { get; set; }
            public double Tax { get; set; }
            public double? Commission { get; set; }
            public double? CustomFee { get; set; }
            public double? Discount { get; set; }
            public string PriceType { get; set; }
            public string ProductType { get; set; }
            public decimal? QuantityNeedExport { get; set; }
            public string Note { get; set; }
        }

        [HttpPost]
        public async Task<JsonResult> InsertProductForPO(ProjectProductModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                using (await userLock.LockAsync(string.Concat(obj.ProjectCode, obj.ProductCode)))
                {
                    var checkExist = await _context.ProjectProducts.FirstOrDefaultAsync(x => x.ProjectCode == obj.ProjectCode && x.ProductCode == obj.ProductCode);
                    if (checkExist == null)
                    {
                        var data = new ProjectProduct()
                        {
                            ProductCode = obj.ProductCode,
                            Quantity = obj.Quantity,
                            Unit = obj.Unit,
                            ProjectCode = obj.ProjectCode,
                            Cost = obj.Cost,
                            Tax = obj.Tax,
                            Note = obj.Note,
                            PriceType = obj.PriceType,
                        };
                        _context.ProjectProducts.Add(data);
                        _context.SaveChanges();
                        msg.Title = "Thêm sản phẩm thành công";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateProduct(ProjectProductModel obj)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var product = _context.ProjectProducts.FirstOrDefault(x => x.Id == obj.Id);
                if (product != null)
                {
                    product.Unit = obj.Unit;
                    product.Tax = obj.Tax;
                    product.Cost = obj.Cost;
                    product.Quantity = obj.Quantity;
                    product.PriceType = obj.PriceType;
                    product.Note = obj.Note;
                    _context.ProjectProducts.Update(product);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật sản phẩm thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteProduct(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ProjectProducts.FirstOrDefault(x => x.Id == id);

                //Check dự án đã được đưa vào YCĐH
                var chkUsingReqImp = (from a in _context.RequestImpProductHeaders.Where(x => !x.IsDeleted && x.ProjectCode == data.ProjectCode)
                                      join b in _context.RequestImpProductDetails.Where(x => !x.IsDeleted && x.ProductCode == data.ProductCode && x.ProductType == data.ProductType) on a.ReqCode equals b.ReqCode
                                      select b.Id).Any();
                if (chkUsingReqImp)
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE_PARENT";
                    return Json(msg);
                }

                _context.ProjectProducts.Remove(data);
                _context.SaveChanges();
                msg.Title = "Xóa sản phẩm thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListProductTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var data = _context.ProjectProducts.Where(x => x.ProjectCode == ProjectCode).Select(x => new
            {
                x.Id,
                x.ProductCode,
                ProductName = _context.VProductAllTables.FirstOrDefault(b => b.ProductCode == x.ProductCode).ProductName,
                x.Cost,
                x.Quantity,
                x.Unit,
                x.PriceType,
                x.Tax,
                x.Note,
                UnitName = x.Unit != null ? _context.CommonSettings.FirstOrDefault(a => !a.IsDeleted && a.CodeSet == x.Unit).ValueSet : "",
            });
            msg.Object = data;
            return Json(msg);
        }

        //Tab Service
        [HttpPost]
        public JsonResult GetListTabService()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.ServiceCategorys.Where(x => !x.IsDeleted).Select(x => new
            {
                Code = x.ServiceCode,
                Name = x.ServiceName,
            });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListServiceLevel()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<ServiceEnum>.GetDisplayValue(ServiceEnum.ServiceLevel) && x.IsDeleted == false).Select(x => new
            {
                Code = x.CodeSet,
                Name = x.ValueSet,
            });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListServiceUnit()
        {
            var msg = new JMessage() { Error = false };
            var list = new List<Properties>();
            var date = new Properties
            {
                Code = EnumHelper<UnitDuration>.GetDisplayValue(UnitDuration.Date),
                Name = UnitDuration.Date.DescriptionAttr()
            };
            list.Add(date);

            var month = new Properties
            {
                Code = EnumHelper<UnitDuration>.GetDisplayValue(UnitDuration.Month),
                Name = UnitDuration.Month.DescriptionAttr()
            };
            list.Add(month);

            var year = new Properties
            {
                Code = EnumHelper<UnitDuration>.GetDisplayValue(UnitDuration.Year),
                Name = UnitDuration.Year.DescriptionAttr()
            };
            list.Add(year);
            msg.Object = list;
            return Json(msg);
        }

        public class ProjectServiceModel
        {
            public int Id { get; set; }
            public string ServiceCode { get; set; }
            public decimal? Quantity { get; set; }
            public string Unit { get; set; }
            public string Level { get; set; }
            public string DurationTime { get; set; }
            public string Status { get; set; }
            public string Note { get; set; }
            public string ProjectCode { get; set; }
        }

        [HttpPost]
        public async Task<JsonResult> InsertServiceForPO(ProjectServiceModel obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                using (await userLock.LockAsync(string.Concat(obj.ProjectCode, obj.ServiceCode)))
                {
                    var checkExist = await _context.ProjectServices.FirstOrDefaultAsync(x => x.ProjectCode == obj.ProjectCode && x.ServiceCode == obj.ServiceCode);
                    if (checkExist == null)
                    {
                        var data = new ProjectService()
                        {
                            ServiceCode = obj.ServiceCode,
                            Quantity = obj.Quantity,
                            Unit = obj.Unit,
                            Level = obj.Level,
                            DurationTime = obj.DurationTime,
                            Note = obj.Note,
                            ProjectCode = obj.ProjectCode
                        };
                        _context.ProjectServices.Add(data);
                        _context.SaveChanges();
                        msg.Title = "Thêm dịch vụ thành công";
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListServiceTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var data = _context.ProjectServices.Where(x => x.ProjectCode == ProjectCode).Select(x => new
            {
                x.Id,
                x.ServiceCode,
                ServiceName = _context.ServiceCategorys.FirstOrDefault(a => a.ServiceCode == x.ServiceCode).ServiceName,
                x.Level,
                LevelName = _context.CommonSettings.FirstOrDefault(a => a.CodeSet == x.Level).ValueSet,
                x.Quantity,
                x.DurationTime,
                x.Unit,
                UnitName = x.Unit == EnumHelper<UnitDuration>.GetDisplayValue(UnitDuration.Date) ? UnitDuration.Date.DescriptionAttr() :
                            x.Unit == EnumHelper<UnitDuration>.GetDisplayValue(UnitDuration.Month) ? UnitDuration.Month.DescriptionAttr() : UnitDuration.Year.DescriptionAttr(),
                x.Note
            });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateServiceForPO(ProjectServiceModel obj)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var service = _context.ProjectServices.FirstOrDefault(x => x.Id == obj.Id);
                if (service != null)
                {
                    service.Unit = obj.Unit;
                    service.Level = obj.Level;
                    service.Quantity = obj.Quantity;
                    service.DurationTime = obj.DurationTime;
                    service.Unit = obj.Unit;
                    service.Note = obj.Note;
                    _context.ProjectServices.Update(service);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteService(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ProjectServices.FirstOrDefault(x => x.Id == id);
                _context.ProjectServices.Remove(data);
                _context.SaveChanges();
                msg.Title = "Xóa thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }
        //Tab File
        [HttpPost]
        [RequestFormLimits(MultipartBodyLengthLimit = long.MaxValue)]
        [RequestSizeLimit(long.MaxValue)]
        public JsonResult InsertFileForProject(EDMSRepoCatFileModel obj, IFormFile fileUpload)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var mimeType = fileUpload.ContentType;
                //string extension = Path.GetExtension(fileUpload.FileName);
                string urlFile = "";
                string fileId = "";
                var fileName = Path.GetFileName(fileUpload.FileName);
                var extension = Path.GetExtension(fileName);
                fileName = Path.GetFileNameWithoutExtension(fileName);
                var fileSize = fileUpload.Length;
                if ((fileSize / 1048576.0) > 28)
                {
                    msg.Error = true;
                    msg.Title = "Dung lượng file lớn hơn 28 MB";
                    return Json(msg);
                }

                if (Array.IndexOf(LuceneExtension.fileMimetypes, mimeType) >= 0 && (Array.IndexOf(LuceneExtension.fileExt, extension.ToUpper()) >= 0))
                {
                    string reposCode = "";
                    string catCode = "";
                    string path = "";
                    string folderId = "";

                    var setting = _context.EDMSCatRepoSettings.FirstOrDefault(x => x.Id == obj.CateRepoSettingId);
                    if (setting != null)
                    {
                        reposCode = setting.ReposCode;
                        path = setting.Path;
                        folderId = setting.FolderId;
                        catCode = setting.CatCode;
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Vui lòng chọn thư mục lưu trữ!";
                        return Json(msg);
                    }

                    var getRepository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == reposCode);
                    if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.Server))
                    {
                        using (var ms = new MemoryStream())
                        {
                            fileUpload.CopyTo(ms);
                            var fileBytes = ms.ToArray();
                            urlFile = path + Path.Combine("/", fileUpload.FileName);
                            var urlFilePreventive = path + Path.Combine("/", Guid.NewGuid().ToString().Substring(0, 8) + fileUpload.FileName);
                            var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFile);
                            var urlEndPreventive = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFilePreventive);
                            var result = FileExtensions.UploadFileToFtpServer(urlEnd, urlEndPreventive, fileBytes, getRepository.Account, getRepository.PassWord);
                            if (result.Status == WebExceptionStatus.ConnectFailure || result.Status == WebExceptionStatus.ProtocolError)
                            {
                                msg.Error = true;
                                msg.Title = "Kết nối server không thành công";
                                return Json(msg);
                            }
                            else if (result.Status == WebExceptionStatus.Success)
                            {
                                if (result.IsSaveUrlPreventive)
                                {
                                    urlFile = urlFilePreventive;
                                }
                            }
                            else
                            {
                                msg.Error = true;
                                msg.Title = "Định dạng không hợp lệ !";
                                return Json(msg);
                            }
                        }
                    }
                    else if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.GooglerDriver))
                    {
                        fileId = FileExtensions.UploadFileToDrive(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", fileUpload.FileName, fileUpload.OpenReadStream(), fileUpload.ContentType, folderId);
                    }
                    var edmsReposCatFile = new EDMSRepoCatFile
                    {
                        FileCode = string.Concat("REPOSITORY", Guid.NewGuid().ToString()),
                        ReposCode = reposCode,
                        CatCode = catCode,
                        ObjectCode = obj.ProjectCode,
                        ObjectType = null,
                        Path = path,
                        FolderId = folderId
                    };
                    _context.EDMSRepoCatFiles.Add(edmsReposCatFile);

                    /// created Index lucene
                    if (!extension.ToUpper().Equals(".ZIP") && !extension.ToUpper().Equals(".RAR"))
                    {
                        LuceneExtension.IndexFile(edmsReposCatFile.FileCode, fileUpload, string.Concat(_hostingEnvironment.WebRootPath, "\\uploads\\luceneIndex"));
                    }
                    //add File
                    var file = new EDMSFile
                    {
                        FileCode = edmsReposCatFile.FileCode,
                        FileName = fileUpload.FileName,
                        Desc = obj.Desc,
                        ReposCode = reposCode,
                        Tags = obj.Tags,
                        FileSize = fileUpload.Length,
                        FileTypePhysic = Path.GetExtension(fileUpload.FileName),
                        NumberDocument = obj.NumberDocument,
                        CreatedBy = ESEIM.AppContext.UserName,
                        CreatedTime = DateTime.Now,
                        Url = urlFile,
                        MimeType = mimeType,
                        CloudFileId = fileId,
                    };
                    _context.EDMSFiles.Add(file);

                    _context.SaveChanges();
                    msg.Title = "Thêm mới tệp tin thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Định dạng không hợp lệ !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Định dạng không hợp lệ !";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListFileTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == ProjectCode && x.ObjectType == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project))
                          join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                          join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                          from f in f1.DefaultIfEmpty()
                          select new
                          {
                              a.Id,
                              b.FileCode,
                              b.FileName,
                              b.FileTypePhysic,
                              b.Desc,
                              CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyy") : "",
                              b.CloudFileId,
                              TypeFile = "NO_SHARE",
                              ReposName = f != null ? f.ReposName : "",
                              b.FileID,
                              SizeOfFile = b.FileSize.HasValue ? b.FileSize.Value : 0,
                          }).Union(
                  from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == ProjectCode && x.ObjectType == EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project))
                  join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                  join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                  from f in f1.DefaultIfEmpty()
                  select new
                  {
                      Id = b.FileID,
                      b.FileCode,
                      b.FileName,
                      b.FileTypePhysic,
                      b.Desc,
                      CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyy") : "",
                      b.CloudFileId,
                      TypeFile = "SHARE",
                      ReposName = f != null ? f.ReposName : "",
                      b.FileID,
                      SizeOfFile = b.FileSize.HasValue ? b.FileSize.Value : 0,
                  })).AsNoTracking();
            msg.Object = query;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteProjectFile(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.EDMSRepoCatFiles.FirstOrDefault(x => x.Id == id);
                _context.EDMSRepoCatFiles.Remove(data);

                var file = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == data.FileCode);
                _context.EDMSFiles.Remove(file);

                LuceneExtension.DeleteIndexFile(file.FileCode, _hostingEnvironment.WebRootPath + "\\uploads\\luceneIndex");
                var getRepository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == data.ReposCode);
                if (getRepository != null)
                {
                    if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.Server))
                    {
                        var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + file.Url);
                        FileExtensions.DeleteFileFtpServer(urlEnd, getRepository.Account, getRepository.PassWord);
                    }
                    else if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.GooglerDriver))
                    {
                        FileExtensions.DeleteFileGoogleServer(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", file.CloudFileId);
                    }
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi xóa!";
                msg.Object = ex;
            }
            return Json(msg);
        }

        // tab note
        public class ProjectTabNoteModel
        {
            public int? Id { get; set; }
            public string ProjectCode { get; set; }
            public string Title { get; set; }
            public string Note { get; set; }
            public string UserName { get; set; }
        }

        [HttpPost]
        public JsonResult InsertProjectTabNote(ProjectTabNoteModel obj)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var project = _context.Projects.FirstOrDefault(x => x.ProjectCode == obj.ProjectCode);
                var data = new ProjectNote()
                {
                    ProjectCode = project.ProjectCode,
                    Title = obj.Title,
                    Note = obj.Note,
                    ProjectVersion = project.Version,
                    CreatedBy = obj.UserName,
                    CreatedTime = DateTime.Now
                };
                _context.ProjectNotes.Add(data);
                _context.SaveChanges();
                msg.Title = "Thêm mới ghi chú thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListNoteTable(ProjectTabNoteModel obj)
        {
            var msg = new JMessage() { Error = false };
            var data = _context.ProjectNotes.Where(x => x.ProjectCode == obj.ProjectCode
                    && (string.IsNullOrEmpty(obj.Title) || x.Title.ToLower().Contains(obj.Title.ToLower()))
                    && (string.IsNullOrEmpty(obj.Note) || x.Note.ToLower().Contains(obj.Note.ToLower()))).Select(x => new
                    {
                        x.Id,
                        x.Title,
                        x.Note,
                        Name = _context.Users.FirstOrDefault(a => a.UserName == x.CreatedBy).GivenName,
                        x.CreatedBy,
                        CreatedTime = x.CreatedTime != null ? x.CreatedTime.Value.ToString("dd/MM/yyyy HH:mm") : ""
                    });
            msg.Object = data;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateProjectTabNote(ProjectTabNoteModel obj)
        {
            var msg = new JMessage { Error = false };
            try
            {
                var data = _context.ProjectNotes.FirstOrDefault(x => x.Id == obj.Id);
                data.Title = obj.Title;
                data.Note = obj.Note;
                _context.ProjectNotes.Update(data);
                _context.SaveChanges();
                msg.Title = "Cập nhật thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteNote(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ProjectNotes.FirstOrDefault(x => x.Id == id);
                data.IsDeleted = true;
                _context.ProjectNotes.Update(data);
                _context.SaveChanges();
                msg.Error = false;
                msg.Title = "Xóa thành công";
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        //tab cardjob
        [HttpPost]
        public JsonResult GetListCarJobTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.CardMappings
                        join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                        where b.IsDeleted == false && a.ProjectCode.Equals(ProjectCode)
                        select b;
            var data = query.Select(x => new
            {
                x.CardID,
                x.CardCode,
                x.CardName,
                BeginTime = x.BeginTime != null ? x.BeginTime.ToString("dd/MM/yyyy") : "",
                EndTime = x.EndTime != null ? x.EndTime.Value.ToString("dd/MM/yyyy") : "",
                Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Status).ValueSet ?? "Đang chờ",
                x.Completed,
                x.Cost,
                x.LocationText,
                Quantitative = string.Concat(x.Quantitative, _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Unit).ValueSet ?? ""),
                ListName = _context.WORKOSLists.FirstOrDefault(y => y.ListCode == x.ListCode && y.IsDeleted == false).ListName ?? "",
                BoardName = _context.WORKOSBoards.FirstOrDefault(y => y.BoardCode == (_context.WORKOSLists.FirstOrDefault(z => z.ListCode == x.ListCode && z.IsDeleted == false).BoardCode ?? "")).BoardName ?? ""
            }).AsNoTracking();
            msg.Object = data;
            return Json(msg);
        }

        //tab request order
        [HttpPost]
        public JsonResult GetRqImpProduct()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.RequestImpProductHeaders.Where(x => !x.IsDeleted).Select(x => new { Code = x.ReqCode, Name = x.Title });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetObjectRelativeForProject()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Relative)).OrderBy(x => x.SettingID).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;
            return Json(msg);
        }

        public class MappingMainModel
        {
            public int Id { get; set; }
            public string ObjRootCode { get; set; }
            public string ObjRootType { get; set; }
            public string ObjType { get; set; }
            public string ObjCode { get; set; }
            public string ObjRelative { get; set; }
            public string ObjNote { get; set; }
            public string CreatedBy { get; set; }
            public DateTime? CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
        }

        [HttpPost]
        public JsonResult InsertRequestImportProduct(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.ObjRootCode == obj.ObjRootCode && x.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.RqPrice) && x.ObjCode == obj.ObjCode);
                if (checkExist == null)
                {
                    var data = new MappingMain()
                    {
                        ObjType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.RqPrice),
                        ObjRootType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project),
                        CreatedBy = obj.CreatedBy,
                        CreatedTime = DateTime.Now,
                        ObjCode = obj.ObjCode,
                        ObjRelative = obj.ObjRelative,
                        ObjNote = obj.ObjNote,
                        ObjRootCode = obj.ObjRootCode,
                    };
                    _context.MappingMains.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Lưu thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateRequestImportProduct(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.Id == obj.Id);
                if (checkExist != null)
                {
                    checkExist.ObjRelative = obj.ObjRelative;
                    checkExist.ObjNote = obj.ObjNote;
                    checkExist.UpdatedBy = obj.UpdatedBy;
                    checkExist.UpdatedTime = DateTime.Now;
                    _context.MappingMains.Update(checkExist);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListRQOderTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = (from a in _context.MappingMains
                         join b in _context.RequestImpProductHeaders on a.ObjCode equals b.ReqCode
                         join c in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals c.CusCode
                         join d in _context.Users.Where(x => x.Active) on b.CreatedBy equals d.UserName into d1
                         from d2 in d1.DefaultIfEmpty()
                         where a.ObjRootCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.RqPrice)
                         select new
                         {
                             a.Id,
                             a.ObjCode,
                             b.Title,
                             b.CusCode,
                             c.CusName,
                             CreatedBy = d2.GivenName,
                             CreatedTime = b.CreatedTime != null ? b.CreatedTime.ToString("dd/MM/yyyy") : "",
                             a.ObjRelative,
                             a.ObjNote
                         }).Union(
                from a in _context.MappingMains.Where(x => x.ObjRootType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.RqPrice))
                join b in _context.RequestImpProductHeaders on a.ObjRootCode equals b.ReqCode
                join c in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals c.CusCode
                join d in _context.Users.Where(x => x.Active) on b.CreatedBy equals d.UserName into d1
                from d2 in d1.DefaultIfEmpty()
                where a.ObjCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project)
                select new
                {
                    a.Id,
                    ObjCode = a.ObjRootCode,
                    b.Title,
                    b.CusCode,
                    c.CusName,
                    CreatedBy = d2.GivenName,
                    CreatedTime = b.CreatedTime != null ? b.CreatedTime.ToString("dd/MM/yyyy") : "",
                    a.ObjRelative,
                    a.ObjNote
                });
            msg.Object = query;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteRequestImportProduct(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.MappingMains.FirstOrDefault(x => x.Id == id);
                if (data != null)
                {
                    _context.MappingMains.Remove(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSEs";
            }
            return Json(msg);
        }

        //tab contract sale
        [HttpPost]
        public JsonResult GetContractSale()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.PoSaleHeaders.Where(x => !x.IsDeleted).Select(x => new { Code = x.ContractCode, Name = x.Title });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertContractSale(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.ObjRootCode == obj.ObjRootCode && x.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale) && x.ObjCode == obj.ObjCode);
                if (checkExist == null)
                {
                    var data = new MappingMain()
                    {
                        ObjType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale),
                        ObjRootType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project),
                        CreatedBy = obj.CreatedBy,
                        CreatedTime = DateTime.Now,
                        ObjCode = obj.ObjCode,
                        ObjRelative = obj.ObjRelative,
                        ObjNote = obj.ObjNote,
                        ObjRootCode = obj.ObjRootCode,
                    };
                    _context.MappingMains.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Lưu thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateContractSale(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.Id == obj.Id);
                if (checkExist != null)
                {
                    checkExist.ObjRelative = obj.ObjRelative;
                    checkExist.ObjNote = obj.ObjNote;
                    checkExist.UpdatedBy = obj.UpdatedBy;
                    checkExist.UpdatedTime = DateTime.Now;
                    _context.MappingMains.Update(checkExist);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteContractSale(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.MappingMains.FirstOrDefault(x => x.Id == id);
                if (data != null)
                {
                    _context.MappingMains.Remove(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListContractSaleTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = (from a in _context.MappingMains
                         join b in _context.PoSaleHeaders on a.ObjCode equals b.ContractCode
                         join c in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals c.CusCode
                         where a.ObjRootCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale)
                         select new
                         {
                             a.Id,
                             a.ObjCode,
                             c.CusName,
                             b.ContractNo,
                             EndDate = b.EndDate,
                             b.Title,
                             b.Budget,
                             b.BudgetExcludeTax,
                             b.ExchangeRate,
                             a.ObjRelative,
                             a.ObjNote
                         }).Union(
                from a in _context.MappingMains.Where(x => x.ObjRootType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoSale))
                join b in _context.PoSaleHeaders on a.ObjRootCode equals b.ContractCode
                join c in _context.Customerss.Where(x => !x.IsDeleted) on b.CusCode equals c.CusCode
                where a.ObjCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project)
                select new
                {
                    a.Id,
                    ObjCode = a.ObjRootCode,
                    c.CusName,
                    b.ContractNo,
                    EndDate = b.EndDate,
                    b.Title,
                    b.Budget,
                    b.BudgetExcludeTax,
                    b.ExchangeRate,
                    a.ObjRelative,
                    a.ObjNote
                });
            msg.Object = query;
            return Json(msg);
        }

        //tab contract PO
        [HttpPost]
        public JsonResult GetContractPO()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.PoBuyerHeaders.Where(x => !x.IsDeleted).Select(x => new { Code = x.PoSupCode, Name = x.PoTitle });
            msg.Object = data;
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertContractPO(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.ObjRootCode == obj.ObjRootCode && x.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoBuy) && x.ObjCode == obj.ObjCode);
                if (checkExist == null)
                {
                    var data = new MappingMain()
                    {
                        ObjType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoBuy),
                        ObjRootType = EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project),
                        CreatedBy = obj.CreatedBy,
                        CreatedTime = DateTime.Now,
                        ObjCode = obj.ObjCode,
                        ObjRelative = obj.ObjRelative,
                        ObjNote = obj.ObjNote,
                        ObjRootCode = obj.ObjRootCode,
                    };
                    _context.MappingMains.Add(data);
                    _context.SaveChanges();
                    msg.Title = "Lưu thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateContractPO(MappingMainModel obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var checkExist = _context.MappingMains.FirstOrDefault(x => x.Id == obj.Id);
                if (checkExist != null)
                {
                    checkExist.ObjRelative = obj.ObjRelative;
                    checkExist.ObjNote = obj.ObjNote;
                    checkExist.UpdatedBy = obj.UpdatedBy;
                    checkExist.UpdatedTime = DateTime.Now;
                    _context.MappingMains.Update(checkExist);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteContractPO(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.MappingMains.FirstOrDefault(x => x.Id == id);
                if (data != null)
                {
                    _context.MappingMains.Remove(data);
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi xảy ra";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListContractPOTable(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = (from a in _context.MappingMains
                         join b in _context.PoBuyerHeaderPayments on a.ObjCode equals b.PoSupCode
                         join c in _context.Suppliers.Where(x => !x.IsDeleted) on b.SupCode equals c.SupCode
                         where a.ObjRootCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoBuy)
                         select new
                         {
                             a.Id,
                             a.ObjCode,
                             b.Type,
                             b.OrderBy,
                             b.Consigner,
                             c.SupName,
                             CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                             a.ObjRelative,
                             a.ObjNote
                         }).Union(
                from a in _context.MappingMains.Where(x => x.ObjRootType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.PoBuy))
                join b in _context.PoBuyerHeaderPayments on a.ObjRootCode equals b.PoSupCode
                join c in _context.Suppliers.Where(x => !x.IsDeleted) on b.SupCode equals c.SupCode
                where a.ObjCode == ProjectCode && a.ObjType == EnumHelper<MappingEnum>.GetDisplayValue(MappingEnum.Project)
                select new
                {
                    a.Id,
                    ObjCode = a.ObjRootCode,
                    b.Type,
                    b.OrderBy,
                    b.Consigner,
                    c.SupName,
                    CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                    a.ObjRelative,
                    a.ObjNote
                });
            msg.Object = query;
            return Json(msg);
        }
        //tab attr
        [HttpPost]
        public JsonResult GetListAttribute()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.AttributeManagers.Where(x => !x.IsDeleted).Select(x => new { x.Code, x.Name, x.DataType, x.Unit });
            msg.Object = data;
            return Json(msg);
        }
        public class AttributeManagerGalaxyModel
        {
            public int Id { get; set; }
            public string ObjCode { get; set; }
            public string AttrCode { get; set; }
            public string AttrValue { get; set; }
            public string CreatedBy { get; set; }
            public string UpdatedBy { get; set; }
            public string DeletedBy { get; set; }
        }
        [HttpPost]
        public JsonResult InsertAttributeMore(AttributeManagerGalaxyModel obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var data = _context.AttributeManagerGalaxys.FirstOrDefault(x => x.ObjCode.Equals(obj.ObjCode) && x.AttrCode.Equals(obj.AttrCode) && x.AttrValue.Equals(obj.AttrValue) && !x.IsDeleted);
                if (data != null)
                {
                    msg.Error = true;
                    msg.Title = "HTML_PROJECT_MSG_DATA_HAVE";
                }
                else
                {
                    AttributeManagerGalaxy objNew = new AttributeManagerGalaxy();

                    objNew.ObjCode = obj.ObjCode;
                    objNew.AttrCode = obj.AttrCode;
                    objNew.AttrValue = obj.AttrValue;
                    objNew.CreatedTime = DateTime.Now;
                    objNew.CreatedBy = obj.CreatedBy;
                    objNew.IsDeleted = false;

                    _context.AttributeManagerGalaxys.Add(objNew);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Thêm thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateAttributeMore(AttributeManagerGalaxyModel obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var objNew = _context.AttributeManagerGalaxys.FirstOrDefault(x => x.ObjCode.Equals(obj.ObjCode) && x.AttrCode.Equals(obj.AttrCode) && !x.IsDeleted);
                if (objNew == null)
                {
                    msg.Error = true;
                    msg.Title = "DeleteItem_ITEM_NULL";
                }
                else
                {
                    objNew.AttrValue = obj.AttrValue;

                    objNew.UpdatedTime = DateTime.Now;
                    objNew.UpdatedBy = obj.UpdatedBy;
                    objNew.IsDeleted = false;

                    _context.AttributeManagerGalaxys.Update(objNew);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Cập nhật thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public object DeleteAttributeMore(int id, string user)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.AttributeManagerGalaxys.FirstOrDefault(x => x.Id == id);
                data.DeletedBy = user;
                data.DeletedTime = DateTime.Now;
                data.IsDeleted = true;
                _context.AttributeManagerGalaxys.Update(data);
                _context.SaveChanges();
                msg.Title = "Xóa thành công";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_CAR_MANA_MSG_SAVE_FALSE";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListAttributeManager(string ProjectCode)
        {
            var msg = new JMessage() { Error = false };
            var query = from a in _context.AttributeManagerGalaxys
                        join b in _context.AttributeManagers on a.AttrCode equals b.Code into b1
                        from b2 in b1.DefaultIfEmpty()
                        where (a.ObjCode == ProjectCode)
                        && a.IsDeleted == false
                        orderby a.Id descending
                        select new
                        {
                            a.Id,
                            a.AttrCode,
                            AttrName = b2 != null ? b2.Name : "",
                            a.AttrValue,
                            CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                            Unit = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)).ValueSet : "" : "",
                            Group = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)).ValueSet : "" : "",
                            DataType = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)).ValueSet : "" : "",
                            Parent = b2 != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Code.Equals(b2.Parent)) != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Parent.Equals(b2.Parent)).Name : "" : ""
                        };
            msg.Object = query;
            return Json(msg);
        }


        //tab payment
        public class ModelTabpayment
        {
            public string ProjectCode { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
        }

        [HttpPost]
        public JsonResult GetListPayment(ModelTabpayment obj)
        {
            var msg = new JMessage() { Error = false };
            var fromDate = !string.IsNullOrEmpty(obj.FromDate) ? DateTime.ParseExact(obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var toDate = !string.IsNullOrEmpty(obj.ToDate) ? DateTime.ParseExact(obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var query = from a in _context.FundAccEntrys
                                            .Where(x => !x.IsDeleted
                                            //&& x.IsPlan == false
                                                        && x.ObjType == "PROJECT"
                                                        && x.ObjCode == obj.ProjectCode
                                                        )
                        join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                        orderby a.CreatedTime descending
                        where (((fromDate == null) || (fromDate != null && a.DeadLine >= fromDate))
                        && ((toDate == null) || (toDate != null && a.DeadLine <= toDate)))
                        select new
                        {
                            CatName = b.CatName,
                            Id = a.Id,
                            AetCode = a.AetCode,
                            Title = a.Title,
                            AetType = a.AetType,
                            AetRelativeType = a.AetRelativeType,
                            AetDescription = a.AetDescription,
                            Total = a.Total,
                            Payer = a.Payer,
                            Currency = a.Currency,
                            Status = _context.FundAccEntryTrackings.Where(x => x.AetCode == a.AetCode).MaxBy(x => x.Id).Action,
                            Receiptter = a.Receiptter,
                            DeadLine = a.DeadLine != null ? a.DeadLine.Value.ToString("dd/MM/yyyy") : "",
                        };
            msg.Object = query;
            return Json(msg);
        }

        [HttpPost]
        public object DeletePayment(int id, string user)
        {
            var msg = new JMessage { Error = true };
            try
            {
                var data = _context.FundAccEntrys.FirstOrDefault(x => x.Id == id);

                //Nếu là phiếu cha thì thông báo không cho xóa => Xóa phiếu con trước
                var aetRelativeChild = _context.FundAccEntrys.Any(x => !x.IsDeleted && x.AetRelative == data.AetCode);
                if (aetRelativeChild)
                {
                    msg.Error = true;
                    msg.Title = "Xóa phiếu con trước khi xóa phiếu cha";
                    return Json(msg);
                }

                data.DeletedBy = user;
                data.DeletedTime = DateTime.Now;
                data.IsDeleted = true;
                _context.FundAccEntrys.Update(data);
                _context.SaveChanges();
                if (data.AetRelative != null)
                {
                    var obj = _context.FundAccEntrys.FirstOrDefault(x => x.IsDeleted == false && x.AetCode == data.AetRelative);
                    obj.IsCompleted = false;
                    _context.FundAccEntrys.Update(obj);
                    _context.SaveChanges();
                }

                msg.Error = false;
                msg.Title = "Xóa thành công";
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Xóa thất bại";
                return Json(msg);
            }
        }

        [HttpPost]
        public JsonResult GetListTotalPayment(ModelTabpayment obj)
        {
            var msg = new JMessage() { Error = false };
            var fromDate = !string.IsNullOrEmpty(obj.FromDate) ? DateTime.ParseExact(obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var toDate = !string.IsNullOrEmpty(obj.ToDate) ? DateTime.ParseExact(obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

            var query = from a in _context.FundAccEntrys
                                            .Where(x => !x.IsDeleted
                                                        && x.IsPlan == false
                                                        && x.ObjType == "PROJECT"
                                                        && x.ObjCode == obj.ProjectCode
                                                        && x.IsCompleted == true
                                                        )
                        join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                        orderby a.CreatedTime descending
                        where (((fromDate == null) || (fromDate != null && a.DeadLine >= fromDate))
                                && ((toDate == null) || (toDate != null && a.DeadLine <= toDate)))

                        select new
                        {
                            CatName = b.CatName,
                            Id = a.Id,
                            AetCode = a.AetCode,
                            Title = a.Title,
                            AetType = a.AetType,
                            AetRelativeType = a.AetRelativeType,
                            AetDescription = a.AetDescription,
                            Total = a.Total,
                            Payer = a.Payer,
                            Currency = a.Currency,
                            Status = a.Status,
                            Receiptter = a.Receiptter,
                            DeadLine = a.DeadLine
                        };

            var totalReceipts = query.Where(x => x.AetType == "Receipt").Sum(x => x.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate));
            var totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate));
            var rs = new
            {
                totalReceipts,
                totalExpense,
                totalMoney = totalReceipts - totalExpense
            };
            msg.Object = rs;
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTotalPaymentForContract(ModelTabpayment obj)
        {
            var msg = new JMessage() { Error = false };
            var fromDate = !string.IsNullOrEmpty(obj.FromDate) ? DateTime.ParseExact(obj.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
            var toDate = !string.IsNullOrEmpty(obj.ToDate) ? DateTime.ParseExact(obj.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

            var query = from a in _context.FundAccEntrys
                                            .Where(x => !x.IsDeleted
                                                        && x.IsPlan == false
                                                        && x.ObjType == "CONTRACT"
                                                        && x.ObjCode == obj.ProjectCode
                                                        && x.IsCompleted == true
                                                        )
                        join b in _context.FundCatReptExpss.Where(x => x.IsDeleted == false) on a.CatCode equals b.CatCode
                        orderby a.CreatedTime descending
                        where (((fromDate == null) || (fromDate != null && a.DeadLine >= fromDate))
                                && ((toDate == null) || (toDate != null && a.DeadLine <= toDate)))

                        select new
                        {
                            CatName = b.CatName,
                            Id = a.Id,
                            AetCode = a.AetCode,
                            Title = a.Title,
                            AetType = a.AetType,
                            AetRelativeType = a.AetRelativeType,
                            AetDescription = a.AetDescription,
                            Total = a.Total,
                            Payer = a.Payer,
                            Currency = a.Currency,
                            Status = a.Status,
                            Receiptter = a.Receiptter,
                            DeadLine = a.DeadLine
                        };

            var totalReceipts = query.Where(x => x.AetType == "Receipt").Sum(x => x.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate));
            var totalExpense = query.Where(x => x.AetType == "Expense").Sum(x => x.Total * (1 / (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals(x.Currency)).Rate)) * (_context.FundExchagRates.FirstOrDefault(z => z.IsDeleted == false && z.Currency.Equals("VND")).Rate));
            var rs = new
            {
                totalReceipts,
                totalExpense,
                totalMoney = totalReceipts - totalExpense
            };
            msg.Object = rs;
            return Json(msg);
        }
        #endregion

        #region hop dong bán
        public class ContactSupModel : JTableModel
        {
            public string Name { get; set; }
            public string DateFrom { get; set; }
            public string DateTo { get; set; }
            public string Phone { get; set; }
            public string Email { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public object GetListContactSup(ContactSupModel jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var dateFrom = !string.IsNullOrEmpty(jTablePara.DateFrom) ? DateTime.ParseExact(jTablePara.DateFrom, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var dateTo = !string.IsNullOrEmpty(jTablePara.DateTo) ? DateTime.ParseExact(jTablePara.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var query = from a in _context.Contacts
                            where (string.IsNullOrEmpty(jTablePara.Phone) || a.MobilePhone.ToLower().Contains(jTablePara.Phone.ToLower()))
                            && (string.IsNullOrEmpty(jTablePara.Email) || a.Email.ToLower().Contains(jTablePara.Email.ToLower()))
                            && (string.IsNullOrEmpty(jTablePara.Name) || a.ContactName.ToLower().Contains(jTablePara.Name.ToLower()))
                            && (dateFrom == null || (a.CreateTime.HasValue && a.CreateTime.Value.Date >= dateFrom))
                            && (dateTo == null || (a.CreateTime.HasValue && a.CreateTime.Value.Date <= dateTo))
                            && string.IsNullOrEmpty(a.CusCode)
                            && a.IsDeleted == false
                            select new
                            {
                                a.Id,
                                a.ContactName,
                                a.MobilePhone,
                                a.Email,
                                a.FilePath,
                                a.CreateTime
                            };
                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList();
                msg.Object = new
                {
                    data = query.OrderBy(x => x.Id).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                    count = query.Count(),
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region CMS
        public class JTableModelNewsCMS : JTableModel
        {
            public int CurrentPagePara { get; set; }

        }

        [HttpPost]
        public object GetListNewsCMS(JTableModelNewsCMS jTablePara)
        {

            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPagePara - 1) * jTablePara.Length;
                var query = from a in _context.cms_items.Where(x => x.published)
                            select new
                            {
                                id = a.id,
                                title = a.title,
                                cat_id = a.cat_id,
                                gallery = a.gallery,
                                created = a.created,
                                intro_text = a.intro_text,
                                full_text = a.full_text,
                            };
                var count = query.Count();
                var QueryOrderBy = "id DESC";
                msg.Object = new
                {
                    data = query.OrderUsingSortExpression(QueryOrderBy).Skip(intBeginFor).Take(jTablePara.Length).AsNoTracking().ToList(),
                    total = count
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return msg;
        }
        // danh mục thông báo chung
        [HttpPost]
        public object GetListCmsCategories()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = from a in _context.cms_categories
                             where a.published == true
                             select new
                             {
                                 cat_id = a.id,
                                 name = a.name,
                                 alias = a.alias,
                                 ordering = a.ordering,
                                 published = a.published,
                                 viewSelect = false,
                                 imgage = a.image
                             };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return msg;
        }
        //lấy danh sách bài viết thông báo chung
        [HttpPost]
        public object GetListCmsItem(int cat_id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = from a in _context.cms_items
                             join b in _context.cms_categories on a.cat_id equals b.id
                             where a.published == true && a.cat_id == cat_id

                             select new
                             {
                                 id = a.id,
                                 title = a.title,
                                 alias = a.alias,
                                 name = b.name,
                                 published = a.published,
                                 created = a.created,
                                 modified = a.modified,
                                 date_post = a.date_post,
                                 full_text = a.full_text,
                                 gallery = a.gallery,
                             };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return msg;
        }

        [HttpPost]
        public List<TreeViewEx> GetTreeCategoryData()
        {
            var data = _context.cms_categories.OrderBy(x => x.ordering).ThenBy(x => x.id).AsNoTracking();
            var dataOrder = GetSubTreeData(data.ToList(), null, new List<TreeViewEx>(), 0);
            return dataOrder;
        }

        private List<TreeViewEx> GetSubTreeData(List<cms_categories> data, int? Parent, List<TreeViewEx> lstCategories, int tab)
        {
            //tab += "- ";
            var contents = Parent == null
                ? data.Where(x => x.parent == null).OrderBy(x => x.ordering).ThenBy(x => x.id).AsParallel()
                : data.Where(x => x.parent == Parent).OrderBy(x => x.ordering).ThenBy(x => x.id).AsParallel();
            foreach (var item in contents)
            {
                var category = new TreeViewEx
                {
                    Id = item.id,
                    Code = item.name,
                    Title = item.name,
                    ParentId = item.parent,
                    Level = tab,
                    HasChild = data.Any(x => x.parent == item.id),
                    Image = item.image
                };
                lstCategories.Add(category);
                if (category.HasChild) GetSubTreeData(data, item.id, lstCategories, tab + 1);
            }
            return lstCategories;
        }
        #endregion

        #region Customer
        public class ReminderAtrrJtable : JTableModel
        {
            public string Title { get; set; }
            public string Note { get; set; }
            public int CurrentPageView { get; set; }
        }

        [HttpPost]
        public object GetListReminderAtrr(ReminderAtrrJtable jTablePara)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var query = from a in _context.ReminderAttrs
                            where (string.IsNullOrEmpty(jTablePara.Title) || (a.ReminderTitle.ToLower().Contains(jTablePara.Title.ToLower())))
                           && (string.IsNullOrEmpty(jTablePara.Note) || (a.Note.ToLower().Contains(jTablePara.Note.ToLower())))
                            select new
                            {
                                a.Id,
                                a.ReminderCode,
                                a.ReminderTitle,
                                a.Note,
                                a.CreatedBy,
                                a.CreatedTime
                            };
                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(jTablePara.Length).ToList();
                msg.Object = new
                {
                    count = count,
                    data = data
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetCustomerGroup()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.CustomerType)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;

            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetCustomerStatus()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.CustomerStatus)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;

            return Json(msg);
        }

        public class ModelCustomer : JTableModel
        {
            public string KeyWord { get; set; }
            public string Adress { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string Status { get; set; }
            public string CusType { get; set; }
            public string CashFrom { get; set; }
            public string CashTo { get; set; }
            public int CurrentPageView { get; set; }
        }

        [HttpPost]
        public JsonResult GetListCustomer(ModelCustomer model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromdate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var todate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (model.CurrentPageView - 1) * model.Length;
                var query = from a in _context.Customerss
                            where (a.IsDeleted == false)
                                && (string.IsNullOrEmpty(model.KeyWord) || a.Description.ToLower().Contains(model.KeyWord.ToLower()))
                                && (string.IsNullOrEmpty(model.Adress) || a.Address.ToLower().Contains(model.Adress.ToLower()))
                                && (string.IsNullOrEmpty(model.Status) || a.ActivityStatus.ToLower().Contains(model.Status.ToLower()))
                                && (string.IsNullOrEmpty(model.CusType) || a.CusType.ToLower().Contains(model.CusType.ToLower()))
                                //&& (string.IsNullOrEmpty(model.CashFrom) || a.ActivityStatus == model.CashFrom)
                                //&& (string.IsNullOrEmpty(model.CashTo) || a.CusGroup.ToLower() == model.CashTo.ToLower())
                                && (fromdate == null || (a.CreatedTime >= fromdate))
                                && (todate == null || (a.CreatedTime <= todate))
                            select new
                            {
                                Id = a.CusID,
                                Code = a.CusCode,
                                Name = a.CusName,
                                a.Email,
                                a.Address,
                                Phone = a.MobilePhone,
                                Group = a.CusGroup != null ? _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.CusGroup).ValueSet : "",
                                Status = a.ActivityStatus != null ? _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.ActivityStatus).ValueSet : "",
                            };
                var count = query.Count();
                var data = query.OrderBy(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();

                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        // details
        [HttpPost]
        public JsonResult GetDetailCustomer(int id, string userId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.Customerss.FirstOrDefault(x => x.CusID == id);
                msg.Object = _context.Customerss.Where(m => m.CusID == id).Select(a => new
                {
                    a.CusID,
                    a.CusCode,
                    a.CusName,
                    a.MobilePhone,
                    Area = a.Area != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<CommonEnum>.GetDisplayValue(CommonEnum.Area) && x.IsDeleted == false && x.CodeSet == a.Area).ValueSet : "",
                    CusGroup = a.CusGroup != null ? _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.CusGroup).ValueSet : "",
                    Role = a.Role != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.CustomerRole) && x.IsDeleted == false && x.CodeSet == a.Role).ValueSet : "",
                    CusType = a.CusType != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.CustomerType) && x.IsDeleted == false && x.CodeSet == a.CusType).ValueSet : "",
                    ActivityStatus = a.ActivityStatus != null ? _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.ActivityStatus).ValueSet : "",
                    a.Address,
                    a.AccountBank,
                    a.TaxCode,
                    a.AddressBank,
                    a.Identification,
                    a.Fax
                });
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        //get more
        [HttpPost]
        public JsonResult GetMoreCustomer(int CusId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var cusCode = _context.Customerss.FirstOrDefault(x => x.CusID == CusId).CusCode;
                var query1 = from a in _context.Contacts
                             where a.CusCode == cusCode && a.IsDeleted == false
                             select new
                             {
                                 id = a.Id,
                                 Name = a.ContactName,
                                 Email = a.Email,
                                 Address = a.Address,
                                 Telephone = a.Telephone,
                                 Phone1 = a.MobilePhone
                             };

                var query2 = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == cusCode && x.ObjectType == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.Customer))
                               join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                               join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                               from f in f1.DefaultIfEmpty()
                               select new
                               {
                                   a.Id,
                                   b.FileCode,
                                   b.FileName,
                                   b.FileTypePhysic,
                                   b.Desc,
                                   CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                   b.CloudFileId,
                                   TypeFile = "NO_SHARE",
                                   ReposName = f != null ? f.ReposName : "",
                                   Url = b.Url
                               }).Union(
                              from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == cusCode && x.ObjectType == EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.Customer))
                              join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                              join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                              from f in f1.DefaultIfEmpty()
                              select new
                              {
                                  Id = b.FileID,
                                  b.FileCode,
                                  b.FileName,
                                  b.FileTypePhysic,
                                  b.Desc,
                                  CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                  b.CloudFileId,
                                  TypeFile = "SHARE",
                                  ReposName = f != null ? f.ReposName : "",
                                  Url = b.Url
                              })).AsNoTracking();

                var query11 = from a in _context.PoSaleHeaders.Where(x => !x.IsDeleted && x.CusCode == cusCode)
                              join b in _context.Projects.Where(x => !x.FlagDeleted) on a.PrjCode equals b.ProjectCode
                              join c1 in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "CURRENCY_TYPE") on b.Currency equals c1.CodeSet into c2
                              from c in c2.DefaultIfEmpty()
                              select new
                              {
                                  Id = b.Id,
                                  ProjectCode = a.PrjCode,
                                  b.ProjectTitle,
                                  b.Budget,
                                  Currency = c != null ? c.ValueSet : "",
                                  b.StartTime,
                                  b.EndTime,
                                  SumBudget = 0,
                              };
                var query22 = from a in _context.ProjectCusSups.Where(x => !x.IsDeleted && x.ObjType == "CUSTOMER" && x.ObjCode == cusCode)
                              join b in _context.Projects.Where(x => !x.FlagDeleted) on a.ProjectCode equals b.ProjectCode
                              join c1 in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "CURRENCY_TYPE") on b.Currency equals c1.CodeSet into c2
                              from c in c2.DefaultIfEmpty()
                              select new
                              {
                                  b.Id,
                                  a.ProjectCode,
                                  b.ProjectTitle,
                                  b.Budget,
                                  Currency = c != null ? c.ValueSet : "",
                                  b.StartTime,
                                  b.EndTime,
                                  SumBudget = 0,
                              };

                var query3 = query22.Union(query11);

                int count = query3.Count();
                var sumBudget = query3.Sum(x => x.Budget);

                var query4 = query3.AsNoTracking()
                            .Select(x => new
                            {
                                x.Id,
                                x.ProjectCode,
                                x.ProjectTitle,
                                Budget = x.Budget + " VNĐ",
                                x.Currency,
                                StartTime = x.StartTime != null ? x.StartTime.ToString("dd/MM/yyyy") : "",
                                EndTime = x.EndTime != null ? x.EndTime.ToString("dd/MM/yyyy") : "",
                                SumBudget = sumBudget + " VNĐ",
                            }).ToList();
                msg.Object = new { Contact = query1, File = query2, Project = query4 };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }


        #endregion

        #region Thông tin cơ hội
        public class ModelOrderRequest : JTableModel
        {
            public string Title { get; set; }
            public string Content { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string Priority { get; set; }
            public int CurrentPageView { get; set; }
        }

        [HttpPost]
        public JsonResult GetListOrderRequest(ModelOrderRequest model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPageView - 1) * model.Length;
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = from a in _context.OrderRequestRaws
                            join b in _context.OrderRequestRawFiless on a.ReqCode equals b.ReqCode into b1
                            from b2 in b1.DefaultIfEmpty()
                            where b2.IsMaster
                             && ((fromDate == null) || (a.RequestTime.HasValue && a.RequestTime.Value.Date >= fromDate.Value.Date))
                            && ((toDate == null) || (a.RequestTime.HasValue && a.RequestTime.Value.Date <= toDate.Value.Date))
                            && (string.IsNullOrEmpty(model.Title) || a.Title.ToLower().Contains(model.Title.ToLower()))
                            && (string.IsNullOrEmpty(model.Content) || a.Content.ToLower().Contains(model.Content.ToLower()))
                            && (string.IsNullOrEmpty(model.Priority) || a.Priority == Int32.Parse(model.Priority))
                            select new
                            {
                                a.Id,
                                a.ReqCode,
                                a.Title,
                                a.Content,
                                a.Priority,
                                a.Email,
                                a.Phone,
                                a.RequestTime,
                                FilePath = b2.FilePath != null ? b2.FilePath : "/uploads/files/FileMasterDefault.xlsx",
                                FileType = b2.FileType != null ? b2.FileType : ".xlsx",
                                a.CreatedBy
                            };
                var data = query.Select(x => new
                {
                    x.Id,
                    x.Title,
                    x.Content,
                    x.Priority,
                    x.Email,
                    x.Phone,
                    RequestTime = x.RequestTime != null ? x.RequestTime.Value.ToString("dd/MM/yyyy") : "",
                    x.FilePath,
                    x.FileType,
                    IsFile = _context.OrderRequestRawFiless.FirstOrDefault(y => y.ReqCode == x.ReqCode) != null ? true : false,
                    CreatedBy = x.CreatedBy != null ? _context.Users.FirstOrDefault(y => y.UserName == x.CreatedBy).GivenName : "",
                });
                var data1 = data.OrderByDescending(x => x.Priority).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();
                var count = data1.Count();
                msg.Object = new { count, data1 };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailsOrderRequest(int id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.OrderRequestRaws.Where(m => m.Id == id).Select(a => new
                {
                    Id = a.Id,
                    Title = a.Title,
                    Content = a.Content,
                    Phone = a.Phone,
                    Email = a.Email,
                    Priority = a.Priority,
                    RequestTime = a.RequestTime != null ? a.RequestTime.Value.ToString("dd/MM/yyyy") : "",
                    Keyword = a.Keyword,
                });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetMoreCusOrderRequest(int id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var Code = _context.OrderRequestRaws.FirstOrDefault(x => x.Id == id).ReqCode;
                var query2 = (from a in _context.OrderRequestRawFiless
                              where a.ReqCode == Code
                              select new
                              {
                                  a.FileName,
                                  CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                  Url = a.FilePath
                              }).AsNoTracking();

                msg.Object = new { File = query2 };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region Contact Customer
        public class ModelContactCus : JTableModel
        {
            public string Name { get; set; }
            public string Adress { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string Phone { get; set; }
            public string Mail { get; set; }
            public string Keyword { get; set; }
            public int CurrentPageView { get; set; }
        }

        [HttpPost]
        public JsonResult GetListContactCus(ModelContactCus model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var dateFrom = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var dateTo = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (model.CurrentPageView - 1) * model.Length;
                var query = from a in _context.Contacts
                            where (string.IsNullOrEmpty(model.Phone) || a.MobilePhone.ToLower().Contains(model.Phone.ToLower()))
                            && (string.IsNullOrEmpty(model.Mail) || a.Email.ToLower().Contains(model.Mail.ToLower()))
                            && (string.IsNullOrEmpty(model.Keyword) || a.Note.ToLower().Contains(model.Keyword.ToLower()))
                            && (string.IsNullOrEmpty(model.Name) || a.ContactName.ToLower().Contains(model.Name.ToLower()))
                            && (dateFrom == null || (a.CreateTime.HasValue && a.CreateTime.Value.Date >= dateFrom))
                            && (dateTo == null || (a.CreateTime.HasValue && a.CreateTime.Value.Date <= dateTo))
                            && string.IsNullOrEmpty(a.SuppCode)
                            && a.IsDeleted == false
                            select new
                            {
                                a.Id,
                                a.ContactName,
                                a.MobilePhone,
                                a.Email,
                                a.FilePath,
                                a.Title,
                                CreateTime = a.CreateTime != null ? a.CreateTime.Value.ToString("dd/MM/yyyy") : "",
                            };
                var count = query.Count();
                var data = query.OrderBy(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();

                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailContactCus(int id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.Contacts.Where(m => m.Id == id).Select(a => new
                {
                    Id = a.Id,
                    ContactName = a.ContactName,
                    Email = a.Email,
                    Title = a.Title,
                    Address = a.Address,
                    Telephone = a.Telephone,
                    CusCode = a.CusCode != null ? _context.Customerss.FirstOrDefault(x => x.CusCode == a.CusCode).CusName : "",
                    MobilePhone = a.MobilePhone,
                    Fax = a.Fax,
                    Facebook = a.Facebook,
                    Note = a.Note,
                    FilePath = a.FilePath != null ? a.FilePath : "/uploads/images/uploadimg.png",
                });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region Customer Reminder
        [HttpPost]
        public JsonResult GetCusReminder()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.Customerss.Select(x => new
            {
                Id = x.CusID,
                Name = x.CusName
            });
            msg.Object = data;

            return Json(msg);
        }

        public class ModelCustomerReminde : JTableModel
        {
            public string Customer { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
        }

        [HttpPost]
        public JsonResult GetListCustomerReminder(ModelCustomerReminde model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                var today = DateTime.Today;
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                if (fromDate == null && toDate == null && model.Customer == null)
                {
                    fromDate = today;
                    toDate = today;
                }
                var query = from a in _context.CustomerReminders
                            where ((model.Customer == null) || (a.CustomerId == Int32.Parse(model.Customer)))
                            && ((fromDate == null) || (a.ReminderTime.HasValue && a.ReminderTime.HasValue && a.ReminderTime.Value.Date >= fromDate))
                            && ((toDate == null) || (a.ReminderTime.HasValue && a.ReminderTime.HasValue && a.ReminderTime.Value.Date <= toDate))
                            select new
                            {
                                a.Id,
                                ReminderName = _context.ReminderAttrs.FirstOrDefault(x => x.ReminderCode == a.ReminderCode).ReminderTitle ?? null,
                                ReminderTime = a.ReminderTime != null ? a.ReminderTime.Value.ToString("dd/MM/yyyy") : "",
                                a.Note,
                                CreatedBy = a.CreatedBy != null ? _context.Users.FirstOrDefault(x => x.UserName == a.CreatedBy).GivenName : "",
                                CreatedTime = a.CreatedTime != null ? a.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                CustomerName = _context.Customerss.FirstOrDefault(x => x.CusID == a.CustomerId).CusName ?? null,
                            };
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();
                var count = query.Count();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        #endregion

        #region Supplier
        [HttpPost]
        public JsonResult GetSupplierGroup()
        {
            var msg = new JMessage { Error = false, Title = "" };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.SupplierGroup)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = new { data };
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetSupplierStatus()
        {
            var msg = new JMessage { Error = false, Title = "" };
            var data = _context.CommonSettings.Where(x => x.Group == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.SupplierStatus)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = new { data };
            return Json(msg);
        }

        public class ModelSupplier : JTableModel
        {
            public string SupplierCode { get; set; }
            public string SupplierName { get; set; }
            public string SupplierEmail { get; set; }
            public string Address { get; set; }
            public string Phone { get; set; }
            public string SupplierGroup { get; set; }
            public string Status { get; set; }
        }

        [HttpPost]
        public JsonResult GetListSupplier(ModelSupplier model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                var query = from a in _context.Suppliers
                            where (a.IsDeleted == false)
                            && (string.IsNullOrEmpty(model.SupplierCode) || (a.SupCode.ToLower().Contains(model.SupplierCode.ToLower())))
                            && (string.IsNullOrEmpty(model.SupplierName) || (a.SupName.ToLower().Contains(model.SupplierName.ToLower())))
                            && (string.IsNullOrEmpty(model.SupplierEmail) || (a.Email.ToLower().Contains(model.SupplierEmail.ToLower())))
                            && (string.IsNullOrEmpty(model.Address) || (a.Address.ToLower().Contains(model.Address.ToLower())))
                            && (string.IsNullOrEmpty(model.Phone) || (a.Mobile.ToLower().Contains(model.Phone.ToLower())))
                            && (string.IsNullOrEmpty(model.SupplierGroup) || (a.SupGroup.Equals(model.SupplierGroup)))
                            && (string.IsNullOrEmpty(model.Status) || (a.Status.Equals(model.Status)))
                            select a;
                var data1 = query.Select(x => new
                {
                    Id = x.SupID,
                    Code = x.SupCode,
                    Name = x.SupName,
                    x.Email,
                    x.Address,
                    x.Telephone,
                    x.Mobile,
                    SupGroup = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.SupGroup).ValueSet ?? "",
                    Status = _context.CommonSettings.FirstOrDefault(y => y.CodeSet == x.Status).ValueSet ?? "",
                });
                var data = data1.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();
                var count = data1.Count();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailSupplier(int id, string userId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.Suppliers.FirstOrDefault(x => x.SupID == id);
                data.ListUserView += ";" + userId;
                msg.Object = _context.Suppliers.Where(m => m.SupID == id).Select(a => new
                {
                    a.SupID,
                    a.SupCode,
                    a.SupName,
                    a.Mobile,
                    Area = a.Area != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<CommonEnum>.GetDisplayValue(CommonEnum.Area) && x.IsDeleted == false && x.CodeSet == a.Area).ValueSet : "",
                    SupGroup = a.SupGroup != null ? _context.CommonSettings.FirstOrDefault(y => y.CodeSet == a.SupGroup).ValueSet : "",
                    Role = a.Role != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.SupplierRole) && x.IsDeleted == false && x.CodeSet == a.Role).ValueSet : "",
                    CusType = a.CusType != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.SupplierType) && x.IsDeleted == false && x.CodeSet == a.CusType).ValueSet : "",
                    Status = a.Status != null ? _context.CommonSettings.FirstOrDefault(x => x.Group == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.SupplierStatus) && x.IsDeleted == false && x.CodeSet == a.CusType).ValueSet : "",
                    a.Address,
                    a.AccountBank,
                    a.TaxCode,
                    a.AddressBank,
                    a.Identification,
                    a.Fax
                });
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetMoreSupplier(int Id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var supplierCode = _context.Suppliers.FirstOrDefault(x => x.SupID == Id).SupCode;
                var query1 = (from a in _context.Contacts
                              where a.SuppCode == supplierCode
                              && a.IsDeleted == false
                              select new
                              {
                                  id = a.Id,
                                  Name = a.ContactName,
                                  Email = a.Email,
                                  Address = a.Address,
                                  contactTelephone = a.Telephone,
                                  Phone1 = a.MobilePhone,
                              }).ToList();

                var query2 = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == supplierCode && x.ObjectType == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.Supplier))
                               join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                               join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                               from f in f1.DefaultIfEmpty()
                               select new
                               {
                                   a.Id,
                                   b.FileCode,
                                   b.FileName,
                                   b.FileTypePhysic,
                                   b.Desc,
                                   CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                   b.CloudFileId,
                                   TypeFile = "NO_SHARE",
                                   ReposName = f != null ? f.ReposName : "",
                                   Url = b.Url
                               }).Union(
                              from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == supplierCode && x.ObjectType == EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.Supplier))
                              join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                              join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                              from f in f1.DefaultIfEmpty()
                              select new
                              {
                                  Id = b.FileID,
                                  b.FileCode,
                                  b.FileName,
                                  b.FileTypePhysic,
                                  b.Desc,
                                  CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                                  b.CloudFileId,
                                  TypeFile = "SHARE",
                                  ReposName = f != null ? f.ReposName : "",
                                  Url = b.Url
                              })).AsNoTracking().ToList(); ;

                var query11 = from a in _context.ProjectCusSups.Where(x => !x.IsDeleted && x.ObjType == "SUPPLIER" && x.ObjCode == supplierCode)
                              join b in _context.Projects.Where(x => !x.FlagDeleted) on a.ProjectCode equals b.ProjectCode
                              join c1 in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "CURRENCY_TYPE") on b.Currency equals c1.CodeSet into c2
                              from c in c2.DefaultIfEmpty()
                              select new
                              {
                                  b.Id,
                                  a.ProjectCode,
                                  b.ProjectTitle,
                                  b.Budget,
                                  Currency = c != null ? c.ValueSet : "",
                                  StartTime = b.StartTime != null ? b.StartTime.ToString("dd/MM/yyyy") : "",
                                  EndTime = b.EndTime != null ? b.EndTime.ToString("dd/MM/yyyy") : "",
                                  SumBudget = 0,
                              };
                var sumBudget = query11.Sum(x => x.Budget);

                var query3 = query11.AsNoTracking()
                            .Select(x => new
                            {
                                x.Id,
                                x.ProjectCode,
                                x.ProjectTitle,
                                Budget = x.Budget + " VNĐ",
                                x.Currency,
                                x.StartTime,
                                x.EndTime,
                                SumBudget = sumBudget + " VNĐ",
                            }).ToList();

                msg.Object = new { Contact = query1, File = query2, Project = query3 };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region thông báo
        [HttpPost]
        public object GetCountNotification(string userId)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var today = DateTime.Today;
                var projects = _context.Projects.Where(x => !x.FlagDeleted);
                var countProjects = 0;
                foreach (var item in projects)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countProjects += 1;
                        }
                    }
                    else
                    {
                        countProjects += 1;
                    }
                }
                var contract = _context.PoSaleHeaders.Where(x => !x.IsDeleted);
                var countContract = 0;
                foreach (var item in contract)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countContract += 1;
                        }
                    }
                    else
                    {
                        countContract += 1;
                    }
                }
                var contractPo = _context.PoBuyerHeaders.Where(x => !x.IsDeleted);
                var countContractPo = 0;
                foreach (var item in contractPo)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countContractPo += 1;
                        }
                    }
                    else
                    {
                        countContractPo += 1;
                    }
                }
                var supplier = _context.Suppliers.Where(x => !x.IsDeleted);
                var countSupplier = 0;
                foreach (var item in supplier)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countSupplier += 1;
                        }
                    }
                    else
                    {
                        countSupplier += 1;
                    }
                }
                var customer = _context.Customerss.Where(x => !x.IsDeleted);
                var countCustomer = 0;
                foreach (var item in customer)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countCustomer += 1;
                        }
                    }
                    else
                    {
                        countCustomer += 1;
                    }
                }
                var cmsItem = from a in _context.cms_items
                              join b in _context.cms_categories on a.cat_id equals b.id
                              where a.date_post.Value.Date == today && a.published == true && b.published == true
                              select new
                              {
                                  a.id,
                                  a.ListUserView,
                              };
                var countItem = 0;
                foreach (var item in cmsItem)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countItem += 1;
                        }
                    }
                    else
                    {
                        countItem += 1;
                    }
                }
                var workOSCards = (from a in _context.CardMappings
                                   join b in _context.WORKOSCards on a.CardCode equals b.CardCode
                                   join c in _context.WORKOSLists on a.ListCode equals c.ListCode
                                   join d in _context.CommonSettings on b.Status equals d.CodeSet into d1
                                   from d in d1.DefaultIfEmpty()
                                   let lt = !string.IsNullOrEmpty(b.LstUser) ? b.LstUser.Split(",", StringSplitOptions.None) : new string[0]
                                   where (lt.Any(x => x == userId)) && b.IsDeleted == false && b.Status != "TRASH"
                                   select new
                                   {
                                       b.CardID,
                                       b.ListUserView
                                   }).DistinctBy(x => x.CardID);
                var countCard = 0;
                foreach (var item in workOSCards)
                {
                    if (!string.IsNullOrEmpty(item.ListUserView))
                    {
                        if (!item.ListUserView.Contains(userId))
                        {
                            countCard += 1;
                        }
                    }
                    else
                    {
                        countCard += 1;
                    }
                }
                msg.Object = new
                {
                    countProjects = countProjects,
                    countContract = countContract,
                    countContractPo = countContractPo,
                    countSupplier = countSupplier,
                    countCustomer = countCustomer,
                    countItem = countItem,
                    countCard = countCard,
                };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region kho du lieu so hoa
        //dnh sách danh muc
        [HttpPost]
        public List<TreeViewResource> GetTreeCategory()
        {
            var data = _context.EDMSCategorys.Where(x => x.IsDeleted == false).OrderByDescending(x => x.Id).AsNoTracking();
            var dataOrder = GetSubTreeCategoryData(data.ToList(), null, new List<TreeViewResource>(), 0, 2);
            return dataOrder;
        }
        [NonAction]
        private List<TreeViewResource> GetSubTreeCategoryData(List<EDMSCategory> data, string parentid, List<TreeViewResource> lstCategories, int tab, int typeOrder)
        {
            //tab += "- ";
            var contents = string.IsNullOrEmpty(parentid)
                ? (typeOrder == 1 ? data.Where(x => x.CatParent == "#").OrderBy(x => x.Id).AsParallel() : data.Where(x => x.CatParent == "#").OrderByDescending(x => x.Id).AsParallel())
                : data.Where(x => x.CatParent == parentid).OrderByDescending(x => x.Id).AsParallel();
            foreach (var item in contents)
            {
                var category = new TreeViewResource
                {
                    CateRepoSettingId = _context.EDMSCatRepoSettings.LastOrDefault(x => x.CatCode == item.CatCode).Id.ToString(),
                    Id = item.Id,
                    Code = item.CatCode,
                    Title = item.CatName,
                    Level = tab,
                    HasChild = data.Any(x => x.CatParent == item.CatCode),
                    ParentCode = item.CatParent,
                };
                lstCategories.Add(category);
                if (category.HasChild) GetSubTreeCategoryData(data, item.CatCode, lstCategories, tab + 1, 1);
            }
            return lstCategories;
        }
        public class SearchFileModel
        {
            public string CatCode { get; set; }
            public string ObjectType { get; set; }
            public string ObjectCode { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string FileName { get; set; }
            public int FileType { get; set; }
            public string Content { get; set; }
            public string UserUpload { get; set; }
            public string KeySearch { get; set; }
            public int Count { get; set; }
        }
        [HttpPost]
        public object GetListFile(SearchFileModel data)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var listType = new string[] { };
                if (data.FileType == 1)
                {
                    listType = new string[] { ".jpg", ".png", ".tif", ".tiff" };
                }
                else if (data.FileType == 2)
                {
                    listType = new string[] { ".docx", ".doc" };
                }
                else if (data.FileType == 3)
                {
                    listType = new string[] { ".xlsm", ".xlsx", ".xlsb", ".xltx", ".xltm", ".xls", ".xlt", ".xls", ".xml", ".xml", ".xlam", ".xla", ".xlw", ".xlr" };
                }
                else if (data.FileType == 4)
                {
                    listType = new string[] { ".pps", "ppt", ".pptx" };
                }
                else if (data.FileType == 5)
                {
                    listType = new string[] { ".pdf" };
                }
                else if (data.FileType == 6)
                {
                    listType = new string[] { ".txt" };
                }
                var fromDate = !string.IsNullOrEmpty(data.FromDate) ? DateTime.ParseExact(data.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(data.ToDate) ? DateTime.ParseExact(data.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                if (!string.IsNullOrEmpty(data.Content))
                {
                    var queryLucene = SearchLuceneFile(data.Content, 1, data.Count);
                    msg.Object = (from c in queryLucene.listLucene
                                  join a in _context.EDMSFiles.Where(x => !x.IsDeleted && (x.IsFileMaster == null || x.IsFileMaster == true)) on c.FileCode equals a.FileCode
                                  join b in _context.EDMSRepoCatFiles on a.FileCode equals b.FileCode
                                  join d in _context.EDMSRepositorys on a.ReposCode equals d.ReposCode into d2
                                  from d in d2.DefaultIfEmpty()
                                  where ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
                                         && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate))
                                         && (string.IsNullOrEmpty(data.FileName) || (!string.IsNullOrEmpty(a.FileName) && a.FileName.ToLower().Contains(data.FileName.ToLower())))
                                         && (string.IsNullOrEmpty(data.KeySearch) || (!string.IsNullOrEmpty(a.Tags) && a.Tags.ToLower().Contains(data.KeySearch.ToLower())))
                                         && (listType.Length == 0 || (listType.Any(x => x.ToLower() == a.FileTypePhysic.ToLower())))
                                         && (string.IsNullOrEmpty(data.ObjectType) || (data.ObjectType == EnumHelper<All>.GetDisplayValue(All.All)) || b.ObjectType == data.ObjectType)
                                         && (string.IsNullOrEmpty(data.ObjectCode) || b.ObjectCode == data.ObjectCode)
                                         && (string.IsNullOrEmpty(data.UserUpload) || (a.CreatedBy == data.UserUpload))
                                         && (string.IsNullOrEmpty(data.CatCode) || (b.CatCode == data.CatCode))
                                  select new
                                  {
                                      b.Id,
                                      a.FileID,
                                      a.FileCode,
                                      a.FileName,
                                      a.FileTypePhysic,
                                      a.CreatedBy,
                                      a.CreatedTime,
                                      a.Tags,
                                      a.Url,
                                      a.MimeType,
                                      ReposName = d != null ? d.ReposName : "",
                                      a.CloudFileId,
                                      ServerAddress = d != null ? d.Server : "",
                                      Category = b != null ? b.CatCode : "",
                                      a.FileSize,
                                      SizeOfFile = a.FileSize.HasValue ? a.FileSize.Value : 0,
                                  });
                }
                else
                {
                    msg.Object = (from a in _context.EDMSFiles.Where(x => !x.IsDeleted && (x.IsFileMaster == null || x.IsFileMaster == true))
                                  join b in _context.EDMSRepoCatFiles on a.FileCode equals b.FileCode
                                  join d in _context.EDMSRepositorys on a.ReposCode equals d.ReposCode into d2
                                  from d in d2.DefaultIfEmpty()
                                  where ((fromDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date >= fromDate))
                                         && ((toDate == null) || (a.CreatedTime.HasValue && a.CreatedTime.Value.Date <= toDate))
                                         && (string.IsNullOrEmpty(data.FileName) || (!string.IsNullOrEmpty(a.FileName) && a.FileName.ToLower().Contains(data.FileName.ToLower())))
                                         && (string.IsNullOrEmpty(data.KeySearch) || (!string.IsNullOrEmpty(a.Tags) && a.Tags.ToLower().Contains(data.KeySearch.ToLower())))
                                         && (listType.Length == 0 || (listType.Any(x => x.ToLower() == a.FileTypePhysic.ToLower())))
                                         && (string.IsNullOrEmpty(data.ObjectType) || (data.ObjectType == EnumHelper<All>.GetDisplayValue(All.All)) || b.ObjectType == data.ObjectType)
                                         && (string.IsNullOrEmpty(data.ObjectCode) || b.ObjectCode == data.ObjectCode)
                                         && (string.IsNullOrEmpty(data.UserUpload) || (a.CreatedBy == data.UserUpload))
                                          && (string.IsNullOrEmpty(data.CatCode) || (b.CatCode == data.CatCode))
                                  select new
                                  {
                                      b.Id,
                                      a.FileID,
                                      a.FileCode,
                                      a.FileName,
                                      a.FileTypePhysic,
                                      a.CreatedBy,
                                      a.CreatedTime,
                                      a.Tags,
                                      a.Url,
                                      a.MimeType,
                                      ReposName = d != null ? d.ReposName : "",
                                      a.CloudFileId,
                                      ServerAddress = d != null ? d.Server : "",
                                      Category = b != null ? b.CatCode : "",
                                      a.FileSize,
                                      SizeOfFile = a.FileSize.HasValue ? a.FileSize.Value : 0,
                                  });
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [NonAction]
        private (IEnumerable<EDMSJtableFileModel> listLucene, int total) SearchLuceneFile(string content, int page, int length)
        {
            try
            {
                return LuceneExtension.SearchHighligh(content, _hostingEnvironment.WebRootPath + "\\uploads\\luceneIndex", page, length, "Content");
            }
            catch (Exception ex)
            {
                return (new List<EDMSJtableFileModel>(), 0);
            }
        }
        [HttpPost]
        public object GetUsers()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = from a in _context.Users
                             where a.Active
                             select new
                             {
                                 UserName = a.UserName,
                                 Name = a.GivenName
                             };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetObjectsType()
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var list = new List<Properties>();
                var all = new Properties
                {
                    Code = EnumHelper<All>.GetDisplayValue(All.All),
                    Name = All.All.DescriptionAttr()
                };
                list.Add(all);

                var project = new Properties
                {
                    Code = EnumHelper<ProjectEnum>.GetDisplayValue(ProjectEnum.Project),
                    Name = ProjectEnum.Project.DescriptionAttr()
                };
                list.Add(project);

                var contract = new Properties
                {
                    Code = EnumHelper<ContractEnum>.GetDisplayValue(ContractEnum.Contract),
                    Name = ContractEnum.Contract.DescriptionAttr()
                };
                list.Add(contract);

                var Customer = new Properties
                {
                    Code = EnumHelper<CustomerEnum>.GetDisplayValue(CustomerEnum.Customer),
                    Name = CustomerEnum.Customer.DescriptionAttr()
                };
                list.Add(Customer);

                var Supplier = new Properties
                {
                    Code = EnumHelper<SupplierEnum>.GetDisplayValue(SupplierEnum.Supplier),
                    Name = SupplierEnum.Supplier.DescriptionAttr()
                };
                list.Add(Supplier);
                msg.Object = list;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetListObject(string objectType)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                msg.Object = (from a in _context.VAllObjects
                              where (string.IsNullOrEmpty(objectType) || (objectType == EnumHelper<All>.GetDisplayValue(All.All)) || a.ObjectType == objectType)
                              select a).AsNoTracking();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        [HttpPost]
        [RequestFormLimits(MultipartBodyLengthLimit = long.MaxValue)]
        [RequestSizeLimit(long.MaxValue)]
        public JsonResult InsertFile(EDMSRepoCatFileModel obj, IFormFile fileUpload)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var mimeType = fileUpload.ContentType;
                //string extension = Path.GetExtension(fileUpload.FileName);
                string urlFile = "";
                string fileId = "";
                var fileName = Path.GetFileName(fileUpload.FileName);
                var extension = Path.GetExtension(fileName);
                fileName = Path.GetFileNameWithoutExtension(fileName);
                var fileSize = fileUpload.Length;
                if ((fileSize / 1048576.0) > 28)
                {
                    msg.Error = true;
                    msg.Title = "Dung lượng file lớn hơn 28 MB";
                    return Json(msg);
                }

                if (Array.IndexOf(LuceneExtension.fileMimetypes, mimeType) >= 0 && (Array.IndexOf(LuceneExtension.fileExt, extension.ToUpper()) >= 0))
                {
                    string reposCode = "";
                    string catCode = "";
                    string path = "";
                    string folderId = "";

                    var setting = _context.EDMSCatRepoSettings.FirstOrDefault(x => x.Id == obj.CateRepoSettingId);
                    if (setting != null)
                    {
                        reposCode = setting.ReposCode;
                        path = setting.Path;
                        folderId = setting.FolderId;
                        catCode = setting.CatCode;
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Vui lòng chọn thư mục lưu trữ!";
                        return Json(msg);
                    }

                    var getRepository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == reposCode);
                    if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.Server))
                    {
                        using (var ms = new MemoryStream())
                        {
                            fileUpload.CopyTo(ms);
                            var fileBytes = ms.ToArray();
                            urlFile = path + Path.Combine("/", fileUpload.FileName);
                            var urlFilePreventive = path + Path.Combine("/", Guid.NewGuid().ToString().Substring(0, 8) + fileUpload.FileName);
                            var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFile);
                            var urlEndPreventive = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFilePreventive);
                            var result = FileExtensions.UploadFileToFtpServer(urlEnd, urlEndPreventive, fileBytes, getRepository.Account, getRepository.PassWord);
                            if (result.Status == WebExceptionStatus.ConnectFailure || result.Status == WebExceptionStatus.ProtocolError)
                            {
                                msg.Error = true;
                                msg.Title = "Kết nối server không thành công";
                                return Json(msg);
                            }
                            else if (result.Status == WebExceptionStatus.Success)
                            {
                                if (result.IsSaveUrlPreventive)
                                {
                                    urlFile = urlFilePreventive;
                                }
                            }
                            else
                            {
                                msg.Error = true;
                                msg.Title = "Định dạng không hợp lệ !";
                                return Json(msg);
                            }
                        }
                    }
                    else if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.GooglerDriver))
                    {
                        fileId = FileExtensions.UploadFileToDrive(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", fileUpload.FileName, fileUpload.OpenReadStream(), fileUpload.ContentType, folderId);
                    }
                    var edmsReposCatFile = new EDMSRepoCatFile
                    {
                        FileCode = string.Concat("REPOSITORY", Guid.NewGuid().ToString()),
                        ReposCode = reposCode,
                        CatCode = catCode,
                        ObjectCode = null,
                        ObjectType = null,
                        Path = path,
                        FolderId = folderId
                    };
                    _context.EDMSRepoCatFiles.Add(edmsReposCatFile);

                    /// created Index lucene
                    if (!extension.ToUpper().Equals(".ZIP") && !extension.ToUpper().Equals(".RAR"))
                    {
                        LuceneExtension.IndexFile(edmsReposCatFile.FileCode, fileUpload, string.Concat(_hostingEnvironment.WebRootPath, "\\uploads\\luceneIndex"));
                    }
                    //add File
                    var file = new EDMSFile
                    {
                        FileCode = edmsReposCatFile.FileCode,
                        FileName = fileUpload.FileName,
                        Desc = obj.Desc,
                        ReposCode = reposCode,
                        Tags = obj.Tags,
                        FileSize = fileUpload.Length,
                        FileTypePhysic = Path.GetExtension(fileUpload.FileName),
                        NumberDocument = obj.NumberDocument,
                        CreatedBy = ESEIM.AppContext.UserName,
                        CreatedTime = DateTime.Now,
                        Url = urlFile,
                        MimeType = mimeType,
                        CloudFileId = fileId,
                    };
                    _context.EDMSFiles.Add(file);

                    _context.SaveChanges();
                    msg.Title = "Thêm mới tệp tin thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Định dạng không hợp lệ !";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Định dạng không hợp lệ !";
            }
            return Json(msg);
        }
        #endregion

        #region zoom
        [HttpPost]
        public JsonResult GetListZoom(string userName)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                //msg.Object = from a in _context.ZoomManages.Where(x => !x.IsDeleted)
                //             join b in _context.Users.Where(x => x.Active) on a.CreatedBy equals b.UserName
                //             select new
                //             {
                //                 RoomID = a.ZoomId,
                //                 RoomName = a.ZoomName,
                //                 RoomPassWord = a.ZoomPassword,
                //                 GivenName = b.GivenName,
                //                 CreatedBy = a.CreatedBy,
                //                 CreatedTime = a.CreatedTime
                //             };
                msg.Object = (from a in _context.ZoomManages.Where(x => !x.IsDeleted)
                              join b in _context.Users.Where(x => x.Active) on a.CreatedBy equals b.UserName
                              orderby a.Id
                              select new
                              {
                                  RoomID = a.ZoomId,
                                  RoomName = a.ZoomName,
                                  RoomPassWord = a.ZoomPassword,
                                  GivenName = b.GivenName,
                                  CreatedBy = a.CreatedBy,
                                  CreatedTime = a.CreatedTime,
                                  Role = userName.Equals(a.CreatedBy) ? 10 : 0,
                                  Group = a.Group,
                                  AccountZoom = a.AccountZoom,
                                  ListUserAccess = a.ListUserAccess,
                                  IsEdit = userName.Equals(a.AccountZoom) ? true : false,
                              });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        public class UserJoinMeeting
        {
            public string UserId { get; set; }
            public string UserName { get; set; }
            public string GivenName { get; set; }
        }
        [HttpPost]
        public object JoinMeeting(string meetingID, string userName)
        {
            var msg = new JMessage { };
            if (string.IsNullOrEmpty(meetingID))
            {
                msg.Error = true;
                msg.Title = "Thông tin cuộc họp trống";
                return msg;
            }
            else
            {
                var check = _context.ZoomManages.FirstOrDefault(x => !string.IsNullOrEmpty(x.ListUserAccess) && !x.IsDeleted && x.ZoomId.Equals(meetingID));
                if (check != null)
                {
                    var listUserAccess = JsonConvert.DeserializeObject<List<UserJoinMeeting>>(check.ListUserAccess);
                    if (listUserAccess.Any(x => x.UserName.Equals(userName) || x.UserName.Equals("ALL")) || check.CreatedBy.Equals(userName))
                    {
                        msg.Error = false;
                    }
                    else
                    {
                        msg.Error = true;
                        msg.Title = "Bạn không được quyền tham gia cuộc họp cuộc họp";
                        return msg;
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không lấy được thông tin cuộc họp";
                    return msg;
                }
                return msg;
            }
        }
        public class ZoomRequest
        {
            public string Token { get; set; }
            public string Data { get; set; }
            public string Email { get; set; }
            public string ListUserMeeting { get; set; }
            public string RoomID { get; set; }
            public string CreateBy { get; set; }

        }
        [HttpPost]
        public object CreateZoom(ZoomRequest obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var check = _context.ApiGoogleServices.FirstOrDefault(x => x.Description.Equals(obj.Email) && x.Group.Equals(EnumHelper<GroupApi>.GetDisplayValue(GroupApi.Zoom)));
                if (check == null)
                {
                    msg.Error = true;
                    msg.Title = "Tài khoản không được phép tạo meeting";
                }

                msg = CommonUtil.CreateMeeting(check.Token, obj.Data, check.UserId);
                if (!msg.Error)
                {
                    if (check != null)
                    {
                        var zoomOld = _context.ZoomManages.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.AccountZoom) && x.AccountZoom.Equals(check.Description));
                        foreach (var item in zoomOld)
                        {
                            item.IsDeleted = true;
                            _context.ZoomManages.Update(item);
                        }

                        var stringObj = JsonConvert.SerializeObject(msg.Object);
                        var rs = JsonConvert.DeserializeObject<ResponseZoom>(stringObj);
                        var zoom = new ZoomManage
                        {
                            ZoomId = rs.id.ToString(),
                            AccountZoom = check.Description,
                            ZoomName = rs.topic,
                            ZoomPassword = rs.password,
                            CreatedBy = obj.CreateBy,
                            CreatedTime = DateTime.Now,
                            Group = check.UserRole,
                            ListUserAccess = obj.ListUserMeeting
                        };

                        _context.ZoomManages.Add(zoom);
                        _context.SaveChanges();
                        msg.Title = "Tạo meeting thành công";
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm mới!";
            }
            return Json(msg);
        }
        [HttpPost]
        public object EditMeeting(ZoomRequest obj)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var check = _context.ApiGoogleServices.FirstOrDefault(x => x.Description.Equals(obj.Email) && x.Group.Equals(EnumHelper<GroupApi>.GetDisplayValue(GroupApi.Zoom)));
                if (check == null)
                {
                    msg.Error = true;
                    msg.Title = "Tài khoản không được phép sửa meeting";
                    return Json(msg);
                }

                var zoom = _context.ZoomManages.FirstOrDefault(x => !x.IsDeleted && x.ZoomId.Equals(obj.RoomID));
                if (zoom != null)
                {
                    zoom.ListUserAccess = obj.ListUserMeeting;
                    _context.ZoomManages.Update(zoom);
                    _context.SaveChanges();
                    msg.Title = "Sửa meeting thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy meeting";
                    return Json(msg);
                }

                return Json(msg);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
                msg.Object = ex;
                return Json(msg);
            }
        }
        [HttpPost]
        public JsonResult InsertZoom(ZoomManage obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                obj.CreatedTime = DateTime.Now;
                _context.ZoomManages.Add(obj);
                _context.SaveChanges();
                msg.Title = "Thêm mới thành công!";
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm mới!";
            }
            return Json(msg);
        }


        [HttpPost]
        public JsonResult UpdateZoom(ZoomManage obj)
        {
            var message = new JMessage { Error = false, Title = "" };
            try
            {
                //check exist code
                var checkExist = _context.ZoomManages.FirstOrDefault(x => x.Id == obj.Id);
                if (checkExist == null)
                {
                    message.Error = true;
                    message.Title = "Có lỗi khi cập nhập!";
                }
                else
                {
                    obj.UpdatedBy = ESEIM.AppContext.UserName;
                    obj.UpdatedTime = DateTime.Now;
                    _context.ZoomManages.Update(obj);
                    _context.SaveChanges();
                    message.Title = "Cập nhập thành công!";
                }
            }
            catch (Exception ex)
            {
                message.Error = true;
                message.Title = "Có lỗi khi cập nhập!";
            }
            return Json(message);
        }


        [HttpPost]
        public JsonResult DeleteZoom(int id)
        {
            var mess = new JMessage { Error = false, Title = "" };
            try
            {
                var zoomManage = _context.ZoomManages.FirstOrDefault(x => x.Id == id);
                if (zoomManage != null)
                {
                    zoomManage.DeletedBy = ESEIM.AppContext.UserName;
                    zoomManage.DeletedTime = DateTime.Now;
                    zoomManage.IsDeleted = true;
                    _context.ZoomManages.Update(zoomManage);
                    _context.SaveChanges();
                    mess.Title = "Xóa thành công!";
                }
                else
                {
                    mess.Error = true;
                    mess.Title = "Có lỗi khi xóa!";
                }

            }
            catch (Exception ex)
            {
                mess.Title = "Có lỗi khi xóa!";
                mess.Error = true;
            }
            return Json(mess);
        }
        #endregion

        #region Tài sản
        [HttpPost]
        public JsonResult GetListAssetScan(string keySearch)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = from a in _context.AssetMains
                             join b in _context.Suppliers on a.SupplierCode equals b.SupCode into b1
                             from b2 in b1.DefaultIfEmpty()
                             join c in _context.AssetTypes.Where(x => !x.IsDeleted) on a.AssetType equals c.CatCode into c1
                             from c2 in c1.DefaultIfEmpty()
                             join d in _context.AssetGroups on a.AssetGroup equals d.Code into d1
                             from d2 in d1.DefaultIfEmpty()
                             join e in _context.CommonSettings on a.Status equals e.CodeSet into e1
                             from e2 in e1.DefaultIfEmpty()
                             join f in _context.CommonSettings on a.Currency equals f.CodeSet into f1
                             from f2 in f1.DefaultIfEmpty()
                             where a.IsDeleted == false
                               && (string.IsNullOrEmpty(keySearch) || a.AssetCode.ToLower().Contains(keySearch.ToLower())
                               || a.AssetName.ToLower().Contains(keySearch.ToLower()))
                             select new
                             {
                                 Id = a.AssetID,
                                 a.AssetCode,
                                 a.AssetName,

                             };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // details
        [HttpPost]
        public JsonResult GetDetailAssetScan(string AssetCode)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.AssetMains.FirstOrDefault(x => x.AssetCode == AssetCode);
                msg.Object = _context.AssetMains.Where(m => m.AssetCode == AssetCode).Select(a => new
                {
                    a.AssetID,
                    a.AssetCode,
                    a.AssetName,
                    Status = a.Status != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet == a.Status).ValueSet : "",
                    Group = a.AssetGroup != null ? _context.AssetGroups.FirstOrDefault(x => x.IsDeleted == false && x.Code == a.AssetGroup).Name : "",
                    Type = a.AssetType != null ? _context.AssetTypes.FirstOrDefault(x => x.IsDeleted == false && x.CatCode == a.AssetType).CatName : "",
                    a.Cost,
                    Currency = a.AssetType != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet == a.Currency).ValueSet : "",
                    Branch = a.Branch != null ? _context.AdOrganizations.FirstOrDefault(x => x.OrgAddonCode == a.Branch).OrgName : "",
                    Department = a.Department != null ? _context.AdDepartments.FirstOrDefault(x => x.DepartmentCode == a.Department).Title : "",
                    UserResponsible = a.UserResponsible != null ? _context.HREmployees.FirstOrDefault(x => x.Id.ToString() == a.UserResponsible).fullname : "",
                    LocationSet = a.LocationSet,
                    BuyedTime = a.BuyedTime != null ? a.BuyedTime.Value.ToString("dd/MM/yyyy") : "",
                    a.PathIMG,

                });
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        public class ModelAsset : JTableModel
        {
            public string KeyWord { get; set; }
            public string Adress { get; set; }
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string Status { get; set; }
            public string AssetGroup { get; set; }
            public int CurrentPageView { get; set; }
        }

        [HttpPost]
        public JsonResult GetListAsset(ModelAsset model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromdate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var todate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (model.CurrentPageView - 1) * model.Length;
                var query = from a in _context.AssetMains
                            join b in _context.Suppliers on a.SupplierCode equals b.SupCode into b1
                            from b2 in b1.DefaultIfEmpty()
                            join c in _context.AssetTypes.Where(x => !x.IsDeleted) on a.AssetType equals c.CatCode into c1
                            from c2 in c1.DefaultIfEmpty()
                            join d in _context.AssetGroups on a.AssetGroup equals d.Code into d1
                            from d2 in d1.DefaultIfEmpty()
                            join e in _context.CommonSettings on a.Status equals e.CodeSet into e1
                            from e2 in e1.DefaultIfEmpty()
                            join f in _context.CommonSettings on a.Currency equals f.CodeSet into f1
                            from f2 in f1.DefaultIfEmpty()
                            where a.IsDeleted == false && b2.IsDeleted == false
                            && (string.IsNullOrEmpty(model.Status) || a.Status.ToLower().Contains(model.Status.ToLower()))
                            && (string.IsNullOrEmpty(model.KeyWord) || a.Description.ToLower().Contains(model.KeyWord.ToLower()))
                            && (string.IsNullOrEmpty(model.AssetGroup) || a.AssetGroup.ToLower().Contains(model.AssetGroup.ToLower()))
                            && (fromdate == null || (a.CreatedTime >= fromdate))
                            && (todate == null || (a.CreatedTime <= todate))
                            select new
                            {
                                Id = a.AssetID,
                                a.AssetCode,
                                a.AssetName,
                                a.Cost,
                                a.BuyedTime,
                                a.ExpiredDate,
                                a.PathIMG,
                                SupplierName = b2.SupName,
                                AssetType = c2.CatName,
                                AssetGroup = d2.Name,
                                Status = e2.ValueSet,
                                Currency = f2.ValueSet
                            };
                var count = query.Count();
                var data = query.OrderBy(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();

                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetAssetGroup()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.AssetGroups.Where(x => x.IsDeleted == false).Select(x => new { Code = x.Code, Name = x.Name });
            msg.Object = data;

            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetAssetStatus()
        {
            var msg = new JMessage() { Error = false };
            var data = _context.CommonSettings.Where(x => x.Group == "SERVICE_STATUS").Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            msg.Object = data;

            return Json(msg);
        }

        // details
        [HttpPost]
        public JsonResult GetDetailAsset(int id)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.AssetMains.FirstOrDefault(x => x.AssetID == id);
                if (data != null)
                {
                    var quantity = _context.AssetMains.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.Branch) && !string.IsNullOrEmpty(data.Branch) && x.Branch.Equals(data.Branch)).Count();
                    msg.Object = _context.AssetMains.Where(m => m.AssetID == id && !m.IsDeleted).Select(a => new
                    {
                        a.AssetID,
                        a.AssetCode,
                        a.AssetName,
                        Status = a.Status != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet == a.Status).ValueSet : "",
                        Group = a.AssetGroup != null ? _context.AssetGroups.FirstOrDefault(x => x.IsDeleted == false && x.Code == a.AssetGroup).Name : "",
                        Type = a.AssetType != null ? _context.AssetTypes.FirstOrDefault(x => x.IsDeleted == false && x.CatCode == a.AssetType).CatName : "",
                        a.Cost,
                        Currency = a.AssetType != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet == a.Currency).ValueSet : "",
                        Branch = a.Branch != null ? _context.AdOrganizations.FirstOrDefault(x => x.OrgAddonCode == a.Branch).OrgName : "",
                        Department = a.Department != null ? _context.AdDepartments.FirstOrDefault(x => x.DepartmentCode == a.Department).Title : "",
                        UserResponsible = a.UserResponsible != null ? _context.HREmployees.FirstOrDefault(x => x.Id.ToString() == a.UserResponsible).fullname : "",
                        LocationSet = a.LocationSet,
                        BuyedTime = a.BuyedTime != null ? a.BuyedTime.Value.ToString("dd/MM/yyyy") : "",
                        a.PathIMG,
                        a.AssetType,
                        a.AssetGroup,
                        a.Description,
                        sBuyedTime = a.BuyedTime.HasValue ? a.BuyedTime.Value.ToString("dd/MM/yyyy") : null,
                        a.ExpiredDate,
                        sExpiredDate = a.ExpiredDate.HasValue ? a.ExpiredDate.Value.ToString("dd/MM/yyyy") : null,
                        a.SupplierCode,
                        a.LocationText,
                        a.LocationGps,
                        a.OrderNo,
                        SupName = _context.Suppliers.FirstOrDefault(x => !x.IsDeleted && x.SupCode == a.SupplierCode).SupName,
                        QuantityTotal = quantity > 0 ? quantity : 1
                    });

                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        //get more
        [HttpPost]
        public JsonResult GetMoreAsset(int AssetID)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var assetCode = _context.AssetMains.FirstOrDefault(x => x.AssetID == AssetID).AssetCode;

                var query2 = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == assetCode && x.ObjectType == EnumHelper<AssetEnum>.GetDisplayValue(AssetEnum.Asset))
                               join b in _context.EDMSFiles.Where(x => !x.IsDeleted && x.IsFileMaster == null || x.IsFileMaster == true) on a.FileCode equals b.FileCode
                               join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                               from f in f1.DefaultIfEmpty()
                               select new
                               {
                                   a.Id,
                                   b.FileCode,
                                   b.FileName,
                                   b.FileTypePhysic,
                                   b.Desc,
                                   b.CloudFileId,
                                   TypeFile = "NO_SHARE",
                                   ReposName = f != null ? f.ReposName : "",
                                   b.IsFileMaster,
                                   b.EditedFileBy,
                                   b.EditedFileTime,
                                   b.FileID,
                                   b.Url,
                                   CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                               }).Union(
                              from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == assetCode && x.ObjectType == EnumHelper<AssetEnum>.GetDisplayValue(AssetEnum.Asset))
                              join b in _context.EDMSFiles.Where(x => !x.IsDeleted && x.IsFileMaster == null || x.IsFileMaster == true) on a.FileCode equals b.FileCode
                              join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                              from f in f1.DefaultIfEmpty()
                              select new
                              {
                                  a.Id,
                                  b.FileCode,
                                  b.FileName,
                                  b.FileTypePhysic,
                                  b.Desc,
                                  b.CloudFileId,
                                  TypeFile = "NO_SHARE",
                                  ReposName = f != null ? f.ReposName : "",
                                  b.IsFileMaster,
                                  b.EditedFileBy,
                                  b.EditedFileTime,
                                  b.FileID,
                                  b.Url,
                                  CreatedTime = b.CreatedTime != null ? b.CreatedTime.Value.ToString("dd/MM/yyyy") : "",
                              })).AsNoTracking().ToList();

                var query3 = (from a in _context.AssetAttrGalaxys
                              join b in _context.AttrGalaxyAets on a.AttrCode equals b.Code into b1
                              from b2 in b1.DefaultIfEmpty()
                              where a.AssetCode == assetCode
                              && a.IsDeleted == false
                              orderby a.Id descending
                              select new
                              {
                                  a.Id,
                                  a.AttrCode,
                                  AttrName = b2 != null ? b2.Name : "",
                                  a.AttrValue,
                                  a.CreatedTime,
                                  Unit = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)).ValueSet : "" : "",
                                  Group = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)).ValueSet : "" : "",
                                  DataType = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)).ValueSet : "" : "",
                                  Parent = b2 != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Code.Equals(b2.Parent)) != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Code.Equals(b2.Parent)).Name : "" : ""
                              }).AsNoTracking().ToList();

                msg.Object = new { File = query2, Property = query3 };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        // details
        [HttpPost]
        public JsonResult GetLocationAsset(string code)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.AssetMains.FirstOrDefault(x => x.AssetCode == code);
                msg.Object = _context.AssetMains.Where(m => m.AssetCode == code).Select(a => new
                {
                    a.AssetID,
                    a.AssetCode,
                    a.LocationGps,
                    a.LocationText,
                    a.LocationSet
                });
                _context.SaveChanges();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }

        //update locatiol
        public class ModelAssetLocation
        {
            public string AssetCode { get; set; }
            public string LocationGPS { get; set; }
            public string LocationSet { get; set; }
            public string LocationText { get; set; }
        }


        [HttpPost]
        public JsonResult UpdateLocationAsset(ModelAssetLocation model)
        {
            JMessage msg = new JMessage { Error = false };
            try
            {
                var data = _context.AssetMains.FirstOrDefault(x => x.AssetCode == model.AssetCode);
                if (data != null)
                {
                    data.LocationGps = model.LocationGPS;
                    data.LocationSet = model.LocationSet;
                    data.LocationText = model.LocationText;
                    _context.AssetMains.Update(data);
                    _context.SaveChanges();
                    msg.Title = "Cập nhật vị trí thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Không tìm thấy tài sản!";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
            }
            return Json(msg);
        }
        #endregion

        #region convert to sfdt
        [HttpPost]
        public JsonResult Import(string filePath)
        {
            var path = _hostingEnvironment.WebRootPath + "/" + filePath;
            FileStream fileStreamPath = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            Syncfusion.EJ2.DocumentEditor.WordDocument document1 = Syncfusion.EJ2.DocumentEditor.WordDocument.Load(fileStreamPath, GetFormatType(".doc"));
            string s = Newtonsoft.Json.JsonConvert.SerializeObject(document1);
            document1.Dispose();
            return Json(s);
        }

        //Save word
        public class ModelSaveFileDocx
        {
            //public string File_Code { get; set; }
            public string File_Path { get; set; }
            //public string FullPathView { get; set; }
            //public string ContentFile { get; set; }
            public IFormFile ContentFile { get; set; }
        }


        [HttpPost]
        public JsonResult SaveDocument(ModelSaveFileDocx docmodel)
        {
            var msg = new JMessage { Title = "Lưu tệp tin thành công!", Error = false };
            try
            {
                var path = _hostingEnvironment.WebRootPath + "/" + docmodel.File_Path;
                var stream = new FileStream(path, FileMode.Create);
                docmodel.ContentFile.CopyTo(stream);
                stream.Close();

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }

            return Json(msg);
        }
        //end

        internal static Syncfusion.EJ2.DocumentEditor.FormatType GetFormatType(string format)
        {
            if (string.IsNullOrEmpty(format))
                throw new NotSupportedException("EJ2 DocumentEditor does not support this file format.");
            switch (format.ToLower())
            {
                case ".dotx":
                case ".docx":
                case ".docm":
                case ".dotm":
                    return Syncfusion.EJ2.DocumentEditor.FormatType.Docx;
                case ".dot":
                case ".doc":
                    return Syncfusion.EJ2.DocumentEditor.FormatType.Doc;
                case ".rtf":
                    return Syncfusion.EJ2.DocumentEditor.FormatType.Rtf;
                case ".txt":
                    return Syncfusion.EJ2.DocumentEditor.FormatType.Txt;
                case ".xml":
                    return Syncfusion.EJ2.DocumentEditor.FormatType.WordML;
                default:
                    throw new NotSupportedException("EJ2 DocumentEditor does not support this file format.");
            }
        }

        internal static Syncfusion.DocIO.FormatType GetDocIOFomatType(Syncfusion.EJ2.DocumentEditor.FormatType type)
        {
            switch (type)
            {
                case Syncfusion.EJ2.DocumentEditor.FormatType.Docx:
                    return Syncfusion.DocIO.FormatType.Docx;
                case Syncfusion.EJ2.DocumentEditor.FormatType.Doc:
                    return Syncfusion.DocIO.FormatType.Doc;
                case Syncfusion.EJ2.DocumentEditor.FormatType.Rtf:
                    return Syncfusion.DocIO.FormatType.Rtf;
                case Syncfusion.EJ2.DocumentEditor.FormatType.Txt:
                    return Syncfusion.DocIO.FormatType.Txt;
                case Syncfusion.EJ2.DocumentEditor.FormatType.WordML:
                    return Syncfusion.DocIO.FormatType.WordML;
                default:
                    throw new NotSupportedException("DocIO does not support this file format.");
            }
        }

        [HttpGet]
        public object GetItemViewFile(int Id)
        {
            //Kiểm tra trạng thái của file đang mở
            //TH1: Nếu đang ở trạng thái bị lock(IsEdit=false) thì thông báo cho người dùng là không được phép sửa file
            //TH2: Nếu trạng thái không bị lock(IsEdit=null hoặc IsEdit=true) thì cập nhật IsEdit=false và EditedFileTime, EditedFileBy
            var msg = new JMessage() { Error = false };
            try
            {
                var data = (from a in _context.EDMSRepoCatFiles.Where(x => x.Id == Id)
                            join b in _context.EDMSRepositorys on a.ReposCode equals b.ReposCode into b2
                            from b in b2.DefaultIfEmpty()
                            join c in _context.EDMSFiles on a.FileCode equals c.FileCode into c2
                            from c in c2.DefaultIfEmpty()
                            select new
                            {
                                a.Id,
                                Server = (b != null ? b.Server : null),
                                Type = (b != null ? b.Type : null),
                                Url = (c != null ? c.Url : null),
                                FileId = (c != null ? c.CloudFileId : null),
                                FileTypePhysic = c.FileTypePhysic,
                                c.FileName,
                                c.MimeType,
                                b.Account,
                                b.PassWord,
                                c.FileCode,
                                c.IsEdit,
                                c.IsFileMaster,
                                c.FileParentId,
                                c.FileID
                            }).FirstOrDefault();

                var aseanDoc = new AseanDocument();
                if (data != null)
                {
                    var edmsFile = _context.EDMSFiles.FirstOrDefault(x => x.FileID.Equals(data.FileID));

                    if ((data.IsEdit == null || data.IsEdit == true) && (data.IsFileMaster == true || data.IsFileMaster == null))
                    {
                        edmsFile.IsEdit = false;
                        edmsFile.EditedFileBy = User.Identity.Name;
                        edmsFile.EditedFileTime = DateTime.Now;
                        _context.EDMSFiles.Update(edmsFile);
                        _context.SaveChanges();
                    }
                    //else if ((data.IsEdit == false) && (data.IsFileMaster == true || data.IsFileMaster == null))
                    //{
                    //    msg.Error = true;
                    //    msg.Title = "Tệp đang được chỉnh sửa bởi một người dùng khác. Vui lòng thử lại sau";
                    //    return Json(msg);
                    //}


                    var fileTempName = "File_temp" + Path.GetExtension(data.FileName);

                    if (!string.IsNullOrEmpty(data.Server))
                    {
                        string ftphost = data.Server;
                        string ftpfilepath = data.Url;
                        var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + ftphost + ftpfilepath);
                        using (WebClient request = new WebClient())
                        {
                            request.Credentials = new NetworkCredential(data.Account, data.PassWord);
                            byte[] fileData = request.DownloadData(urlEnd);
                            JMessage msg1 = _upload.UploadFileByBytes(fileData, fileTempName, _hostingEnvironment.WebRootPath, "uploads\\tempFile");
                            string path = msg1.Object.ToString();
                            string pathConvert = "/" + path.Replace("\\", "/");
                            var extension = Path.GetExtension(path);
                            aseanDoc.File_Code = data.FileCode;
                            aseanDoc.File_Name = data.FileName;
                            aseanDoc.File_Type = data.FileTypePhysic;
                            aseanDoc.File_Path = path;
                            aseanDoc.FullPathView = ftpfilepath;
                            aseanDoc.IsEdit = data.IsEdit;
                            aseanDoc.IsFileMaster = data.IsFileMaster;
                            aseanDoc.FileParentId = data.FileParentId;

                            if (extension.Equals(".doc") || extension.Equals(".docx"))
                            {
                                DocmanController.docmodel = aseanDoc;
                            }
                            else if (extension.Equals(".xls") || extension.Equals(".xlsx"))
                            {
                                ExcelController.pathFileFTP = pathConvert;
                                ExcelController.docmodel = aseanDoc;
                            }
                            else if (extension.Equals(".pdf"))
                            {
                                PDFController.docmodel = aseanDoc;
                            }
                        }
                    }
                    else
                    {
                        byte[] fileData = FileExtensions.DowloadFileGoogle(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", data.FileId);
                        JMessage msg1 = _upload.UploadFileByBytes(fileData, fileTempName, _hostingEnvironment.WebRootPath, "uploads\\tempFile");
                        string path = msg1.Object.ToString();
                        aseanDoc.File_Code = data.FileCode;
                        aseanDoc.File_Name = data.FileName;
                        aseanDoc.File_Type = data.FileTypePhysic;
                        aseanDoc.File_Path = path;
                        aseanDoc.IsEdit = data.IsEdit;
                        aseanDoc.IsFileMaster = data.IsFileMaster;
                        aseanDoc.FileParentId = data.FileParentId;
                        var extension = Path.GetExtension(path);

                        if (extension.Equals(".doc") || extension.Equals(".docx"))
                        {
                            DocmanController.docmodel = aseanDoc;
                        }
                        else if (extension.Equals(".xls") || extension.Equals(".xlsx"))
                        {
                            ExcelController.docmodel = aseanDoc;
                        }
                        else if (extension.Equals(".pdf"))
                        {
                            PDFController.docmodel = aseanDoc;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Tệp tin không tồn tại. Vui lòng kiểm tra lại";
                return Json(msg);
            }

            return Json(msg);
        }
        #endregion

        #region sendNotify
        public class UserIdModel
        {
            public string UserId { get; set; }
        }
        [NonAction]
        public void SendPushNotification(List<UserIdModel> listUserId, string message, object data)
        {
            if (listUserId != null && listUserId.Any())
            {
                var query = (from a in listUserId
                             join b in _context.FcmTokens on a.UserId equals b.UserId
                             join c in _context.Users on a.UserId equals c.Id
                             where c.Active == true
                             select new DeviceFcm
                             {
                                 Token = b.Token,
                                 Device = b.Device
                             }).DistinctBy(x => x.Token);
                if (query.Any())
                {
                    var countToken = query.Count();
                    if (countToken > 100000)
                    {
                        int countPush = (query.Count() / 100000) + 1;
                        for (int i = 0; i < countPush; i++)
                        {
                            //var listDevices = query.Skip(i * 1000).Take(100000).AsNoTracking().ToList();
                            List<DeviceFcm> listDevices = query.Skip(i * 1000).Take(100000).ToList();

                            var sendNotication = _notification.SendNotification("Thông báo", message, listDevices, data);
                        }
                    }
                    else
                    {
                        var sendNotication = _notification.SendNotification("Thông báo", message, query.ToList(), data);
                    }
                }
            }
        }
        #endregion

        #region Sản phẩm và bán hàng
        //sản phẩm và vật tư
        // danh sách sản phẩm
        public class JTableModelMaterialProducts : JTableModel
        {
            public string Code { get; set; }
            public string Name { get; set; }
            public string FromTo { get; set; }
            public string DateTo { get; set; }
            public string Group { get; set; }
            public string Type { get; set; }
            public string Status { get; set; }
            public string Catalogue { get; set; }
            public int CurrentPageView { get; set; }
        }
        public class MaterialProductRes
        {
            public int id { get; set; }
            public string productcode { get; set; }
            public string productname { get; set; }
            public string unit { get; set; }
            public string productgroup { get; set; }
            public string producttype { get; set; }
            public string pathimg { get; set; }
            public string material { get; set; }
            public string pattern { get; set; }
            public string note { get; set; }
            public string sBarCode { get; set; }
            public string sQrCode { get; set; }
        }
        [HttpPost]
        public object GetListMaterialProduct(JTableModelMaterialProducts jTablePara)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                DateTime? fromDate = !string.IsNullOrEmpty(jTablePara.FromTo) ? DateTime.ParseExact(jTablePara.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(jTablePara.DateTo) ? DateTime.ParseExact(jTablePara.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                int intBeginFor = (jTablePara.CurrentPageView - 1) * jTablePara.Length;
                var listCommon = _context.CommonSettings.Select(x => new { x.CodeSet, x.ValueSet });

                var query = from a in _context.MaterialProducts.AsNoTracking()
                            join b in _context.MaterialProductGroups on a.GroupCode equals b.Code into b1
                            from b in b1.DefaultIfEmpty()
                            join c in _context.MaterialTypes on a.TypeCode equals c.Code into c1
                            from c in c1.DefaultIfEmpty()
                            join d in _context.CommonSettings on a.Unit equals d.CodeSet into d2
                            from d1 in d2.DefaultIfEmpty()
                            where !a.IsDeleted
                                && (string.IsNullOrEmpty(jTablePara.Code) || a.ProductCode.ToLower().Contains(jTablePara.Code.ToLower()))
                                && (string.IsNullOrEmpty(jTablePara.Name) || a.ProductName.ToLower().Contains(jTablePara.Name.ToLower()))
                                && ((fromDate == null) || (a.CreatedTime.Date >= fromDate))
                                && ((toDate == null) || (a.CreatedTime.Date <= toDate))
                                && (string.IsNullOrEmpty(jTablePara.Group) || (a.GroupCode != null && a.GroupCode == jTablePara.Group))
                                && (string.IsNullOrEmpty(jTablePara.Type) || (a.TypeCode != null && a.TypeCode == jTablePara.Type))
                                && (string.IsNullOrEmpty(jTablePara.Status) || (a.Status == jTablePara.Status))
                                && (string.IsNullOrEmpty(jTablePara.Catalogue) || (a.ProductCode == jTablePara.Catalogue))
                            select new MaterialProductRes
                            {
                                //idd=test(),
                                id = a.Id,
                                productcode = a.ProductCode,
                                productname = a.ProductName,
                                //unit = d1 != null ? d1.ValueSet : "Không xác định",
                                //productgroup = b != null ? b.Name : "Không xác định",
                                //producttype = c != null ? c.Name : "Không xác định",
                                unit = d1 != null ? d1.ValueSet : "",
                                productgroup = b != null ? b.Name : "",
                                producttype = c != null ? c.Name : "",
                                pathimg = a.Image,
                                material = a.Material,
                                pattern = a.Pattern,
                                note = a.Note,
                                sQrCode = a.QrCode,
                                sBarCode = a.Barcode
                            };
                var count = query.Count();
                var data = query.OrderByDescending(x => x.id).AsNoTracking().Skip(intBeginFor).Take(jTablePara.Length).ToList();
                //var data1 = data.Skip(intBeginFor).Take(jTablePara.Length).ToList();
                foreach (var item in data)
                {
                    //item.sQrCode = CommonUtil.GenerateQRCode(item.sQrCode);
                    item.sBarCode = CommonUtil.GenerateBarCode(item.sBarCode);
                }
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // nhóm sản phẩm
        [HttpPost]
        public object GetProductGroup()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.MaterialProductGroups.AsParallel().Select(x => new { x.Code, x.Name });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // đơn vị sản phẩm
        [HttpPost]
        public object GetProductUnit()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // loại sản phẩm
        [HttpPost]
        public object GetProductTypes()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.MaterialTypes.Where(x => x.IsDeleted == false).AsParallel().Select(x => new { x.Code, x.Name });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // danh mục sản phẩm
        [HttpPost]
        public object GetProductCatelogue()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.MaterialProducts.Where(x => !x.IsDeleted && !x.TypeCode.Equals("SUB_PRODUCT"))
                                                 .Select(x => new { Code = x.ProductCode, Name = x.ProductName }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        // trạng thái sản phẩm
        public object GetProductStatus()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<WarehouseEnum>.GetDisplayValue(WarehouseEnum.CatStatus)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        //chi tiet san pham
        [HttpPost]
        public object GetProductDetail(int id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.MaterialProducts.AsNoTracking().FirstOrDefault(m => m.Id == id);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public object GetProductImpType()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = _context.CommonSettings.Where(x => x.Group == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.ProductImpType)).Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        [HttpPost]
        public object GetInheritances(string productCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.MaterialProducts
                              where a.IsDeleted == false
                              && a.ProductCode != productCode
                              select new
                              {
                                  Code = a.ProductCode,
                                  Name = a.ProductName
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public object GetInheritancesDetail(string productCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                msg.Object = (from a in _context.MaterialProducts.Where(x => !x.IsDeleted)
                              join b in _context.ProductAttributes.Where(x => !x.IsDeleted) on a.ProductCode equals b.ProductCode into b1
                              from b2 in b1.DefaultIfEmpty()
                              where a.ProductCode == productCode
                              select new
                              {
                                  Inheritance = productCode,
                                  a.Accessory,
                                  a.Description,
                                  a.GroupCode,
                                  a.Material,
                                  a.Pattern,
                                  a.Wide,
                                  a.High,
                                  a.TypeCode,
                                  a.Unit,
                                  a.Note,
                                  ListProductAttribute = b2
                              }).ToList();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }

        [HttpPost]
        public object UpdateMaterialProduct(MaterialProduct obj)
        {
            var msg = new JMessage();
            try
            {
                var product = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                if (product != null)
                {
                    DateTime? foreCastTime = !string.IsNullOrEmpty(obj.sForeCastTime) ? DateTime.ParseExact(obj.sForeCastTime, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;


                    if (!string.IsNullOrEmpty(obj.GroupCode))
                    {
                        switch (obj.GroupCode)
                        {
                            case "REM":
                                product.PriceCostCatelogue = obj.PricePerM;
                                break;
                            case "THAM":
                                product.PriceCostCatelogue = obj.PricePerM2;
                                break;
                            case "SAN":
                                product.PriceCostCatelogue = obj.PricePerM2;
                                break;
                        }
                    }
                    product.ProductName = obj.ProductName;
                    product.GroupCode = obj.GroupCode;
                    product.Unit = obj.Unit;
                    product.Note = obj.Note;
                    product.Image = obj.Image;
                    product.UpdatedBy = obj.UpdatedBy;
                    product.UpdatedTime = DateTime.Now;
                    product.QrCode = obj.QrCode;
                    product.Barcode = obj.Barcode;
                    product.Material = obj.Material;
                    product.Pattern = obj.Pattern;
                    product.Wide = obj.Wide;
                    product.High = obj.High;
                    product.Inheritance = obj.Inheritance;
                    product.TypeCode = obj.TypeCode;
                    product.Status = obj.Status;
                    product.Description = obj.Description;
                    product.PricePerM = obj.PricePerM;
                    product.PricePerM2 = obj.PricePerM2;
                    product.ForecastTime = foreCastTime;
                    product.ForecastInStock = obj.ForecastInStock;
                    product.Label = obj.Label;
                    product.ImpType = obj.ImpType;
                    _context.MaterialProducts.Update(product);

                    var list = _context.SubProducts.Where(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false).ToList();
                    foreach (var item in list)
                    {
                        item.Unit = product.Unit;
                        item.ImpType = product.ImpType;
                    }
                    _context.SubProducts.UpdateRange(list);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Cập nhật thành công";
                    //msg.Title = String.Format(_sharedResources["COM_UPDATE_SUCCESS"]);
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Sản phẩm không tồn tại hoặc đã bị xóa, vui lòng kiểm tra lại";
                    //msg.Title = String.Format(_sharedResources["COM_MSG_NOT_EXITS"], _stringLocalizer["MLP_CURD_LBL_PRODUCT"]);
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                //msg.Title = String.Format(_sharedResources["COM_MSG_UPDATE_FAILED"], _stringLocalizer["MLP_MSG_PRODUCT"]);
            }

            return msg;
        }
        //file
        [HttpPost]
        public object JTableFileMaterialProduct(string productCode)
        {
            var msg = new JMessage();
            try
            {
                msg.Object = ((from a in _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == productCode && x.ObjectType == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product))
                               join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                               join f in _context.EDMSRepositorys on a.ReposCode equals f.ReposCode into f1
                               from f in f1.DefaultIfEmpty()
                               select new
                               {
                                   a.Id,
                                   b.FileCode,
                                   b.FileName,
                                   b.FileTypePhysic,
                                   b.Desc,
                                   b.CreatedTime,
                                   b.CloudFileId,
                                   TypeFile = "NO_SHARE",
                                   ReposName = f != null ? f.ReposName : "",
                               }).Union(
                  from a in _context.EDMSObjectShareFiles.Where(x => x.ObjectCode == productCode && x.ObjectType == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product))
                  join b in _context.EDMSFiles on a.FileCode equals b.FileCode
                  join f in _context.EDMSRepositorys on b.ReposCode equals f.ReposCode into f1
                  from f in f1.DefaultIfEmpty()
                  select new
                  {
                      Id = b.FileID,
                      b.FileCode,
                      b.FileName,
                      b.FileTypePhysic,
                      b.Desc,
                      b.CreatedTime,
                      b.CloudFileId,
                      TypeFile = "SHARE",
                      ReposName = f != null ? f.ReposName : "",
                  })).AsNoTracking();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi lấy dữ liệu!";
                msg.Object = ex.Message;
            }
            return Json(msg);
        }
        public class EDMSRepoCatFileModel
        {
            public string FileCode { get; set; }
            public string NumberDocument { get; set; }
            public string Tags { get; set; }
            public string Desc { get; set; }
            public string ContractCode { get; set; }
            public string ProjectCode { get; set; }
            public string CustomerCode { get; set; }
            public string AssetCode { get; set; }
            public string SupplierCode { get; set; }
            public string ProductCode { get; set; }
            public string EmployeeCode { get; set; }
            public string RequestCode { get; set; }
            public string PoCode { get; set; }
            public string WHS_Code { get; set; }
            public int? CateRepoSettingId { get; set; }
            public string CateRepoSettingCode { get; set; }
            public string Path { get; set; }
            public string FolderId { get; set; }
            public string CreatedBy { get; set; }
            public bool IsMore { get; set; }
        }
        [HttpPost]
        public JsonResult InsertProductFile(EDMSRepoCatFileModel obj, IFormFile fileUpload)
        {
            var msg = new JMessage() { Error = false, Title = "" };
            try
            {
                var mimeType = fileUpload.ContentType;
                string extension = Path.GetExtension(fileUpload.FileName);
                string urlFile = "";
                string fileId = "";
                if (Array.IndexOf(mediaType, mimeType) >= 0 || (Array.IndexOf(LuceneExtension.fileMimetypes, mimeType) >= 0 && (Array.IndexOf(LuceneExtension.fileExt, extension.ToUpper()) >= 0)))
                {
                    string reposCode = "";
                    string catCode = "";
                    string path = "";
                    string folderId = "";
                    //Chọn file ngắn gọn
                    if (!obj.IsMore)
                    {
                        var suggesstion = GetSuggestionsProductFile(obj.ProductCode);
                        if (suggesstion != null)
                        {
                            reposCode = suggesstion.ReposCode;
                            path = suggesstion.Path;
                            folderId = suggesstion.FolderId;
                            catCode = suggesstion.CatCode;
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Không tìm thấy gợi ý thư mục cho sản phầm";
                            return Json(msg);
                        }
                    }
                    //Hiển file mở rộng
                    else
                    {
                        var setting = _context.EDMSCatRepoSettings.FirstOrDefault(x => x.Id == obj.CateRepoSettingId);
                        if (setting != null)
                        {
                            reposCode = setting.ReposCode;
                            path = setting.Path;
                            folderId = setting.FolderId;
                            catCode = setting.CatCode;
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Vui lòng chọn thư mục cho sản phẩm";
                            return Json(msg);
                        }
                    }
                    var getRepository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == reposCode);
                    if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.Server))
                    {
                        using (var ms = new MemoryStream())
                        {
                            fileUpload.CopyTo(ms);
                            var fileBytes = ms.ToArray();
                            urlFile = path + Path.Combine("/", fileUpload.FileName);
                            var urlFilePreventive = path + Path.Combine("/", Guid.NewGuid().ToString().Substring(0, 8) + fileUpload.FileName);
                            var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFile);
                            var urlEndPreventive = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + urlFilePreventive);
                            var result = FileExtensions.UploadFileToFtpServer(urlEnd, urlEndPreventive, fileBytes, getRepository.Account, getRepository.PassWord);
                            if (result.Status == WebExceptionStatus.ConnectFailure || result.Status == WebExceptionStatus.ProtocolError)
                            {
                                msg.Error = true;
                                msg.Title = "Kết nối server không thành công";
                                return Json(msg);
                            }
                            else if (result.Status == WebExceptionStatus.Success)
                            {
                                if (result.IsSaveUrlPreventive)
                                {
                                    urlFile = urlFilePreventive;
                                }
                            }
                            else
                            {
                                msg.Error = true;
                                msg.Title = "Có lỗi khỉ tải file";
                                return Json(msg);
                            }
                        }
                    }
                    else if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.GooglerDriver))
                    {
                        fileId = FileExtensions.UploadFileToDrive(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", fileUpload.FileName, fileUpload.OpenReadStream(), fileUpload.ContentType, folderId);
                    }
                    var edmsReposCatFile = new EDMSRepoCatFile
                    {
                        FileCode = string.Concat("PRODUCT", Guid.NewGuid().ToString()),
                        ReposCode = reposCode,
                        CatCode = catCode,
                        ObjectCode = obj.ProductCode,
                        ObjectType = EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product),
                        Path = path,
                        FolderId = folderId
                    };
                    _context.EDMSRepoCatFiles.Add(edmsReposCatFile);

                    /// created Index lucene
                    LuceneExtension.IndexFile(edmsReposCatFile.FileCode, fileUpload, string.Concat(_hostingEnvironment.WebRootPath, "\\uploads\\luceneIndex"));

                    //add File
                    var file = new EDMSFile
                    {
                        FileCode = edmsReposCatFile.FileCode,
                        FileName = fileUpload.FileName,
                        Desc = obj.Desc,
                        ReposCode = reposCode,
                        Tags = obj.Tags,
                        FileSize = fileUpload.Length,
                        FileTypePhysic = Path.GetExtension(fileUpload.FileName),
                        NumberDocument = obj.NumberDocument,
                        CreatedBy = obj.CreatedBy,
                        CreatedTime = DateTime.Now,
                        Url = urlFile,
                        MimeType = mimeType,
                        CloudFileId = fileId,
                    };
                    _context.EDMSFiles.Add(file);
                    _context.SaveChanges();
                    msg.Title = "Tải File thành công!";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Định dạng tệp không cho phép";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex;
                msg.Title = "Có lỗi khỉ tải file";
            }
            return Json(msg);
        }
        [HttpGet]
        public EDMSRepoCatFile GetSuggestionsProductFile(string productCode)
        {
            var query = _context.EDMSRepoCatFiles.Where(x => x.ObjectCode == productCode && x.ObjectType == EnumHelper<EnumMaterialProduct>.GetDisplayValue(EnumMaterialProduct.Product)).MaxBy(x => x.Id);
            return query;
        }
        [HttpPost]
        public JsonResult DeleteProductFileProduct(int id)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                var data = _context.EDMSRepoCatFiles.FirstOrDefault(x => x.Id == id);
                _context.EDMSRepoCatFiles.Remove(data);

                var file = _context.EDMSFiles.FirstOrDefault(x => x.FileCode == data.FileCode);
                _context.EDMSFiles.Remove(file);

                LuceneExtension.DeleteIndexFile(file.FileCode, _hostingEnvironment.WebRootPath + "\\uploads\\luceneIndex");
                var getRepository = _context.EDMSRepositorys.FirstOrDefault(x => x.ReposCode == data.ReposCode);
                if (getRepository != null)
                {
                    if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.Server))
                    {
                        var urlEnd = System.Web.HttpUtility.UrlPathEncode("ftp://" + getRepository.Server + file.Url);
                        FileExtensions.DeleteFileFtpServer(urlEnd, getRepository.Account, getRepository.PassWord);
                    }
                    else if (getRepository.Type == EnumHelper<TypeConnection>.GetDisplayValue(TypeConnection.GooglerDriver))
                    {
                        FileExtensions.DeleteFileGoogleServer(_hostingEnvironment.WebRootPath + "\\files\\credentials.json", _hostingEnvironment.WebRootPath + "\\files\\token.json", file.CloudFileId);
                    }
                    _context.SaveChanges();
                    msg.Title = "Xóa thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi xóa!";
                msg.Object = ex;
            }
            return Json(msg);
        }
        // thuộc tính mở rộng
        [HttpPost]
        public object GetAttributeMoreProduct(string productCode)
        {
            var msg = new JMessage() { Error = false };
            try
            {
                msg.Object = from a in _context.ProductAttrGalaxys
                             join b in _context.AttrGalaxys on a.AttrCode equals b.Code into b1
                             from b2 in b1.DefaultIfEmpty()
                             where a.ProductCode == productCode
                             && a.IsDeleted == false
                             orderby a.Id descending
                             select new
                             {
                                 a.Id,
                                 a.AttrCode,
                                 AttrName = b2 != null ? b2.Name : "",
                                 a.AttrValue,
                                 a.CreatedTime,
                                 Unit = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Unit)).ValueSet : "" : "",
                                 Group = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.Group)).ValueSet : "" : "",
                                 DataType = b2 != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(b2.DataType)).ValueSet : "" : "",
                                 Parent = b2 != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Code.Equals(b2.Parent)) != null ? _context.AttrGalaxys.FirstOrDefault(x => x.Code.Equals(b2.Parent)).Name : "" : ""
                             };

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra khi xóa!";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult InsertAttributeMoreProduct(ProductAttrGalaxy obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var parent = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                if (parent != null)
                {
                    var data = _context.ProductAttrGalaxys.FirstOrDefault(x => x.ProductCode.Equals(obj.ProductCode) && x.AttrCode.Equals(obj.AttrCode) && !x.IsDeleted);
                    if (data != null)
                    {
                        msg.Error = true;
                        msg.Title = "Đã tồn tại thuộc tính mở rộng của sản phẩm này, không thể thêm tiếp";
                    }
                    else
                    {
                        ProductAttrGalaxy objNew = new ProductAttrGalaxy();

                        objNew.ProductCode = obj.ProductCode;
                        objNew.AttrCode = obj.AttrCode;
                        objNew.AttrValue = obj.AttrValue;
                        objNew.CreatedTime = DateTime.Now;
                        objNew.CreatedBy = obj.CreatedBy;
                        objNew.IsDeleted = false;

                        _context.ProductAttrGalaxys.Add(objNew);
                        _context.SaveChanges();
                        msg.Error = false;
                        msg.Title = "Thêm thành công";
                    }
                }
                else
                {
                    msg.Error = false;
                    msg.Title = "Danh mục sản phẩm không tồn tại, vui lòng làm mới trang";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi thêm !";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult UpdateAttributeMoreProduct(ProductAttrGalaxy obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var parent = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                if (parent != null)
                {
                    var objNew = _context.ProductAttrGalaxys.FirstOrDefault(x => x.ProductCode.Equals(obj.ProductCode) && x.AttrCode.Equals(obj.AttrCode) && !x.IsDeleted);
                    if (objNew == null)
                    {
                        msg.Error = true;
                        msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                    }
                    else
                    {
                        objNew.ProductCode = obj.ProductCode;
                        objNew.AttrValue = obj.AttrValue;

                        objNew.UpdatedTime = DateTime.Now;
                        objNew.UpdatedBy = ESEIM.AppContext.UserName;
                        objNew.IsDeleted = false;

                        _context.ProductAttrGalaxys.Update(objNew);
                        _context.SaveChanges();
                        msg.Error = false;
                        msg.Title = "Chỉnh sửa thành công";
                    }
                }
                else
                {
                    msg.Error = false;
                    msg.Title = "Danh mục sản phẩm không tồn tại, vui lòng làm mới trang";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "vCó lỗi khi chỉnh sửa";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult DeleteAttributeMoreProduct(int Id)
        {
            JMessage msg = new JMessage();
            try
            {
                //var parent = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                //if (parent != null)
                //{
                var objNew = _context.ProductAttrGalaxys.FirstOrDefault(x => x.Id == Id);
                if (objNew == null)
                {
                    msg.Error = true;
                    msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                }
                else
                {
                    objNew.DeletedTime = DateTime.Now;
                    objNew.DeletedBy = ESEIM.AppContext.UserName;
                    objNew.IsDeleted = true;

                    _context.ProductAttrGalaxys.Update(objNew);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Xóa thành công!";
                }
                //}
                //else
                //{
                //    msg.Error = false;
                //    msg.Title = "Danh mục sản phẩm không tồn tại, vui lòng làm mới trang";
                //}

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa!";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetDetailAttributeMore(int Id)
        {
            JMessage msg = new JMessage();
            try
            {
                var objNew = _context.ProductAttrGalaxys.FirstOrDefault(x => x.Id == Id);
                if (objNew == null)
                {
                    msg.Error = true;
                    msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                }
                else
                {
                    msg.Error = false;
                    msg.Object = objNew;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa !";
            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListProductAttributeMain()
        {
            JMessage msg = new JMessage();
            try
            {
                var data = _context.AttrGalaxys.Where(x => !x.IsDeleted).Select(x => new { x.Code, x.Name });
                if (data == null)
                {
                    msg.Error = true;
                }
                else
                {
                    msg.Error = false;
                    msg.Object = data;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        [HttpGet]
        public JsonResult GetListProductAttributeChildren(string ParentCode)
        {
            JMessage msg = new JMessage();
            try
            {
                var data = _context.MaterialProductAttributeChildrens.Where(x => !x.IsDeleted && x.ParentCode.Equals(ParentCode)).Select(x => new { x.Code, x.Name });
                if (data == null)
                {
                    msg.Error = true;
                    msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                }
                else
                {
                    msg.Error = false;
                    msg.Object = data;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa !";
            }
            return Json(msg);
        }
        // Thanh phan
        [HttpPost]
        public object GetListComponentProduct(string productCode)
        {
            JMessage msg = new JMessage();
            try
            {
                msg.Object = from a in _context.ProductComponents
                             where a.ProductCode == productCode
                             && a.IsDeleted == false
                             orderby a.Id descending
                             select new
                             {
                                 a.Id,
                                 a.Code,
                                 a.Name,
                                 a.Quantity,
                                 Unit = _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(a.Unit)) != null ? _context.CommonSettings.FirstOrDefault(x => x.CodeSet.Equals(a.Unit)).ValueSet : "",
                                 a.CreatedTime,
                             };
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa !";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult InsertComponentProduct(ProductComponent obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var parent = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                if (parent != null)
                {
                    var data = _context.ProductComponents.FirstOrDefault(x => x.ProductCode.Equals(obj.ProductCode) && x.Code.Equals(obj.Code) && !x.IsDeleted);
                    if (data != null)
                    {
                        msg.Error = true;
                        msg.Title = "Thành phần đã tồn tại";
                    }
                    else
                    {
                        ProductComponent objNew = new ProductComponent();

                        objNew.ProductCode = obj.ProductCode;
                        objNew.Code = obj.Code;
                        objNew.Name = obj.Name;
                        objNew.Quantity = obj.Quantity;
                        objNew.Unit = obj.Unit;

                        objNew.CreatedTime = DateTime.Now;
                        objNew.CreatedBy = obj.CreatedBy;
                        objNew.IsDeleted = false;

                        _context.ProductComponents.Add(objNew);
                        _context.SaveChanges();
                        msg.Error = false;
                        msg.Title = "Thêm mới thành công!";
                    }
                }
                else
                {
                    msg.Error = false;
                    msg.Title = "Sản phẩm không tồn tại";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetDetailComponentProduct(int Id)
        {
            JMessage msg = new JMessage();
            try
            {
                var objNew = _context.ProductComponents.FirstOrDefault(x => x.Id == Id);
                if (objNew == null)
                {
                    msg.Error = true;
                    msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                }
                else
                {
                    msg.Error = false;
                    msg.Object = objNew;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa !";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult UpdateComponentProduct(ProductComponent obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var parent = _context.MaterialProducts.FirstOrDefault(x => x.ProductCode == obj.ProductCode && x.IsDeleted == false);
                if (parent != null)
                {
                    var objUpdate = _context.ProductComponents.FirstOrDefault(x => x.ProductCode.Equals(obj.ProductCode) && x.Code.Equals(obj.Code) && !x.IsDeleted);
                    if (objUpdate == null)
                    {
                        msg.Error = true;
                        msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                    }
                    else
                    {
                        objUpdate.Name = obj.Name;
                        objUpdate.Quantity = obj.Quantity;
                        objUpdate.Unit = obj.Unit;

                        objUpdate.UpdatedTime = DateTime.Now;
                        objUpdate.UpdatedBy = ESEIM.AppContext.UserName;

                        _context.ProductComponents.Update(objUpdate);
                        _context.SaveChanges();
                        msg.Error = false;
                        msg.Title = "Chỉnh sửa thành công";
                    }
                }
                else
                {
                    msg.Error = false;
                    msg.Title = "Danh mục sản phẩm không tồn tại, vui lòng làm mới trang";
                }

            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi chỉnh sửa";
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult DeleteComponentProduct(int Id)
        {
            JMessage msg = new JMessage();
            try
            {
                var objNew = _context.ProductComponents.FirstOrDefault(x => x.Id == Id);
                if (objNew == null)
                {
                    msg.Error = true;
                    msg.Title = "Thuộc tính mở rộng không tồn tại, vui lòng làm mới trang";
                }
                else
                {
                    objNew.DeletedTime = DateTime.Now;
                    objNew.DeletedBy = ESEIM.AppContext.UserName;
                    objNew.IsDeleted = true;

                    _context.ProductComponents.Update(objNew);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Xóa thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi khi xóa !";
            }
            return Json(msg);
        }

        #endregion

        #region Tổng mua hàng nhà cung cấp
        [HttpPost]
        public JsonResult GetListProductReportStaticsPo()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                //var rs = from b in _context.SubProducts.Where(x => !x.IsDeleted)
                //         join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                //         from c2 in c1.DefaultIfEmpty()
                //         orderby b.ProductCode
                //         select new
                //         {
                //             Code = b.ProductQrCode,
                //             Name = b.AttributeName,
                //             Unit = b.Unit,
                //             ProductCode = b.ProductCode,
                //             UnitName = c2.ValueSet,
                //             b.AttributeCode,
                //             b.AttributeName,
                //             ProductType = "SUB_PRODUCT",
                //         };

                //var rs1 = from b in _context.MaterialProducts.Where(x => !x.IsDeleted && x.TypeCode == "FINISHED_PRODUCT")
                //          join c in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.Unit)) on b.Unit equals c.CodeSet into c1
                //          from c2 in c1.DefaultIfEmpty()
                //          orderby b.ProductCode
                //          select new
                //          {
                //              Code = b.ProductCode,
                //              Name = string.Format("Thành phẩm: {0}", b.ProductName),
                //              Unit = b.Unit,
                //              ProductCode = b.ProductCode,
                //              UnitName = c2.ValueSet,
                //              AttributeCode = "",
                //              AttributeName = "",
                //              ProductType = "FINISHED_PRODUCT",
                //          };
                var query = (from a in _context.VProductAllTables
                             orderby a.ProductName
                             select new
                             {
                                 Code = a.ProductCode,
                                 Name = a.ProductName,
                                 ProductType = a.ProductType,
                             });
                msg.Object = query;
                //msg.Object = rs1.Concat(rs);
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListContractReportStaticsPo()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listBuyPo = _context.PoBuyerHeaders.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.PoSupCode)).OrderByDescending(x => x.Id).Select(x => new
                {
                    Code = x.PoSupCode,
                    Name = x.PoSupCode
                }).ToList();
                msg.Object = listBuyPo;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetListSupplierReportStaticsPo()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.Suppliers.Where(x => !x.IsDeleted).Select(x => new
                {
                    Code = x.SupCode,
                    Name = x.SupName
                }).ToList();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        public class JTableReportStaticsPoSupyModel : JTableModel
        {
            public string ProductCode { get; set; }
            public string ProductType { get; set; }
            public string Name { get; set; }
            public string FromTo { get; set; }
            public string DateTo { get; set; }
            public string Category { get; set; }
            public string Group { get; set; }
            public string Type { get; set; }
            public string Status { get; set; }
            public string PoSupCode { get; set; }
            public string CusCode { get; set; }
            public string SupCode { get; set; }
            public int CurrentPageView { get; set; }
        }
        [HttpPost]
        public JsonResult GetReportStaticsPoSup(JTableReportStaticsPoSupyModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var data1 = from a in _context.VReportStaticsPoSups
                              where (string.IsNullOrEmpty(model.Category) || a.Category.Equals(model.Category))
                                 && (string.IsNullOrEmpty(model.Name) || a.ProductName.ToLower().Contains(model.Name.ToLower()))
                                 && (string.IsNullOrEmpty(model.PoSupCode) || a.PoCode.Equals(model.PoSupCode) || a.HeaderCode.Equals(model.PoSupCode))
                                 && (string.IsNullOrEmpty(model.CusCode) || a.CusCode.Equals(model.CusCode))
                                 && (string.IsNullOrEmpty(model.SupCode) || a.SupCode.Equals(model.SupCode))
                                 && (string.IsNullOrEmpty(model.Type) || a.Type.Equals(model.Type))
                                 && (string.IsNullOrEmpty(model.ProductCode) || a.ProductCode.Equals(model.ProductCode))
                                 && (string.IsNullOrEmpty(model.ProductType) || a.ProductType.Equals(model.ProductType))
                                 && ((fromDate == null) || (a.CreatedTime.Value.Date >= fromDate.Value.Date))
                                 && ((toDate == null) || (a.CreatedTime.Value.Date <= toDate.Value.Date))
                              select new
                              {
                                  a.Id,
                                  a.ProductCode,
                                  a.ProductName,
                                  a.ProductType,
                                  a.Cost,
                                  a.Quantity,
                                  Total = a.Cost * a.Quantity,
                                  a.QuantityNeedImpExp,
                                  a.CusCode,
                                  a.CusName,
                                  a.SupCode,
                                  a.SupName,
                                  a.CreatedTime,
                                  a.Category,
                                  a.CategoryName,
                                  a.Type,
                                  a.Unit,
                                  a.UnitName,
                                  a.HeaderCode,
                                  a.HeaderName,
                                  a.PoCode,
                                  a.PoName,
                                  CreatedTimeSale = a.Type.Equals("SALE_EXP") ? a.CreatedTime : (DateTime?)null,
                                  CreatedTimeBuy = a.Type.Equals("BUY_IMP") ? a.CreatedTime : (DateTime?)null
                              };
                var data = data1.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(model.Length).AsNoTracking().ToList();
                var count = data1.Count();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTotalPoSup(JTableReportStaticsPoSupyModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var data1 = from a in _context.VReportStaticsPoSups
                            where (string.IsNullOrEmpty(model.Category) || a.Category.Equals(model.Category))
                               && (string.IsNullOrEmpty(model.Name) || a.ProductName.ToLower().Contains(model.Name.ToLower()))
                               && (string.IsNullOrEmpty(model.PoSupCode) || a.PoCode.Equals(model.PoSupCode) || a.HeaderCode.Equals(model.PoSupCode))
                               && (string.IsNullOrEmpty(model.CusCode) || a.CusCode.Equals(model.CusCode))
                               && (string.IsNullOrEmpty(model.SupCode) || a.SupCode.Equals(model.SupCode))
                               && (string.IsNullOrEmpty(model.Type) || a.Type.Equals(model.Type))
                               && (string.IsNullOrEmpty(model.ProductCode) || a.ProductCode.Equals(model.ProductCode))
                               && (string.IsNullOrEmpty(model.ProductType) || a.ProductType.Equals(model.ProductType))
                               && ((fromDate == null) || (a.CreatedTime.Value.Date >= fromDate.Value.Date))
                               && ((toDate == null) || (a.CreatedTime.Value.Date <= toDate.Value.Date))
                            select new
                            {
                                a.Id,
                                a.ProductCode,
                                a.ProductName,
                                a.ProductType,
                                a.Cost,
                                a.Quantity,
                                Total = a.Cost * a.Quantity,
                                a.QuantityNeedImpExp,
                                a.CusCode,
                                a.CusName,
                                a.SupCode,
                                a.SupName,
                                a.CreatedTime,
                                a.Category,
                                a.CategoryName,
                                a.Type,
                                a.Unit,
                                a.UnitName,
                                a.HeaderCode,
                                a.HeaderName,
                                a.PoCode,
                                a.PoName,
                                CreatedTimeSale = a.Type.Equals("SALE_EXP") ? a.CreatedTime : (DateTime?)null,
                                CreatedTimeBuy = a.Type.Equals("BUY_IMP") ? a.CreatedTime : (DateTime?)null
                            };
                var total = new
                {
                    costTotal = data1.Sum(x => x.Cost),
                    quantityTotal = data1.Sum(x => x.Quantity),
                    total = data1.Sum(x => x.Total)
                };

                msg.Object = total;
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        #endregion

        #region Tiền đã thu/công nợ
        [HttpPost]
        public JsonResult GetListContractReportStaticsPoCusPayment()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var rs = _context.PoSaleHeaders.Where(x => !x.IsDeleted).OrderBy(x => x.Title).Select(x => new { Code = x.ContractCode, Name = x.ContractCode + " - " + x.Title });
                msg.Object = rs;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListCustomerReportStaticsPoCusPayment()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var rs = _context.Customerss.Where(x => !x.IsDeleted).Select(x => new { Code = x.CusCode, Name = x.CusName });
                msg.Object = rs;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        public class JTableRSPoCusPaymentModel : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string CusCode { get; set; }
            public string Code { get; set; }
            public string Title { get; set; }
        }
        [HttpPost]
        public JsonResult GetReportStaticsPoCusPayment(JTableRSPoCusPaymentModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = new List<ReportStaticsPoCusPaymentGrid>();
                string[] param = new string[] { "@fromDate", "@toDate", "@contractCode", "@cusCode", "@startRecord", "@endRecord" };
                object[] val = new object[] { fromDate, toDate, model.ContractCode, model.CusCode, intBeginFor + 1, intBeginFor + model.Length };
                DataTable rs = _repositoryService.GetDataTableProcedureSql("P_TRADE_REVENUE_PO_CUS_PAYMENT_JOIN_PAGING_4_ADMIN", param, val);
                query = CommonUtil.ConvertDataTable<ReportStaticsPoCusPaymentGrid>(rs);
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(model.Length).ToList();
                var count = query.Count();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        #endregion

        #region Doanh số bán hàng
        public class JTableReportStaticsPoCusModelCustom : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public string ContractCode { get; set; }
            public string CusCode { get; set; }
            public string ProductCode { get; set; }
            public string ProductType { get; set; }
        }
        [HttpPost]
        public JsonResult GetReportStaticsPoCus(JTableReportStaticsPoCusModelCustom model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = new List<ReportStaticsPoCusGrid>();
                string[] param = new string[] { "@fromDate", "@toDate", "@contractCode", "@cusCode", "@productCode", "@productType", "@startRecord", "@endRecord" };
                object[] val = new object[] { fromDate, toDate, model.ContractCode, model.CusCode, model.ProductCode, model.ProductType, intBeginFor + 1, intBeginFor + model.Length };
                DataTable rs = _repositoryService.GetDataTableProcedureSql("P_TRADE_REVENUE_PO_CUS_DETAIL_JOIN_PAGING_4_ADMIN", param, val);
                query = CommonUtil.ConvertDataTable<ReportStaticsPoCusGrid>(rs);
                var data = query.OrderByDescending(x => x.Id).Skip(intBeginFor).Take(model.Length).ToList();
                var count = query.Count();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        #endregion

        #region Thẻ kho
        [HttpPost]
        public JsonResult GetListStoreReportStaticsCard()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.EDMSWareHouses.Where(x => !x.WHS_Flag && x.Type == "PR").Select(x => new
                {
                    Code = x.WHS_Code,
                    Name = x.WHS_Name
                }).ToList();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        public class JTableReportStaticsStockCardModel : JTableModel
        {
            public string ProductCode { get; set; }
            public string ProductName { get; set; }
            public string ProductType { get; set; }
            public string Code { get; set; }
            public string Name { get; set; }
            public string FromTo { get; set; }
            public string DateTo { get; set; }
            public string Category { get; set; }
            public string Group { get; set; }
            public string Type { get; set; }
            public string Status { get; set; }
            public string ContractCode { get; set; }
            public string CusCode { get; set; }
            public string SupCode { get; set; }
            public string StoreCode { get; set; }
        }
        [HttpPost]
        public JsonResult GetReportStaticsStockCard(JTableReportStaticsStockCardModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var queryRs = from a in _context.VImpExpProducts
                              where (string.IsNullOrEmpty(model.Category) || a.Category.Equals(model.Category))
                                 && (string.IsNullOrEmpty(model.ContractCode) || a.PoCode.Equals(model.ContractCode) || a.HeaderCode.Equals(model.ContractCode))
                                 && (string.IsNullOrEmpty(model.CusCode) || a.CusCode.Equals(model.CusCode))
                                 && (string.IsNullOrEmpty(model.SupCode) || a.SupCode.Equals(model.SupCode))
                                 && (string.IsNullOrEmpty(model.StoreCode) || a.StoreCode.Equals(model.StoreCode))
                                 && (string.IsNullOrEmpty(model.Type) || a.Type.Contains(model.Type))
                                 && (string.IsNullOrEmpty(model.ProductCode) || a.ProductCode.Equals(model.ProductCode))
                                 && (string.IsNullOrEmpty(model.ProductType) || a.ProductType.Equals(model.ProductType))
                                 && ((fromDate == null) || (a.CreatedTime.Value.Date >= fromDate.Value.Date))
                                 && ((toDate == null) || (a.CreatedTime.Value.Date <= toDate.Value.Date))
                              select new
                              {
                                  a.Id,
                                  a.ProductCode,
                                  a.ProductName,
                                  a.ProductType,
                                  a.Cost,
                                  a.Quantity,
                                  //a.QuantityNeedImpExp,
                                  //a.CusCode,
                                  //a.CusName,
                                  //a.SupCode,
                                  //a.SupName,
                                  a.CreatedTime,
                                  //a.Category,
                                  //a.CategoryName,
                                  a.Type,
                                  a.Unit,
                                  a.UnitName,
                                  a.HeaderCode,
                                  a.HeaderName,
                                  //a.PoCode,
                                  //a.PoName,
                                  a.StoreCode,
                                  a.StoreName,
                                  a.QuantityInStore,
                                  a.TotalQuantityByStore,
                                  a.TotalQuantityInStore,
                                  //CreatedTimeSale = a.Type.Equals("SALE_EXP") ? a.CreatedTime : (DateTime?)null,
                                  //CreatedTimeBuy = a.Type.Equals("BUY_IMP") ? a.CreatedTime : (DateTime?)null
                              };
                var count = queryRs.Count();
                var data = queryRs.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTotalCard(JTableReportStaticsStockCardModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = (from a in _context.VImpExpProducts
                             where (string.IsNullOrEmpty(model.Category) || a.Category.Equals(model.Category))
                                && (string.IsNullOrEmpty(model.ContractCode) || a.PoCode.Equals(model.ContractCode) || a.HeaderCode.Equals(model.ContractCode))
                                && (string.IsNullOrEmpty(model.CusCode) || a.CusCode.Equals(model.CusCode))
                                && (string.IsNullOrEmpty(model.SupCode) || a.SupCode.Equals(model.SupCode))
                                && (string.IsNullOrEmpty(model.StoreCode) || a.StoreCode.Equals(model.StoreCode))
                                && (string.IsNullOrEmpty(model.Type) || a.Type.Contains(model.Type))
                                && (string.IsNullOrEmpty(model.ProductCode) || a.ProductCode.Equals(model.ProductCode))
                                && (string.IsNullOrEmpty(model.ProductType) || a.ProductType.Equals(model.ProductType))
                                && ((fromDate == null) || (a.CreatedTime.Value.Date >= fromDate.Value.Date))
                                && ((toDate == null) || (a.CreatedTime.Value.Date <= toDate.Value.Date))
                             select new
                             {
                                 a.ProductCode,
                                 a.ProductName,
                                 a.ProductType,
                                 a.StoreCode,
                                 a.Type,
                                 a.Cost,
                                 a.Quantity,
                                 a.QuantityInStore,
                                 a.TotalQuantityByStore,
                                 a.TotalQuantityInStore
                             }).ToList();
                var queryRs = new
                {
                    TotalCost = query.Sum(x => x.Cost),
                    TotalAmount = query.Sum(x => x.Cost * x.Quantity),
                    TotalQuantity = query.Where(k => k.Type == "BUY_IMP").Sum(i => i.Quantity) - query.Where(k => k.Type == "SALE_EXP").Sum(i => i.Quantity),
                    //TotalQuantityInStore = query.GroupBy(k => k.ProductCode).Select(m => new { m.First().TotalQuantityInStore, m.First().ProductCode }).Sum(h => h.TotalQuantityInStore)
                    TotalQuantityByStore = query.GroupBy(k => new { k.ProductCode, k.StoreCode }).Select(m => new { m.First().TotalQuantityByStore, m.First().ProductCode }).Sum(h => h.TotalQuantityByStore),
                    TotalQuantityInStore = query.GroupBy(k => new { k.ProductCode }).Select(m => new { m.First().TotalQuantityInStore, m.First().ProductCode }).Sum(h => h.TotalQuantityInStore),
                };
                msg.Object = queryRs;
            }
            catch (Exception ex)
            {
                msg.Error = true;
            }
            return Json(msg);
        }
        #endregion

        #region Lịch sử sản phẩm
        [HttpPost]
        public JsonResult GetListContractHistorySale()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listSale = _context.PoSaleHeaders.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.ContractCode)).OrderByDescending(x => x.ContractHeaderID).Select(x => new
                {
                    Code = x.ContractCode,
                    Name = x.Title
                }).ToList();

                var listSaleRetail = _context.ProdDeliveryHeaders.Where(x => !x.IsDeleted).OrderByDescending(x => x.Id).Select(x => new
                {
                    Code = x.TicketCode,
                    Name = x.Title
                }).ToList();

                var listBuyPo = _context.PoBuyerHeaders.Where(x => !x.IsDeleted && !string.IsNullOrEmpty(x.PoSupCode)).OrderByDescending(x => x.Id).Select(x => new
                {
                    Code = x.PoSupCode,
                    Name = x.PoSupCode//Bỏ trường tiêu đề nên lấy trường code để hiển thị
                }).ToList();

                var listBuyRetail = _context.ProdReceivedHeaders.Where(x => !x.IsDeleted).OrderByDescending(x => x.Id).Select(x => new
                {
                    Code = x.TicketCode,
                    Name = x.Title
                }).ToList();

                var query = listSale.Concat(listSaleRetail).Concat(listBuyPo).Concat(listBuyRetail);
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        [HttpPost]
        public JsonResult GetProductTypeHistorySale()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.MaterialTypes.Where(x => x.IsDeleted == false).AsParallel().Select(x => new { x.Code, x.Name });
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        public class JTableProductHistorySaledModel : JTableModel
        {
            public string Code { get; set; }
            public string Name { get; set; }
            public string FromTo { get; set; }
            public string DateTo { get; set; }
            public string Category { get; set; }
            public string Group { get; set; }
            public string Type { get; set; }
            public string Status { get; set; }
            public string ContractCode { get; set; }
            public string CusCode { get; set; }
            public string SupCode { get; set; }
        }
        [HttpPost]
        public JsonResult GetProductHistorySale(JTableProductHistorySaledModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var queryRs = from a in _context.VHisProducts
                              where (string.IsNullOrEmpty(model.Category) || a.Category.Equals(model.Category))
                                 && (string.IsNullOrEmpty(model.Name) || a.ProductName.ToLower().Contains(model.Name.ToLower()))
                                 && (string.IsNullOrEmpty(model.ContractCode) || a.PoCode.Equals(model.ContractCode) || a.HeaderCode.Equals(model.ContractCode))
                                 && (string.IsNullOrEmpty(model.CusCode) || a.CusCode.Equals(model.CusCode))
                                 && (string.IsNullOrEmpty(model.SupCode) || a.SupCode.Equals(model.SupCode))
                                 && (string.IsNullOrEmpty(model.Type) || a.Type.Contains(model.Type))
                                 && (string.IsNullOrEmpty(model.Code) || a.ProductCode.ToLower().Contains(model.Code.ToLower()))
                                 && ((fromDate == null) || (a.CreatedTime >= fromDate))
                                 && ((toDate == null) || (a.CreatedTime <= toDate))
                              select new
                              {
                                  a.Id,
                                  a.ProductCode,
                                  a.ProductName,
                                  a.ProductType,
                                  a.Cost,
                                  a.Quantity,
                                  Total = a.Cost * a.Quantity,
                                  a.QuantityNeedImpExp,
                                  QuantityNIE = a.QuantityNeedImpExp + " " + a.UnitName,
                                  a.CusCode,
                                  a.CusName,
                                  a.SupCode,
                                  a.SupName,
                                  a.CreatedTime,
                                  a.Category,
                                  a.CategoryName,
                                  a.Type,
                                  a.Unit,
                                  a.UnitName,
                                  a.HeaderCode,
                                  a.HeaderName,
                                  a.PoCode,
                                  a.PoName,
                                  CreatedTimeSale = a.Type.Equals("SALE_EXP") ? a.CreatedTime : (DateTime?)null,
                                  CreatedTimeBuy = a.Type.Equals("BUY_IMP") ? a.CreatedTime : (DateTime?)null
                              };
                var count = queryRs.Count();
                var data = queryRs.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        #endregion

        #region Chi phí mua hàng
        public class JTablePurchaseCostModel : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public decimal? CostTotalFrom { get; set; }
            public decimal? CostTotalTo { get; set; }
            public decimal? TaxTotalFrom { get; set; }
            public decimal? TaxTotalTo { get; set; }
        }
        [HttpPost]
        public JsonResult GetPurchaseCost(JTablePurchaseCostModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = (from a in _context.ProdReceivedHeaders.Where(x => x.IsDeleted != true && x.Reason == "IMP_FROM_BUY").AsNoTracking()
                             join e in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "IMP_REASON") on a.Reason equals e.CodeSet
                             join g in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.CurrencyType)) on a.Currency equals g.CodeSet
                             where((fromDate == null) || (a.TimeTicketCreate.HasValue && a.TimeTicketCreate.Value.Date >= fromDate))
                                && ((toDate == null) || (a.TimeTicketCreate.HasValue && a.TimeTicketCreate.Value.Date <= toDate))
                             select new 
                             {
                                 Id = a.Id,
                                 CostTotal = a.CostTotal,
                                 Currency = a.Currency,
                                 CurrencyName = g.ValueSet,
                                 Discount = a.Discount,
                                 Commission = a.Commission,
                                 TaxTotal = a.TaxTotal,
                                 TimeTicketCreate = a.TimeTicketCreate,
                             });

                var results = from p in query
                              group p by new { p.TimeTicketCreate, p.Currency } into g
                              orderby g.Key.TimeTicketCreate descending
                              where (model.CostTotalFrom == null || (g.Sum(x => x.CostTotal) >= model.CostTotalFrom))
                                  && (model.CostTotalTo == null || (g.Sum(x => x.CostTotal) <= model.CostTotalTo))
                                  && (model.TaxTotalFrom == null || (g.Sum(x => x.TaxTotal) >= model.TaxTotalFrom))
                                  && (model.TaxTotalTo == null || (g.Sum(x => x.TaxTotal) <= model.TaxTotalTo))
                              select new 
                              {
                                  Id = g.FirstOrDefault().Id,
                                  CostTotal = g.Sum(x => x.CostTotal),
                                  Currency = g.Key.Currency,
                                  CurrencyName = g.FirstOrDefault().CurrencyName,
                                  Discount = g.Sum(x => x.Discount),
                                  Commission = g.Sum(x => x.Commission),
                                  TaxTotal = g.Sum(x => x.TaxTotal),
                                  TimeTicketCreate = g.Key.TimeTicketCreate,
                              };
                var count = results.Count();
                var data = results.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTotalPurchaseCost(JTablePurchaseCostModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = (from a in _context.ProdReceivedHeaders.Where(x => x.IsDeleted != true && x.Reason == "IMP_FROM_BUY").AsNoTracking()
                             join e in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == "IMP_REASON") on a.Reason equals e.CodeSet
                             join g in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.CurrencyType)) on a.Currency equals g.CodeSet
                             where ((fromDate == null) || (a.TimeTicketCreate.HasValue && a.TimeTicketCreate.Value.Date >= fromDate))
                                && ((toDate == null) || (a.TimeTicketCreate.HasValue && a.TimeTicketCreate.Value.Date <= toDate))
                                 
                             select new
                             {
                                 Id = a.Id,
                                 CostTotal = a.CostTotal,
                                 Currency = a.Currency,
                                 CurrencyName = g.ValueSet,
                                 Discount = a.Discount,
                                 Commission = a.Commission,
                                 TaxTotal = a.TaxTotal,
                                 TimeTicketCreate = a.TimeTicketCreate,
                             });

                var results = from p in query
                              group p by new { p.TimeTicketCreate, p.Currency } into g
                              orderby g.Key.TimeTicketCreate descending
                              where (model.CostTotalFrom == null || (g.Sum(x => x.CostTotal) >= model.CostTotalFrom))
                                 && (model.CostTotalTo == null || (g.Sum(x => x.CostTotal) <= model.CostTotalTo))
                                 && (model.TaxTotalFrom == null || (g.Sum(x => x.TaxTotal) >= model.TaxTotalFrom))
                                 && (model.TaxTotalTo == null || (g.Sum(x => x.TaxTotal) <= model.TaxTotalTo))
                              select new
                              {
                                  Id = g.FirstOrDefault().Id,
                                  CostTotal = g.Sum(x => x.CostTotal),
                                  Currency = g.Key.Currency,
                                  CurrencyName = g.FirstOrDefault().CurrencyName,
                                  Discount = g.Sum(x => x.Discount),
                                  Commission = g.Sum(x => x.Commission),
                                  TaxTotal = g.Sum(x => x.TaxTotal),
                                  TimeTicketCreate = g.Key.TimeTicketCreate,
                              };
                var sumCostTotal = results.Sum(x => x.CostTotal);
                var sumDiscount = results.Sum(x => x.Discount);
                var sumCommission = results.Sum(x => x.Commission);
                var sumTaxTotal = results.Sum(x => x.TaxTotal);

                var rs = new { totalCostTotal = sumCostTotal, totalDiscount = sumDiscount, totalCommission = sumCommission, totalTaxTotal = sumTaxTotal };
                msg.Object = rs;
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        #endregion

        #region Doanh thu bán hàng
        public class JTableRevenueModel : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public decimal? RealBugetFrom { get; set; }
            public decimal? RealBugetTo { get; set; }
            public decimal? BudgetExcludeTaxFrom { get; set; }
            public decimal? BudgetExcludeTaxTo { get; set; }
            public decimal? TaxTotalFrom { get; set; }
            public decimal? TaxTotalTo { get; set; }
        }
        [HttpPost]
        public JsonResult GetRevenue(JTableRevenueModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = (from a in _context.PoSaleHeaders.Where(x => !x.IsDeleted).AsNoTracking()
                             join g in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.CurrencyType)) on a.Currency equals g.CodeSet into g1
                             from g2 in g1.DefaultIfEmpty()
                             where
                             (fromDate == null || (a.EffectiveDate >= fromDate))
                             && (toDate == null || (a.EffectiveDate <= toDate))
                             && (model.RealBugetFrom == null || (a.RealBudget >= model.RealBugetFrom))
                             && (model.RealBugetTo == null || (a.RealBudget <= model.RealBugetTo))
                             && (model.BudgetExcludeTaxFrom == null || ((a.RealBudget * a.ExchangeRate) >= model.BudgetExcludeTaxFrom))
                             && (model.BudgetExcludeTaxTo == null || ((a.RealBudget * a.ExchangeRate) <= model.BudgetExcludeTaxTo))
                             && (model.TaxTotalFrom == null || ((a.RealBudget - a.Budget) >= model.TaxTotalFrom))
                             && (model.TaxTotalTo == null || ((a.RealBudget - a.Budget) <= model.TaxTotalTo))
                             select new 
                             {
                                 Id = a.ContractHeaderID,
                                 Currency = a.Currency,
                                 CurrencyName = g2.ValueSet,
                                 Discount = 0,
                                 Commission = 0,
                                 TimeTicketCreate = a.EffectiveDate,
                                 ContractTitle = a.Title,
                                 ContractNo = a.ContractNo,
                                 Budget = a.Budget,//Tổng tiền trước thuế
                                 RealBudget = a.RealBudget,//Tổng tiền sau thuế
                                 TaxTotal = a.RealBudget - a.Budget,//Tổng thuế= Tổng tiền sau thuế - Tổng tiền trước thuế
                                 BudgetExcludeTax = a.RealBudget * a.ExchangeRate // Tổng tiền đã quy đổi
                             });
                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTotalRevenue(JTableRevenueModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var fromDate = !string.IsNullOrEmpty(model.FromDate) ? DateTime.ParseExact(model.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var toDate = !string.IsNullOrEmpty(model.ToDate) ? DateTime.ParseExact(model.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;

                var query = (from a in _context.PoSaleHeaders.Where(x => !x.IsDeleted).AsNoTracking()
                             join g in _context.CommonSettings.Where(x => !x.IsDeleted && x.Group == EnumHelper<PublishEnum>.GetDisplayValue(PublishEnum.CurrencyType)) on a.Currency equals g.CodeSet into g1
                             from g2 in g1.DefaultIfEmpty()
                             where
                             (fromDate == null || (a.EffectiveDate >= fromDate))
                             && (toDate == null || (a.EffectiveDate <= toDate))
                             && (model.RealBugetFrom == null || (a.RealBudget >= model.RealBugetFrom))
                             && (model.RealBugetTo == null || (a.RealBudget <= model.RealBugetTo))
                             && (model.BudgetExcludeTaxFrom == null || ((a.RealBudget * a.ExchangeRate) >= model.BudgetExcludeTaxFrom))
                             && (model.BudgetExcludeTaxTo == null || ((a.RealBudget * a.ExchangeRate) <= model.BudgetExcludeTaxTo))
                             && (model.TaxTotalFrom == null || ((a.RealBudget - a.Budget) >= model.TaxTotalFrom))
                             && (model.TaxTotalTo == null || ((a.RealBudget - a.Budget) <= model.TaxTotalTo))
                             select new
                             {
                                 Id = a.ContractHeaderID,
                                 Currency = a.Currency,
                                 CurrencyName = g2.ValueSet,
                                 Discount = 0,
                                 Commission = 0,
                                 TimeTicketCreate = a.EffectiveDate,
                                 ContractTitle = a.Title,
                                 ContractNo = a.ContractNo,
                                 Budget = a.Budget,//Tổng tiền trước thuế
                                 RealBudget = a.RealBudget,//Tổng tiền sau thuế
                                 TaxTotal = a.RealBudget - a.Budget,//Tổng thuế= Tổng tiền sau thuế - Tổng tiền trước thuế
                                 BudgetExcludeTax = a.RealBudget * a.ExchangeRate // Tổng tiền đã quy đổi
                             });
                var sumBugetTotal = query.Sum(x => x.Budget);
                var sumRealBuget = query.Sum(x => x.RealBudget);
                var sumBudgetExcludeTax = query.Sum(x => x.BudgetExcludeTax);
                var sumTaxTotal = query.Sum(x => x.TaxTotal);
                var rs = new { totalBuget = sumBugetTotal, totalRealBuget = sumRealBuget, totalBudgetExcludeTax = sumBudgetExcludeTax, totalTaxTotal = sumTaxTotal };
                msg.Object = rs;
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        #endregion

        #region Xếp lại sản phẩm
        public class FreeStorageRes
        {
            public int Id { get; set; }
            public string ProductQrCode { get; set; }
            public string WHS_Name { get; set; }
            public string FloorName { get; set; }
            public string L_Text { get; set; }
            public string RackName { get; set; }
            public string RackPosition { get; set; }
            public string Position { get; set; }
            public string PositionOld { get; set; }
            public string CreatedBy { get; set; }
            public DateTime CreatedTime { get; set; }
        }
        public class JTableFreeStorageModel : JTableModel
        {
            public string FromDate { get; set; }
            public string ToDate { get; set; }
            public decimal? RealBugetFrom { get; set; }
            public decimal? RealBugetTo { get; set; }
            public decimal? BudgetExcludeTaxFrom { get; set; }
            public decimal? BudgetExcludeTaxTo { get; set; }
            public decimal? TaxTotalFrom { get; set; }
            public decimal? TaxTotalTo { get; set; }
        }
        [HttpPost]
        public JsonResult GetFreeStorage(JTableFreeStorageModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                var query = from a in _context.ProductEntityMappings.Where(x => x.IsDeleted == false)
                            join b in _context.EDMSWareHouses.Where(x => x.WHS_Flag != true && x.Type == "PR") on a.WHS_Code equals b.WHS_Code into b2
                            from b in b2.DefaultIfEmpty()
                            join c in _context.EDMSFloors on a.FloorCode equals c.FloorCode into c2
                            from c in c2.DefaultIfEmpty()
                            join d in _context.EDMSLines on a.LineCode equals d.LineCode into d2
                            from d in d2.DefaultIfEmpty()
                            join e in _context.EDMSRacks on a.RackCode equals e.RackCode into e2
                            from e in e2.DefaultIfEmpty()
                            select new FreeStorageRes
                            {
                                Id = a.Id,
                                ProductQrCode = a.ProductQrCode,
                                WHS_Name = (b != null ? b.WHS_Name : ""),
                                FloorName = (c != null ? c.FloorName : ""),
                                L_Text = (d != null ? d.L_Text : ""),
                                RackName = (e != null ? e.RackName : ""),
                                RackPosition = a.RackPosition,
                                Position = (c != null ? c.FloorName : "") + "_" + (d != null ? d.L_Text : "") + "_" + (e != null ? e.RackName : ""),
                                //CreatedBy = (f!=null?f.GivenName:""),
                                //CreatedTime = a.CreatedTime
                            };
                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                foreach (var item in data)
                {
                    item.PositionOld = getOldPos(item.Id);
                }
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }
        [NonAction]
        public string getOldPos(int Id)
        {
            string s = "";
            var dt = _context.EDMSMoveProductLogs.OrderByDescending(x => x.Id).FirstOrDefault(x => x.MappingId == Id);
            if (dt != null)
            {
                var data = from a in _context.EDMSMoveProductLogs
                           join b in _context.EDMSFloors on a.FloorCodeOld equals b.FloorCode into b2
                           from b in b2.DefaultIfEmpty()
                           join c in _context.EDMSLines on a.LineCodeOld equals c.LineCode into c2
                           from c in c2.DefaultIfEmpty()
                           join d in _context.EDMSRacks on a.RackCodeOld equals d.RackCode into d2
                           from d in d2.DefaultIfEmpty()
                           where a.MappingId == Id
                           orderby a.Id descending
                           select new
                           {
                               Position = (b != null ? b.FloorName : "") + "_" + (c != null ? c.L_Text : "") + "_" + (d != null ? d.RackName : "")
                           };
                var list = data.ToList();
                if (list.Count > 0)
                {
                    s = list[0].Position;
                }
            }
            return s;
        }

        [HttpPost]
        public JsonResult GetListProductFreeStorage()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = from a in _context.ProductEntityMappings
                           join b in _context.EDMSRacks on a.RackCode equals b.RackCode into b2
                           from b in b2.DefaultIfEmpty()
                           where a.IsDeleted == false

                           select new
                           {
                               Code = a.Id,
                               Name = a.ProductQrCode + " _ " + (b != null ? b.RackName : ""),
                           };
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetFloorInStoreByProductId(int Id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ProductEntityMappings.FirstOrDefault(x => x.Id == Id);
                if (data != null && !string.IsNullOrEmpty(data.WHS_Code))
                {
                    var listFloor = _context.EDMSFloors.Where(x => x.WHS_Code == data.WHS_Code);
                    msg.Object = listFloor;
                }
                else
                {
                    msg.Object = data;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetLineByFloor(string floorCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listFloor = _context.EDMSLines.Where(x => x.FloorCode == floorCode);
                msg.Object = listFloor;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetRackByLine(string lineCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listFloor = _context.EDMSRacks.Where(x => x.LineCode == lineCode);
                msg.Object = listFloor;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetQuantityEmptyInRack(string rackCode)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var rs = _context.EDMSRacks.AsParallel().FirstOrDefault(x => x.RackCode.Equals(rackCode));
                if (rs != null)
                {
                    var prodMapping = _context.ProductEntityMappings.Where(x => !x.IsDeleted && x.RackCode.Equals(rackCode));
                    var instock = Convert.ToInt32(prodMapping.Sum(x => x.Quantity));
                    var result = rs.CNT_Box - instock;
                    msg.Object = result.ToString();
                }
                else
                {
                    msg.Object = "";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetItemFreeStorage(int Id)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = from a in _context.ProductEntityMappings.Where(x => x.IsDeleted == false && x.Id == Id)
                            join b in _context.EDMSWareHouses.Where(x => x.Type == "PR") on a.WHS_Code equals b.WHS_Code into b2
                            from b in b2.DefaultIfEmpty()
                            join c in _context.EDMSFloors on a.FloorCode equals c.FloorCode into c2
                            from c in c2.DefaultIfEmpty()
                            join d in _context.EDMSLines on a.LineCode equals d.LineCode into d2
                            from d in d2.DefaultIfEmpty()
                            join e in _context.EDMSRacks on a.RackCode equals e.RackCode into e2
                            from e in e2.DefaultIfEmpty()

                            select new
                            {
                                a.Id,
                                a.ProductQrCode,
                                WHS_Name = (b != null ? b.WHS_Name : ""),
                                FloorName = (c != null ? c.FloorName : ""),
                                L_Text = (d != null ? d.L_Text : ""),
                                RackName = (e != null ? e.RackName : ""),
                                a.RackPosition,
                                a.Quantity
                            };
                msg.Object = query.FirstOrDefault();
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        public class MoveProductModel
        {
            public int Id { get; set; }
            public string Floor { get; set; }
            public string Line { get; set; }
            public string Rack { get; set; }
            public int QuantityEmpty { get; set; }
            public int Quantity { get; set; }
        }
        [HttpPost]
        public JsonResult SortFreeStorage(MoveProductModel obj)
        {
            JMessage msg = new JMessage();
            try
            {
                var data = _context.ProductEntityMappings.FirstOrDefault(x => x.Id == obj.Id);
                if (data != null)
                {
                    if (data.FloorCode == obj.Floor && data.LineCode == obj.Line && data.RackCode == obj.Rack)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_FreeStorage_ERR_Location";
                    }
                    else if (obj.QuantityEmpty < obj.Quantity)
                    {
                        msg.Error = true;
                        msg.Title = "HTML_FreeStorage_RACK_FULL";
                    }
                    else
                    {
                        EDMSMoveProductLog productLog = new EDMSMoveProductLog();
                        productLog.ProductCode = data.ProductQrCode;
                        productLog.RackCodeOld = data.RackCode;
                        productLog.RackCodeNew = obj.Rack;
                        productLog.LineCodeOld = data.LineCode;
                        productLog.FloorCodeOld = data.FloorCode;
                        productLog.MappingId = data.Id;
                        productLog.CreatedBy = ESEIM.AppContext.UserName;
                        productLog.CreatedTime = DateTime.Now;
                        _context.EDMSMoveProductLogs.Add(productLog);

                        data.FloorCode = obj.Floor;
                        data.LineCode = obj.Line;
                        data.RackCode = obj.Rack;

                        data.UpdatedBy = User.Identity.Name;
                        data.UpdatedTime = DateTime.Now;
                        _context.ProductEntityMappings.Update(data);

                        var listExp = _context.ProdReceivedDetails.Where(x => x.ProductQrCode == data.ProductQrCode && x.IsDeleted == false).ToList();
                        foreach (var item in listExp)
                        {
                            item.RackCode = data.RackCode;
                        }
                        _context.ProdReceivedDetails.UpdateRange(listExp);
                        _context.SaveChanges();
                        msg.Error = false;
                        msg.Title = "Xếp lại vị trí sản phẩm thành công";
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "HTML_FreeStorage_ERR_EMTRY";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "HTML_FreeStorage_ERR";
            }
            return Json(msg);
        }
        #endregion

        #region Giá bán sản phẩm
        public class JTableSellPriceModel : JTableModel
        {
            public string Title { get; set; }
            public string Status { get; set; }
            public string FromTo { get; set; }
            public string DateTo { get; set; }
        }
        [HttpPost]
        public JsonResult GetSellPrice(JTableSellPriceModel model)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                int intBeginFor = (model.CurrentPage - 1) * model.Length;
                DateTime? fromDate = !string.IsNullOrEmpty(model.FromTo) ? DateTime.ParseExact(model.FromTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                DateTime? toDate = !string.IsNullOrEmpty(model.DateTo) ? DateTime.ParseExact(model.DateTo, "dd/MM/yyyy", CultureInfo.InvariantCulture) : (DateTime?)null;
                var query = from a in _context.ProductCostHeaders
                            join b in _context.Users.Where(x => x.Active) on a.CreatedBy equals b.UserName
                            join c in _context.CommonSettings.Where(x => x.Group == "SERVICE_STATUS") on a.Status equals c.CodeSet
                            where a.IsDeleted == false
                            && (string.IsNullOrEmpty(model.Title) || (a.Title.ToLower().Contains(model.Title.ToLower())))
                            && (string.IsNullOrEmpty(model.Status) || (a.Status.ToLower().Equals(model.Status.ToLower())))
                            && ((fromDate == null) || (a.CreatedTime >= fromDate))
                            && ((toDate == null) || (a.CreatedTime <= toDate))
                            select new 
                            {
                                Id = a.Id,
                                Title = a.Title,
                                Note = a.Note,
                                Status = c != null ? c.ValueSet : "",
                                EffectiveDate = a.EffectiveDate,
                                ExpiryDate = a.ExpiryDate,
                                CreatedTime = a.CreatedTime,
                                CreatedBy = b.GivenName,
                                QrCode = a.HeaderCode + "_" + (a.EffectiveDate != null ? a.EffectiveDate.ToString("dd/MM/yyyy") : "") + "_" + (a.ExpiryDate != null ? a.ExpiryDate.ToString("dd/MM/yyyy") : "")
                            };
                var count = query.Count();
                var data = query.OrderByDescending(x => x.Id).AsNoTracking().Skip(intBeginFor).Take(model.Length).ToList();
                msg.Object = new { count, data };
            }
            catch (Exception ex)
            {
                throw;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListStatusSellPrice()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.CommonSettings.Where(x => x.Group == "SERVICE_STATUS").Select(x => new { Code = x.CodeSet, Name = x.ValueSet });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetServiceResponsibleUser()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.HREmployees.Where(x => x.flag == 1).Select(x => new { Code = x.Id, Name = x.fullname });
                msg.Object = data;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetCarManagerDriver()
        {
            var msg = new JMessage { Error = false, Title = "" };
            var data = _context.Users.Select(x => new { Code = x.UserName, Name = x.GivenName });
            msg.Object = new { data };
            return Json(msg);
        }

        public class ProductCostHeaderModel
        {
            public int Id { get; set; }
            public string HeaderCode { get; set; }
            public string Title { get; set; }
            public DateTime EffectiveDate { get; set; }
            public DateTime ExpiryDate { get; set; }
            public string Note { get; set; }
            public string QrCode { get; set; }
            public string CreatedBy { get; set; }
            public DateTime CreatedTime { get; set; }
            public string UpdatedBy { get; set; }
            public DateTime? UpdatedTime { get; set; }
            public string DeletedBy { get; set; }
            public DateTime? DeletedTime { get; set; }
            public bool IsDeleted { get; set; }
            public string sEffectiveDate { get; set; }
            public string sExpiryDate { get; set; }
            public string ResponsibleUser { get; set; }
            public string Status { get; set; }
            public string GivenName { get; set; }
            public string UserName { get; set; }
        }

        [HttpPost]
        public object InsertSellPrice(ProductCostHeaderModel obj)
        {
            var expiryDate = !string.IsNullOrEmpty(obj.sExpiryDate) ? DateTime.ParseExact(obj.sExpiryDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now;
            var effectiveDate = !string.IsNullOrEmpty(obj.sEffectiveDate) ? DateTime.ParseExact(obj.sEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture) : DateTime.Now;
            var msg = new JMessage();
            try
            {
                var check = ValidateDate(effectiveDate, expiryDate, obj.Id);
                if (!check.Error)
                {
                    var data = new ProductCostHeader()
                    {
                        CreatedBy = obj.UserName,
                        CreatedTime = DateTime.Now,
                        IsDeleted = false,
                        ExpiryDate = expiryDate,
                        EffectiveDate = effectiveDate,
                        GivenName = obj.GivenName,
                        HeaderCode = Guid.NewGuid().ToString(),
                        Title = obj.Title,
                        Status = obj.Status,
                        ResponsibleUser = obj.ResponsibleUser,
                        Note = obj.GivenName,
                    };

                    _context.ProductCostHeaders.Add(data);
                    _context.SaveChanges();
                    msg.Error = false;
                    msg.Title = "Thêm thành công";
                    msg.Object = data;
                }
                else
                {
                    msg = check;
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                //msg.Object = ex;
                msg.Title = "Có lỗi xảy ra!";
            }
            return msg;
        }

        [HttpPost]
        public JMessage ValidateDate(DateTime effectiveDate, DateTime expiryDate, int id)
        {
            JMessage msg = new JMessage() { Error = false };
            try
            {

                var listDates = (_context.ProductCostHeaders.Where(x => !x.IsDeleted && x.Id != id)
                    .OrderBy(x => x.EffectiveDate)
                    .Select(x => new
                    {
                        x.EffectiveDate,
                        x.ExpiryDate
                    })).ToList();

                foreach (var item in listDates)
                {

                    if ((item.EffectiveDate <= effectiveDate && item.ExpiryDate >= effectiveDate))
                    {
                        msg.Error = true;
                        msg.Title = "Ngày hiệu lực từ đã tồn tại trong bảng giá khác";
                        break;
                    }
                    else if ((item.EffectiveDate <= expiryDate && item.ExpiryDate >= expiryDate))
                    {
                        msg.Error = true;
                        msg.Title = "Ngày hiệu lực đến đã tồn tại trong bảng giá khác";
                        break;
                    }
                    else if ((item.EffectiveDate <= effectiveDate && item.ExpiryDate >= effectiveDate) && (item.EffectiveDate <= expiryDate && item.ExpiryDate >= expiryDate))
                    {
                        msg.Error = true;
                        msg.Title = "Ngày hiệu lực từ và đến đã tồn tại trong bảng giá khác";
                        break;
                    }
                }
            }
            catch (Exception ex) { }
            return msg;
        }

        [HttpPost]
        public async Task<object> LoadAllSellPrice(string headerCode, string user)
        {
            JMessage msg = new JMessage();
            try
            {
                using (await userLock.LockAsync(headerCode))
                {
                    var rs = _context.SubProducts.Where(x => !x.IsDeleted).Select(x => new
                    {
                        Catelogue = x.ProductCode,
                        ProductCode = x.ProductQrCode,
                        ProductType = "SUB_PRODUCT",
                        PriceM = x.PricePerM,
                        PriceM2 = x.PricePerM2,
                        x.PriceCostCatelogue,
                        x.PriceCostAirline,
                        x.PriceCostSea,
                        x.PriceRetailBuild,
                        x.PriceRetailBuildAirline,
                        x.PriceRetailBuildSea,
                        x.PriceRetailNoBuild,
                        x.PriceRetailNoBuildAirline,
                        x.PriceRetailNoBuildSea,
                    });

                    var rs1 = _context.MaterialProducts.Where(x => !x.IsDeleted && x.TypeCode == "FINISHED_PRODUCT").Select(x => new
                    {
                        Catelogue = "",
                        ProductCode = x.ProductCode,
                        ProductType = "FINISHED_PRODUCT",
                        PriceM = x.PricePerM,
                        PriceM2 = x.PricePerM2,
                        x.PriceCostCatelogue,
                        x.PriceCostAirline,
                        x.PriceCostSea,
                        x.PriceRetailBuild,
                        x.PriceRetailBuildAirline,
                        x.PriceRetailBuildSea,
                        x.PriceRetailNoBuild,
                        x.PriceRetailNoBuildAirline,
                        x.PriceRetailNoBuildSea,
                    });

                    var listProduct = rs1.Concat(rs).AsNoTracking().ToList();
                    var listProductPrice = _context.ProductCostDetails.Where(x => x.HeaderCode.Equals(headerCode) && !x.IsDeleted).ToList();
                    var listProductInserNew = listProduct.Where(x => !listProductPrice.Any(y => y.ProductCode.Equals(x.ProductCode))).ToList();

                    foreach (var item in listProduct)
                    {
                        var check = _context.ProductCostDetails.FirstOrDefault(x => x.ProductCode.Equals(item.ProductCode) && x.HeaderCode.Equals(headerCode) && !x.IsDeleted);
                        if (check == null)
                        {
                            var product = new ProductCostDetail
                            {
                                HeaderCode = headerCode,
                                ProductCode = item.ProductCode,
                                Catelogue = item.Catelogue,
                                CreatedBy = user,
                                CreatedTime = DateTime.Now,
                                PriceCostCatelogue = item.PriceCostCatelogue,
                                PriceCostAirline = item.PriceCostAirline,
                                PriceCostSea = item.PriceCostSea,
                                PriceRetailBuild = item.PriceRetailBuild,
                                PriceRetailBuildAirline = item.PriceRetailBuildAirline,
                                PriceRetailBuildSea = item.PriceRetailBuildSea,
                                PriceRetailNoBuild = item.PriceRetailNoBuild,
                                PriceRetailNoBuildAirline = item.PriceRetailNoBuildAirline,
                                PriceRetailNoBuildSea = item.PriceRetailNoBuildSea,
                            };

                            _context.ProductCostDetails.Add(product);
                            await _context.SaveChangesAsync();
                        }
                    }

                    msg.Error = false;
                    msg.Object = listProduct;
                    msg.Title = "Tải giá mặc định thành công";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Tải giá mặc định thất bại";
                throw ex;
            }

            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetProductCatelogueSellPrice()
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = _context.MaterialProducts.Where(x => !x.IsDeleted && x.TypeCode.Equals("SUB_PRODUCT"))
                                                .Select(x => new { Code = x.ProductCode, Name = x.ProductName }).ToList();
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetListProductSellPrice(string catelogue)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var listData = (from a in _context.ProductCostDetails.Where(x => !x.IsDeleted)
                                join b in _context.SubProducts on a.ProductCode equals b.ProductQrCode into b1
                                from b2 in b1.DefaultIfEmpty()
                                join c in _context.MaterialProducts on a.ProductCode equals c.ProductCode into c1
                                from c2 in c1.DefaultIfEmpty()
                                where (string.IsNullOrEmpty(catelogue) || a.Catelogue.Equals(catelogue)) && (c2 != null || b2 != null)
                                select new
                                {
                                    Code = a.ProductCode,
                                    Name = c2 != null ? string.Format("Thành phẩm_{0}-{1}", c2.ProductName, c2.ProductCode) : string.Format("{0}-{1}_{2}", _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b2.ProductCode)) != null ? _context.MaterialProducts.FirstOrDefault(p => p.ProductCode.Equals(b2.ProductCode)).ProductName : null, b2.ProductCode, b2.AttributeCode),
                                }).AsNoTracking().ToList();
                var listDataRs = listData.GroupBy(x => x.Code)
                    .Select(x => new
                    {
                        Code = x.First().Code,
                        Name = x.First().Name
                    }).ToList();
                msg.Object = listDataRs;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetProductDetailSellPrice(string headerCode, string productCatelogueCodeSearch, string productCodeSearch)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var query = (from a in _context.ProductCostDetails.Where(x => !x.IsDeleted)
                             join c in _context.SubProducts.Where(x => !x.IsDeleted) on a.ProductCode equals c.ProductQrCode into c1
                             from c2 in c1.DefaultIfEmpty()
                             join d in _context.MaterialProducts.Where(x => !x.IsDeleted) on a.ProductCode equals d.ProductCode into d1
                             from d2 in d1.DefaultIfEmpty()
                             where a.HeaderCode == headerCode
                             && (string.IsNullOrEmpty(productCodeSearch) || a.ProductCode.Equals(productCodeSearch))
                             && (string.IsNullOrEmpty(productCatelogueCodeSearch) || c2.ProductCode.Equals(productCatelogueCodeSearch))
                             select new
                             {
                                 a.Id,
                             });
                msg.Object = query;
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Object = ex.Message;
                msg.Title = "Có lỗi khi lấy thông tin!";

            }
            return Json(msg);
        }
        //public class ProductCostDetail
        //{
        //    public ProductCostDetail()
        //    {
        //        ListProductProcess = new List<ProductProcess>();
        //    }

        //    public int Id { get; set; }
        //    public string HeaderCode { get; set; }
        //    public string ProductCode { get; set; }
        //    public decimal PriceCost { get; set; }
        //    public decimal PriceRetail { get; set; }
        //    public int Tax { get; set; }
        //    //public decimal Commission { get; set; }
        //    //public decimal Discount { get; set; }
        //    //public decimal CustomFee { get; set; }
        //    public string CreatedBy { get; set; }
        //    public DateTime CreatedTime { get; set; }
        //    public string UpdatedBy { get; set; }
        //    public DateTime? UpdatedTime { get; set; }
        //    public string DeletedBy { get; set; }
        //    public DateTime? DeletedTime { get; set; }
        //    public bool IsDeleted { get; set; }
        //    public string Catelogue { get; set; }
        //    public decimal? PriceCostDefault { get; set; }
        //    public decimal? PriceCostCatelogue { get; set; }
        //    public decimal? PriceCostAirline { get; set; }
        //    public decimal? PriceCostSea { get; set; }
        //    public decimal? PriceRetailBuild { get; set; }
        //    public decimal? PriceRetailBuildAirline { get; set; }
        //    public decimal? PriceRetailBuildSea { get; set; }
        //    public decimal? PriceRetailNoBuild { get; set; }
        //    public decimal? PriceRetailNoBuildAirline { get; set; }
        //    public decimal? PriceRetailNoBuildSea { get; set; }
        //    public decimal? RatePriceCostCatelogue { get; set; }
        //    public decimal? RatePriceCostAirline { get; set; }
        //    public decimal? RatePriceCostSea { get; set; }
        //    public decimal? RatePriceRetailBuild { get; set; }
        //    public decimal? RatePriceRetailBuildAirline { get; set; }
        //    public decimal? RatePriceRetailBuildSea { get; set; }
        //    public decimal? RatePriceRetailNoBuild { get; set; }
        //    public decimal? RatePriceRetailNoBuildAirline { get; set; }
        //    public decimal? RatePriceRetailNoBuildSea { get; set; }
        //    public string ProductName { get; set; }
        //    public string ProductType { get; set; }
        //    public List<ProductProcess> ListProductProcess { get; set; }
        //}

        //public class ProductProcess
        //{
        //    public int Id { get; set; }
        //}
        [HttpPost]
        public object UpdateProductPriceChange(ProductCostDetail obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (obj.ListProductProcess.Count > 0)
                {
                    var changeNumber = 1;

                    var costTableLogMax = _context.CostTableLogs.MaxBy(x => x.ChangeNumber);
                    if (costTableLogMax != null)
                        changeNumber = costTableLogMax.ChangeNumber + 1;

                    foreach (var item in obj.ListProductProcess)
                    {
                        var data = _context.ProductCostDetails.FirstOrDefault(x => x.Id == item.Id && x.IsDeleted == false);
                        if (data != null)
                        {
                            var prdCostHeader = _context.ProductCostHeaders.FirstOrDefault(x => x.HeaderCode.Equals(data.HeaderCode));
                            if (prdCostHeader != null)
                            {
                                var costTableLog = new CostTableLog
                                {
                                    PriceCostCatelogue = data.PriceCostCatelogue,
                                    PriceCostAirline = data.PriceCostAirline,
                                    PriceCostSea = data.PriceCostSea,
                                    PriceRetailBuild = data.PriceRetailBuild,
                                    PriceRetailBuildAirline = data.PriceRetailBuild,
                                    PriceRetailBuildSea = data.PriceRetailBuild,
                                    PriceRetailNoBuild = data.PriceRetailBuild,
                                    PriceRetailNoBuildAirline = data.PriceRetailBuild,
                                    PriceRetailNoBuildSea = data.PriceRetailBuild,
                                    HeaderCode = data.HeaderCode,
                                    Tax = data.Tax,
                                    CreatedBy = data.CreatedBy,
                                    CreatedTime = data.CreatedTime,
                                    ProductCode = data.ProductCode,
                                    IsDeleted = data.IsDeleted,
                                    Catelogue = data.Catelogue,
                                    RecordStatus = "OLD",
                                    ChangeNumber = changeNumber,
                                    FromDate = prdCostHeader.EffectiveDate,
                                    ToDate = prdCostHeader.ExpiryDate
                                };

                                InsertCostTableLog(costTableLog);
                            }

                            if (obj.Tax > 0)
                                data.Tax = obj.Tax;

                            data.PriceCostCatelogue = obj.RatePriceCostCatelogue != null ? data.PriceCostCatelogue * obj.RatePriceCostCatelogue : data.PriceCostCatelogue;
                            data.PriceCostAirline = obj.RatePriceCostAirline != null ? data.PriceCostAirline * obj.RatePriceCostAirline : data.PriceCostAirline;
                            data.PriceCostSea = obj.RatePriceCostSea != null ? data.PriceCostSea * obj.RatePriceCostSea : data.PriceCostSea;
                            data.PriceRetailBuild = obj.RatePriceRetailBuild != null ? data.PriceRetailBuild * obj.RatePriceRetailBuild : data.PriceRetailBuild;
                            data.PriceRetailBuildAirline = obj.RatePriceRetailBuildAirline != null ? data.PriceRetailBuildAirline * obj.RatePriceRetailBuildAirline : data.PriceRetailBuildAirline;
                            data.PriceRetailBuildSea = obj.RatePriceRetailBuildSea != null ? data.PriceRetailBuildSea * obj.RatePriceRetailBuildSea : data.PriceRetailBuildSea;
                            data.PriceRetailNoBuild = obj.RatePriceRetailNoBuild != null ? data.PriceRetailNoBuild * obj.RatePriceRetailNoBuild : data.PriceRetailNoBuild;
                            data.PriceRetailNoBuildAirline = obj.RatePriceRetailNoBuildAirline != null ? data.PriceRetailNoBuildAirline * obj.RatePriceRetailNoBuildAirline : data.PriceRetailNoBuildAirline;
                            data.PriceRetailNoBuildSea = obj.RatePriceRetailNoBuildSea != null ? data.PriceRetailNoBuildSea * obj.RatePriceRetailNoBuildSea : data.PriceRetailNoBuildSea;
                            data.UpdatedBy = obj.UpdatedBy;
                            data.UpdatedTime = DateTime.Now;

                            _context.ProductCostDetails.Update(data);
                            _context.SaveChanges();

                            if (prdCostHeader != null)
                            {
                                var costTableLog = new CostTableLog
                                {
                                    PriceCostCatelogue = data.PriceCostCatelogue,
                                    PriceCostAirline = data.PriceCostAirline,
                                    PriceCostSea = data.PriceCostSea,
                                    PriceRetailBuild = data.PriceRetailBuild,
                                    PriceRetailBuildAirline = data.PriceRetailBuild,
                                    PriceRetailBuildSea = data.PriceRetailBuild,
                                    PriceRetailNoBuild = data.PriceRetailBuild,
                                    PriceRetailNoBuildAirline = data.PriceRetailBuild,
                                    PriceRetailNoBuildSea = data.PriceRetailBuild,
                                    HeaderCode = data.HeaderCode,
                                    Tax = data.Tax,
                                    CreatedBy = data.CreatedBy,
                                    CreatedTime = data.CreatedTime,
                                    ProductCode = data.ProductCode,
                                    IsDeleted = data.IsDeleted,
                                    Catelogue = data.Catelogue,
                                    RecordStatus = "NEW",
                                    ChangeNumber = changeNumber,
                                    FromDate = prdCostHeader.EffectiveDate,
                                    ToDate = prdCostHeader.ExpiryDate
                                };

                                InsertCostTableLog(costTableLog);
                            }

                            msg.Error = false;
                            msg.Title = "Cập nhật thành công";
                        }
                        else
                        {
                            msg.Error = true;
                            msg.Title = "Sản phẩm không tồn tại";
                        }
                    }
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Danh sách sản phẩm trống";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [NonAction]
        public object InsertCostTableLog(CostTableLog obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                if (obj != null)
                {
                    _context.CostTableLogs.Add(obj);
                    _context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
                msg.Object = ex;
            }
            return Json(msg);
        }
        [HttpPost]
        public object UpdateProductPriceDetail(ProductCostDetail obj)
        {
            var msg = new JMessage { Error = false, Title = "" };
            try
            {
                var data = _context.ProductCostDetails.FirstOrDefault(x => x.Id == obj.Id && x.IsDeleted == false);
                if (data != null)
                {
                    var changeNumber = 1;

                    var costTableLogMax = _context.CostTableLogs.MaxBy(x => x.ChangeNumber);
                    if (costTableLogMax != null)
                        changeNumber = costTableLogMax.ChangeNumber + 1;

                    var prdCostHeader = _context.ProductCostHeaders.FirstOrDefault(x => x.HeaderCode.Equals(data.HeaderCode));
                    if (prdCostHeader != null)
                    {
                        var costTableLog = new CostTableLog
                        {
                            PriceCostDefault = data.PriceCostDefault,
                            PriceCostCatelogue = data.PriceCostCatelogue,
                            PriceCostAirline = data.PriceCostAirline,
                            PriceCostSea = data.PriceCostSea,
                            PriceRetailBuild = data.PriceRetailBuild,
                            PriceRetailBuildAirline = data.PriceRetailBuild,
                            PriceRetailBuildSea = data.PriceRetailBuild,
                            PriceRetailNoBuild = data.PriceRetailBuild,
                            PriceRetailNoBuildAirline = data.PriceRetailBuild,
                            PriceRetailNoBuildSea = data.PriceRetailBuild,
                            HeaderCode = data.HeaderCode,
                            Tax = data.Tax,
                            CreatedBy = data.CreatedBy,
                            CreatedTime = data.CreatedTime,
                            ProductCode = data.ProductCode,
                            IsDeleted = data.IsDeleted,
                            Catelogue = data.Catelogue,
                            RecordStatus = "OLD",
                            ChangeNumber = changeNumber,
                            FromDate = prdCostHeader.EffectiveDate,
                            ToDate = prdCostHeader.ExpiryDate
                        };

                        InsertCostTableLog(costTableLog);
                    }

                    data.Tax = obj.Tax;
                    data.PriceCost = obj.PriceCost;
                    data.PriceCostDefault = obj.PriceCostDefault;
                    data.PriceCostCatelogue = obj.PriceCostCatelogue;
                    data.PriceCostAirline = obj.PriceCostAirline;
                    data.PriceCostSea = obj.PriceCostSea;
                    data.PriceRetailBuild = obj.PriceRetailBuild;
                    data.PriceRetailBuildAirline = obj.PriceRetailBuildAirline;
                    data.PriceRetailBuildSea = obj.PriceRetailBuildSea;
                    data.PriceRetailNoBuild = obj.PriceRetailNoBuild;
                    data.PriceRetailNoBuildAirline = obj.PriceRetailNoBuildAirline;
                    data.PriceRetailNoBuildSea = obj.PriceRetailNoBuildSea;
                    data.UpdatedBy = obj.UpdatedBy;
                    data.UpdatedTime = DateTime.Now;

                    _context.ProductCostDetails.Update(data);
                    _context.SaveChanges();

                    if (prdCostHeader != null)
                    {
                        var costTableLog = new CostTableLog
                        {
                            PriceCostDefault = data.PriceCostDefault,
                            PriceCostCatelogue = data.PriceCostCatelogue,
                            PriceCostAirline = data.PriceCostAirline,
                            PriceCostSea = data.PriceCostSea,
                            PriceRetailBuild = data.PriceRetailBuild,
                            PriceRetailBuildAirline = data.PriceRetailBuild,
                            PriceRetailBuildSea = data.PriceRetailBuild,
                            PriceRetailNoBuild = data.PriceRetailBuild,
                            PriceRetailNoBuildAirline = data.PriceRetailBuild,
                            PriceRetailNoBuildSea = data.PriceRetailBuild,
                            HeaderCode = data.HeaderCode,
                            Tax = data.Tax,
                            CreatedBy = data.CreatedBy,
                            CreatedTime = data.CreatedTime,
                            ProductCode = data.ProductCode,
                            IsDeleted = data.IsDeleted,
                            Catelogue = data.Catelogue,
                            RecordStatus = "NEW",
                            ChangeNumber = changeNumber,
                            FromDate = prdCostHeader.EffectiveDate,
                            ToDate = prdCostHeader.ExpiryDate
                        };

                        InsertCostTableLog(costTableLog);
                    }
                    msg.Error = false;
                    msg.Title = "Cập nhật thành công";
                }
                else
                {
                    msg.Error = true;
                    msg.Title = "Sản phẩm không tồn tại";
                }
            }
            catch (Exception ex)
            {
                msg.Error = true;
                msg.Title = "Có lỗi xảy ra!";
                msg.Object = ex;
            }
            return Json(msg);
        }

        [HttpPost]
        public JsonResult GetTableProductPriceDetail(string headerCode, string productCatelogueCodeSearch, string productCodeSearch)
        {
            var msg = new JMessage() { Error = false };
            var query = (from a in _context.ProductCostDetails.Where(x => !x.IsDeleted)
                         join c in _context.SubProducts.Where(x => !x.IsDeleted) on a.ProductCode equals c.ProductQrCode into c1
                         from c2 in c1.DefaultIfEmpty()
                         join d in _context.MaterialProducts on a.ProductCode equals d.ProductCode into d1
                         from d2 in d1.DefaultIfEmpty()
                         where a.HeaderCode == headerCode
                         && (string.IsNullOrEmpty(productCatelogueCodeSearch) || a.ProductCode.Equals(productCatelogueCodeSearch))
                         && (string.IsNullOrEmpty(productCatelogueCodeSearch) || a.Catelogue.Equals(productCatelogueCodeSearch))
                         select new ProductCostDetail
                         {
                             Id = a.Id,
                             ProductCode = a.ProductCode,
                             ProductType = (c2 != null ? "SUB_PRODUCT" : "FINISHED_PRODUCT"),
                             ProductName = (c2 != null ? c2.AttributeName : d2 != null ? d2.ProductName : null),
                             PriceCost = a.PriceCost,
                             PriceRetail = a.PriceRetail,
                             Tax = a.Tax,
                             PriceCostDefault = a.PriceCostDefault != null ? a.PriceCostDefault : 0,
                             PriceCostCatelogue = a.PriceCostCatelogue != null ? a.PriceCostCatelogue : 0,
                             PriceCostAirline = a.PriceCostAirline != null ? a.PriceCostAirline : 0,
                             PriceCostSea = a.PriceCostSea != null ? a.PriceCostSea : 0,
                             PriceRetailBuild = a.PriceRetailBuild != null ? a.PriceRetailBuild : 0,
                             PriceRetailBuildAirline = a.PriceRetailBuildAirline != null ? a.PriceRetailBuildAirline : 0,
                             PriceRetailBuildSea = a.PriceRetailBuildSea != null ? a.PriceRetailBuildSea : 0,
                             PriceRetailNoBuild = a.PriceRetailNoBuild != null ? a.PriceRetailNoBuild : 0,
                             PriceRetailNoBuildAirline = a.PriceRetailNoBuildAirline != null ? a.PriceRetailNoBuildAirline : 0,
                             PriceRetailNoBuildSea = a.PriceRetailNoBuildSea != null ? a.PriceRetailNoBuildSea : 0,
                             Catelogue = a.Catelogue
                         });
            foreach (var item in query)
            {
                if (string.IsNullOrEmpty(item.ProductName))
                {
                    item.ProductName = _context.SubProducts.LastOrDefault(p => p.ProductQrCode.Equals(item.ProductCode)) != null ? _context.SubProducts.LastOrDefault(p => p.ProductQrCode.Equals(item.ProductCode)).AttributeName : item.ProductName;
                    if (string.IsNullOrEmpty(item.ProductName))
                        item.ProductName = _context.MaterialProducts.LastOrDefault(p => p.ProductCode.Equals(item.ProductCode)) != null ? _context.MaterialProducts.LastOrDefault(p => p.ProductCode.Equals(item.ProductCode)).ProductName : item.ProductName;
                }
            };
            msg.Object = query;
            return Json(msg);
        }

        public object DeleteProductSellPrice(int Id)
        {
            JMessage msg = new JMessage();
            var data = _context.ProductCostDetails.FirstOrDefault(x => x.Id == Id && x.IsDeleted == false);
            if (data != null)
            {
                data.IsDeleted = true;
                data.DeletedBy = User.Identity.Name;
                data.DeletedTime = DateTime.Now;
                _context.ProductCostDetails.Update(data);
                _context.SaveChanges();
                msg.Error = false;
                msg.Title = "Xóa thành công";
            }
            else
            {
                msg.Error = true;
                msg.Title = "Bản ghi không tồn tại";
            }

            return Json(msg);
        }
        #endregion
    }
    public class SearchProduct
    {
        public string Product { get; set; }
        public int Page { get; set; }
        public int Length { get; set; }
        public string Category { get; set; }
    }
    public class SearchSensors : JTableModel
    {
        public string FromDate { get; set; }
        public string ToDate { get; set; }
        public string Location { get; set; }
    }
    public class JTableAccEntryModel : JTableModel
    {
        public string AetCode { get; set; }
        public string Title { get; set; }
        public string AetType { get; set; }
        public string CatCode { get; set; }
        public string AetRelativeType { get; set; }
        public string Payer { get; set; }
        public string Currency { get; set; }
        public string FromDate { get; set; }
        public string ToDate { get; set; }
        public int CurrentPageView { get; set; }
    }
    public class SearchChartModel
    {
        public string FromDate { get; set; }
        public string ToDate { get; set; }
        public string AetType { get; set; }
        public string CatParent { get; set; }
        public string CatCodeExpense { get; set; }
        public string CatCodeReceipte { get; set; }
    }
    public class SearchChartResponse
    {
        public decimal Total { get; set; }
        public string Date { get; set; }
    }
    public class JMessage3 : JMessage
    {
        public int MaxLength { get; set; }
    }
}